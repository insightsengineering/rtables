[{"path":"https://roche.github.io/rtables/main/ISSUE_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Reporting an Issue with rtables","title":"Reporting an Issue with rtables","text":"Please briefly describe problem , relevant, output expect. Please also provide output utils::sessionInfo() devtools::session_info() end post. possible, please include minimal, reproducible example. rtables team much likely resolve issue able reproduce locally. Please delete preamble read . brief description problem","code":"library(rtables)  # your reproducible example here"},{"path":"https://roche.github.io/rtables/main/articles/baseline.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Comparing Against Baselines or Control","text":"Often data one column considered reference/baseline/comparison group compared data columns. example, lets calculate average age: difference average AGE placebo arm arms: Note column order changed reference group displayed first column. cases want cells blank reference column, (e.g., “B: Placebo”) use non_ref_rcell() instead rcell(), pass .in_ref_col second argument: can see arguments available afun manual fro analyze().","code":"library(rtables) # Loading required package: magrittr # Loading required package: formatters basic_table() %>%   split_cols_by(\"ARM\") %>%   analyze(\"AGE\") %>%   build_table(DM) #        A: Drug X   B: Placebo   C: Combination # —————————————————————————————————————————————— # Mean     34.91       33.02          34.57 basic_table() %>%   split_cols_by(\"ARM\", ref_group = \"B: Placebo\") %>%   analyze(\"AGE\", afun = function(x, .ref_group) {     in_rows(       \"Difference of Averages\" = rcell(mean(x) - mean(.ref_group), format = \"xx.xx\")     )   }) %>%   build_table(DM) #                          B: Placebo   A: Drug X   C: Combination # ———————————————————————————————————————————————————————————————— # Difference of Averages      0.00        1.89           1.55 basic_table() %>%   split_cols_by(\"ARM\", ref_group = \"B: Placebo\") %>%   analyze(\"AGE\", afun = function(x, .ref_group, .in_ref_col) {       in_rows(\"Difference of Averages\" = non_ref_rcell(mean(x) - mean(.ref_group),                                                        is_ref = .in_ref_col,                                                        format = \"xx.xx\"))   }) %>%   build_table(DM) #                          B: Placebo   A: Drug X   C: Combination # ———————————————————————————————————————————————————————————————— # Difference of Averages                  1.89           1.55 basic_table() %>%   split_cols_by(\"ARM\", ref_group = \"B: Placebo\") %>%   analyze(\"AGE\", afun = function(x, .ref_group, .in_ref_col) {       in_rows(           \"Difference of Averages\" = non_ref_rcell(mean(x) - mean(.ref_group),                                                    is_ref = .in_ref_col,                                                    format = \"xx.xx\"),          \"another row\" = non_ref_rcell(\"aaa\", .in_ref_col)       )   }) %>%   build_table(DM) #                          B: Placebo   A: Drug X   C: Combination # ———————————————————————————————————————————————————————————————— # Difference of Averages                  1.89           1.55      # another row                              aaa           aaa"},{"path":"https://roche.github.io/rtables/main/articles/baseline.html","id":"row-splitting","dir":"Articles","previous_headings":"","what":"Row Splitting","title":"Comparing Against Baselines or Control","text":"adding row-splitting reference data may represented column without row splitting. example: data assigned .ref_full full data reference column data assigned .ref_group respects subsetting defined row-splitting hence subset argument x df afun.","code":"basic_table() %>%   split_cols_by(\"ARM\", ref_group = \"B: Placebo\") %>%   add_colcounts() %>%   split_rows_by(\"SEX\", split_fun = drop_split_levels) %>%   analyze(\"AGE\", afun = function(x, .ref_group, .ref_full, .in_ref_col) {     in_rows(       \"is reference (.in_ref_col)\" = rcell(.in_ref_col),       \"ref cell N (.ref_group)\" = rcell(length(.ref_group)),       \"ref column N (.ref_full)\" = rcell(length(.ref_full))     )   }) %>%   build_table(subset(DM, SEX %in% c(\"M\", \"F\"))) #                                B: Placebo   A: Drug X   C: Combination #                                 (N=106)      (N=121)       (N=129)     # —————————————————————————————————————————————————————————————————————— # F                                                                      #   is reference (.in_ref_col)      TRUE        FALSE         FALSE      #   ref cell N (.ref_group)          56          56             56       #   ref column N (.ref_full)        106          106           106       # M                                                                      #   is reference (.in_ref_col)      TRUE        FALSE         FALSE      #   ref cell N (.ref_group)          50          50             50       #   ref column N (.ref_full)        106          106           106"},{"path":"https://roche.github.io/rtables/main/articles/clinical_trials.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Example Clinical Trials Tables","text":"vignette create demographic table adverse event table response table using rtables layout facility. , demonstrate layout based tabulation framework can specify structure relations commonly found analyzing clinical trials data. Note data created using random number generators. ex_* data currently attached rtables package provided formatters package created using random.cdisc.data R package. packages used vignette :","code":"library(rtables) library(tibble) library(dplyr)"},{"path":"https://roche.github.io/rtables/main/articles/clinical_trials.html","id":"demographic-table","dir":"Articles","previous_headings":"","what":"Demographic Table","title":"Example Clinical Trials Tables","text":"Demographic tables summarize variables content different population subsets (encoded columns). One feature analyze() introduced previous vignette analysis function afun can specify multiple rows in_rows() function: Multiple variables can analyzed one analyze() call: Hence, afun can process different data vector types (.e. variables selected data) fairly close standard demographic table. function either creates count table number summary argument x factor numeric, respectively: Note use rcells wrap results order add formatting instructions rtables. can use s_summary outside context tabulation: can now create commonly used variant demographic table: Note analyze() can also called multiple times sequence: leads table identical tbl: clinical trials analyses number patients per column often referred N (rather overall population outside clinical trials commonly referred N). Column Ns added using add_colcounts() function:","code":"ADSL <- ex_adsl  # Example ADSL dataset  basic_table() %>%   split_cols_by(\"ARM\") %>%   analyze(vars = \"AGE\", afun = function(x) {     in_rows(       \"Mean (sd)\" = rcell(c(mean(x), sd(x)), format = \"xx.xx (xx.xx)\"),       \"Range\" = rcell(range(x), format = \"xx.xx - xx.xx\")     )   }) %>%   build_table(ADSL) #               A: Drug X      B: Placebo     C: Combination # —————————————————————————————————————————————————————————— # Mean (sd)   33.77 (6.55)    35.43 (7.90)     35.43 (7.72)  # Range       21.00 - 50.00   21.00 - 62.00   20.00 - 69.00 basic_table() %>%   split_cols_by(\"ARM\") %>%   analyze(vars = c(\"AGE\", \"BMRKR1\"), afun = function(x) {     in_rows(       \"Mean (sd)\" = rcell(c(mean(x), sd(x)), format = \"xx.xx (xx.xx)\"),       \"Range\" = rcell(range(x), format = \"xx.xx - xx.xx\")     )   }) %>%   build_table(ADSL) #                 A: Drug X      B: Placebo     C: Combination # ———————————————————————————————————————————————————————————— # AGE                                                          #   Mean (sd)   33.77 (6.55)    35.43 (7.90)     35.43 (7.72)  #   Range       21.00 - 50.00   21.00 - 62.00   20.00 - 69.00  # BMRKR1                                                       #   Mean (sd)    5.97 (3.55)     5.70 (3.31)     5.62 (3.49)   #   Range       0.41 - 17.67    0.65 - 14.24     0.17 - 21.39 s_summary <- function(x) {   if (is.numeric(x)) {     in_rows(       \"n\" = rcell(sum(!is.na(x)), format = \"xx\"),       \"Mean (sd)\" = rcell(c(mean(x, na.rm = TRUE), sd(x, na.rm = TRUE)), format = \"xx.xx (xx.xx)\"),       \"IQR\" = rcell(IQR(x, na.rm = TRUE), format = \"xx.xx\"),       \"min - max\" = rcell(range(x, na.rm = TRUE), format = \"xx.xx - xx.xx\")     )   } else if (is.factor(x)) {     vs <- as.list(table(x))     do.call(in_rows, lapply(vs, rcell, format = \"xx\"))   } else {     stop(\"type not supported\")   } } s_summary(ADSL$AGE) # RowsVerticalSection (in_rows) object print method: # ---------------------------- #    row_name formatted_cell indent_mod row_label # 1         n            400          0         n # 2 Mean (sd)   34.88 (7.44)          0 Mean (sd) # 3       IQR          10.00          0       IQR # 4 min - max  20.00 - 69.00          0 min - max s_summary(ADSL$SEX) # RowsVerticalSection (in_rows) object print method: # ---------------------------- #           row_name formatted_cell indent_mod        row_label # 1                F            222          0                F # 2                M            166          0                M # 3                U              9          0                U # 4 UNDIFFERENTIATED              3          0 UNDIFFERENTIATED lyt <- basic_table() %>%   split_cols_by(var = \"ARM\") %>%   analyze(c(\"AGE\", \"SEX\"), afun = s_summary)  tbl <- build_table(lyt, ADSL) tbl #                        A: Drug X      B: Placebo     C: Combination # ——————————————————————————————————————————————————————————————————— # AGE                                                                 #   n                       134             134             132       #   Mean (sd)          33.77 (6.55)    35.43 (7.90)     35.43 (7.72)  #   IQR                    11.00           10.00           10.00      #   min - max          21.00 - 50.00   21.00 - 62.00   20.00 - 69.00  # SEX                                                                 #   F                       79              77               66       #   M                       51              55               60       #   U                        3               2               4        #   UNDIFFERENTIATED         1               0               2 tbl2 <- basic_table() %>%   split_cols_by(var = \"ARM\") %>%   analyze(\"AGE\", s_summary) %>%   analyze(\"SEX\", s_summary) %>%   build_table(ADSL)  tbl2 #                        A: Drug X      B: Placebo     C: Combination # ——————————————————————————————————————————————————————————————————— # AGE                                                                 #   n                       134             134             132       #   Mean (sd)          33.77 (6.55)    35.43 (7.90)     35.43 (7.72)  #   IQR                    11.00           10.00           10.00      #   min - max          21.00 - 50.00   21.00 - 62.00   20.00 - 69.00  # SEX                                                                 #   F                       79              77               66       #   M                       51              55               60       #   U                        3               2               4        #   UNDIFFERENTIATED         1               0               2 identical(tbl, tbl2) # [1] TRUE basic_table() %>%   split_cols_by(var = \"ARMCD\") %>%   add_colcounts() %>%   analyze(c(\"AGE\", \"SEX\"), s_summary) %>%   build_table(ADSL) #                          ARM A           ARM B           ARM C     #                         (N=134)         (N=134)         (N=132)    # —————————————————————————————————————————————————————————————————— # AGE                                                                #   n                       134             134             132      #   Mean (sd)          33.77 (6.55)    35.43 (7.90)    35.43 (7.72)  #   IQR                    11.00           10.00           10.00     #   min - max          21.00 - 50.00   21.00 - 62.00   20.00 - 69.00 # SEX                                                                #   F                       79              77              66       #   M                       51              55              60       #   U                        3               2               4       #   UNDIFFERENTIATED         1               0               2"},{"path":"https://roche.github.io/rtables/main/articles/clinical_trials.html","id":"variations-on-the-demographic-table","dir":"Articles","previous_headings":"Demographic Table","what":"Variations on the Demographic Table","title":"Example Clinical Trials Tables","text":"now show couple variations demographic table developed . variations structure analysis, hence don’t require modification s_summary function. start standard table analyzing variables AGE BMRKR2 variables: Assume like analysis carried per gender encoded row space: now subset ADSL include males females analysis order reduce number rows table: Note UNDIFFERENTIATED U levels still show table. tabulation respects factor levels level order, exactly split table function . empty levels dropped rtables needs know splitting time via split_fun argument split_rows_by(). number predefined functions. example drop_split_levels() required drop empty levels splitting time. Splitting big topic eventually addressed specific package vignette. table labels M F descriptive. can add full labels follows: next table variation stratify gender AGE analysis. nested argument set FALSE analyze() call: split rows groups (Male Female ) one might want summarize groups: usually showing count column percentages. especially important missing data. example create table add missing data AGE variable: easy see many females males arm n represents number non-missing data elements variables. Groups within rows defined splitting can summarized summarize_row_groups(), example: couple things note : Group summaries produce “content” rows. Visually ’s impossible distinguish data rows content rows. difference justified (’s important design decision) paginate tables content rows default repeated group gets divided via pagination. Conceptually content rows summarize patient population analyzed hence often count & group percentages (default behavior summarize_row_groups()). can recreate default behavior (count percentage) defining cfun illustrative purposes results table : Note cfun, like afun (used analyze()), can operate either variables, passed via x argument, data.frames tibbles, passed via df argument (afun can optionally request df ). Unlike afun, cfun must accept labelstr second argument gives default group label (factor level splitting) hence modified:","code":"basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_colcounts() %>%   analyze(c(\"AGE\", \"BMRKR2\"), s_summary) %>%   build_table(ADSL) #                 A: Drug X      B: Placebo     C: Combination #                  (N=134)         (N=134)         (N=132)     # ———————————————————————————————————————————————————————————— # AGE                                                          #   n                134             134             132       #   Mean (sd)   33.77 (6.55)    35.43 (7.90)     35.43 (7.72)  #   IQR             11.00           10.00           10.00      #   min - max   21.00 - 50.00   21.00 - 62.00   20.00 - 69.00  # BMRKR2                                                       #   LOW              50              45               40       #   MEDIUM           37              56               42       #   HIGH             47              33               50 basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_colcounts() %>%   split_rows_by(\"SEX\") %>%   analyze(c(\"AGE\", \"BMRKR2\"), s_summary) %>%   build_table(ADSL) #                      A: Drug X      B: Placebo     C: Combination #                       (N=134)         (N=134)         (N=132)     # ————————————————————————————————————————————————————————————————— # F                                                                 #   AGE                                                             #     n                   79              77               66       #     Mean (sd)      32.76 (6.09)    34.12 (7.06)     35.20 (7.43)  #     IQR                9.00            8.00             6.75      #     min - max      21.00 - 47.00   23.00 - 58.00   21.00 - 64.00  #   BMRKR2                                                          #     LOW                 26              21               26       #     MEDIUM              21              38               17       #     HIGH                32              18               23       # M                                                                 #   AGE                                                             #     n                   51              55               60       #     Mean (sd)      35.57 (7.08)    37.44 (8.69)     35.38 (8.24)  #     IQR                11.00           9.00            11.00      #     min - max      23.00 - 50.00   21.00 - 62.00   20.00 - 69.00  #   BMRKR2                                                          #     LOW                 21              23               11       #     MEDIUM              15              18               23       #     HIGH                15              14               26       # U                                                                 #   AGE                                                             #     n                    3               2               4        #     Mean (sd)      31.67 (3.21)    31.00 (5.66)     35.25 (3.10)  #     IQR                3.00            4.00             3.25      #     min - max      28.00 - 34.00   27.00 - 35.00   31.00 - 38.00  #   BMRKR2                                                          #     LOW                  2               1               1        #     MEDIUM               1               0               2        #     HIGH                 0               1               1        # UNDIFFERENTIATED                                                  #   AGE                                                             #     n                    1               0               2        #     Mean (sd)       28.00 (NA)          NA          45.00 (1.41)  #     IQR                0.00             NA              1.00      #     min - max      28.00 - 28.00    Inf - -Inf     44.00 - 46.00  #   BMRKR2                                                          #     LOW                  1               0               2        #     MEDIUM               0               0               0        #     HIGH                 0               0               0 ADSL_M_F <- filter(ADSL, SEX %in% c(\"M\", \"F\"))  basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_colcounts() %>%   split_rows_by(\"SEX\") %>%   analyze(c(\"AGE\", \"BMRKR2\"), s_summary) %>%   build_table(ADSL_M_F) #                      A: Drug X      B: Placebo     C: Combination #                       (N=130)         (N=132)         (N=126)     # ————————————————————————————————————————————————————————————————— # F                                                                 #   AGE                                                             #     n                   79              77               66       #     Mean (sd)      32.76 (6.09)    34.12 (7.06)     35.20 (7.43)  #     IQR                9.00            8.00             6.75      #     min - max      21.00 - 47.00   23.00 - 58.00   21.00 - 64.00  #   BMRKR2                                                          #     LOW                 26              21               26       #     MEDIUM              21              38               17       #     HIGH                32              18               23       # M                                                                 #   AGE                                                             #     n                   51              55               60       #     Mean (sd)      35.57 (7.08)    37.44 (8.69)     35.38 (8.24)  #     IQR                11.00           9.00            11.00      #     min - max      23.00 - 50.00   21.00 - 62.00   20.00 - 69.00  #   BMRKR2                                                          #     LOW                 21              23               11       #     MEDIUM              15              18               23       #     HIGH                15              14               26       # U                                                                 #   AGE                                                             #     n                    0               0               0        #     Mean (sd)           NA              NA               NA       #     IQR                 NA              NA               NA       #     min - max       Inf - -Inf      Inf - -Inf       Inf - -Inf   #   BMRKR2                                                          #     LOW                  0               0               0        #     MEDIUM               0               0               0        #     HIGH                 0               0               0        # UNDIFFERENTIATED                                                  #   AGE                                                             #     n                    0               0               0        #     Mean (sd)           NA              NA               NA       #     IQR                 NA              NA               NA       #     min - max       Inf - -Inf      Inf - -Inf       Inf - -Inf   #   BMRKR2                                                          #     LOW                  0               0               0        #     MEDIUM               0               0               0        #     HIGH                 0               0               0 basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_colcounts() %>%   split_rows_by(\"SEX\", split_fun = drop_split_levels, child_labels = \"visible\") %>%   analyze(c(\"AGE\", \"BMRKR2\"), s_summary) %>%   build_table(ADSL_M_F) #                   A: Drug X      B: Placebo     C: Combination #                    (N=130)         (N=132)         (N=126)     # —————————————————————————————————————————————————————————————— # F                                                              #   AGE                                                          #     n                79              77               66       #     Mean (sd)   32.76 (6.09)    34.12 (7.06)     35.20 (7.43)  #     IQR             9.00            8.00             6.75      #     min - max   21.00 - 47.00   23.00 - 58.00   21.00 - 64.00  #   BMRKR2                                                       #     LOW              26              21               26       #     MEDIUM           21              38               17       #     HIGH             32              18               23       # M                                                              #   AGE                                                          #     n                51              55               60       #     Mean (sd)   35.57 (7.08)    37.44 (8.69)     35.38 (8.24)  #     IQR             11.00           9.00            11.00      #     min - max   23.00 - 50.00   21.00 - 62.00   20.00 - 69.00  #   BMRKR2                                                       #     LOW              21              23               11       #     MEDIUM           15              18               23       #     HIGH             15              14               26 ADSL_M_F_l <- ADSL_M_F %>%   mutate(lbl_sex = case_when(     SEX == \"M\" ~ \"Male\",     SEX == \"F\" ~ \"Female\",     SEX == \"U\" ~ \"Unknown\",     SEX == \"UNDIFFERENTIATED\" ~ \"Undifferentiated\"   ))  basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_colcounts() %>%   split_rows_by(\"SEX\", labels_var = \"lbl_sex\", split_fun = drop_split_levels, child_labels = \"visible\") %>%   analyze(c(\"AGE\", \"BMRKR2\"), s_summary) %>%   build_table(ADSL_M_F_l) #                   A: Drug X      B: Placebo     C: Combination #                    (N=130)         (N=132)         (N=126)     # —————————————————————————————————————————————————————————————— # Female                                                         #   AGE                                                          #     n                79              77               66       #     Mean (sd)   32.76 (6.09)    34.12 (7.06)     35.20 (7.43)  #     IQR             9.00            8.00             6.75      #     min - max   21.00 - 47.00   23.00 - 58.00   21.00 - 64.00  #   BMRKR2                                                       #     LOW              26              21               26       #     MEDIUM           21              38               17       #     HIGH             32              18               23       # Male                                                           #   AGE                                                          #     n                51              55               60       #     Mean (sd)   35.57 (7.08)    37.44 (8.69)     35.38 (8.24)  #     IQR             11.00           9.00            11.00      #     min - max   23.00 - 50.00   21.00 - 62.00   20.00 - 69.00  #   BMRKR2                                                       #     LOW              21              23               11       #     MEDIUM           15              18               23       #     HIGH             15              14               26 basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_colcounts() %>%   split_rows_by(\"SEX\", labels_var = \"lbl_sex\", split_fun = drop_split_levels, child_labels = \"visible\") %>%   analyze(\"AGE\", s_summary, show_labels = \"visible\") %>%   analyze(\"BMRKR2\", s_summary, nested = FALSE,  show_labels = \"visible\") %>%   build_table(ADSL_M_F_l) #                   A: Drug X      B: Placebo     C: Combination #                    (N=130)         (N=132)         (N=126)     # —————————————————————————————————————————————————————————————— # Female                                                         #   AGE                                                          #     n                79              77               66       #     Mean (sd)   32.76 (6.09)    34.12 (7.06)     35.20 (7.43)  #     IQR             9.00            8.00             6.75      #     min - max   21.00 - 47.00   23.00 - 58.00   21.00 - 64.00  # Male                                                           #   AGE                                                          #     n                51              55               60       #     Mean (sd)   35.57 (7.08)    37.44 (8.69)     35.38 (8.24)  #     IQR             11.00           9.00            11.00      #     min - max   23.00 - 50.00   21.00 - 62.00   20.00 - 69.00  # BMRKR2                                                         #   LOW                47              44               37       #   MEDIUM             36              56               40       #   HIGH               47              32               49 insert_NAs <- function(x) {   x[sample(c(TRUE, FALSE), length(x), TRUE, prob = c(0.2, 0.8))] <- NA   x }  set.seed(1) ADSL_NA <- ADSL_M_F_l %>%   mutate(AGE = insert_NAs(AGE))  basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_colcounts() %>%   split_rows_by(\"SEX\", labels_var = \"lbl_sex\", split_fun = drop_split_levels, child_labels = \"visible\") %>%   analyze(\"AGE\", s_summary) %>%   analyze(\"BMRKR2\", s_summary, nested = FALSE,  show_labels = \"visible\") %>%   build_table(filter(ADSL_NA, SEX %in% c(\"M\", \"F\"))) #                 A: Drug X      B: Placebo     C: Combination #                  (N=130)         (N=132)         (N=126)     # ———————————————————————————————————————————————————————————— # Female                                                       #   n                65              61               54       #   Mean (sd)   32.71 (6.07)    34.33 (7.31)     34.61 (6.78)  #   IQR             9.00            10.00            6.75      #   min - max   21.00 - 47.00   23.00 - 58.00   21.00 - 54.00  # Male                                                         #   n                44              44               50       #   Mean (sd)   35.66 (6.78)    36.93 (8.18)     35.64 (8.42)  #   IQR             10.50           8.25            10.75      #   min - max   24.00 - 48.00   21.00 - 58.00   20.00 - 69.00  # BMRKR2                                                       #   LOW              47              44               37       #   MEDIUM           36              56               40       #   HIGH             47              32               49 basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_colcounts() %>%   split_rows_by(\"SEX\", labels_var = \"lbl_sex\", split_fun = drop_split_levels) %>%   summarize_row_groups()  %>%   analyze(\"AGE\", s_summary) %>%   analyze(\"BMRKR2\", afun = s_summary, nested = FALSE,  show_labels = \"visible\") %>%   build_table(filter(ADSL_NA, SEX %in% c(\"M\", \"F\"))) #                 A: Drug X      B: Placebo     C: Combination #                  (N=130)         (N=132)         (N=126)     # ———————————————————————————————————————————————————————————— # Female         79 (60.8%)      77 (58.3%)       66 (52.4%)   #   n                65              61               54       #   Mean (sd)   32.71 (6.07)    34.33 (7.31)     34.61 (6.78)  #   IQR             9.00            10.00            6.75      #   min - max   21.00 - 47.00   23.00 - 58.00   21.00 - 54.00  # Male           51 (39.2%)      55 (41.7%)       60 (47.6%)   #   n                44              44               50       #   Mean (sd)   35.66 (6.78)    36.93 (8.18)     35.64 (8.42)  #   IQR             10.50           8.25            10.75      #   min - max   24.00 - 48.00   21.00 - 58.00   20.00 - 69.00  # BMRKR2                                                       #   LOW              47              44               37       #   MEDIUM           36              56               40       #   HIGH             47              32               49 basic_table() %>%   split_cols_by(var = \"ARM\") %>%   add_colcounts() %>%   split_rows_by(\"SEX\", labels_var = \"lbl_sex\", split_fun = drop_split_levels) %>%   summarize_row_groups(cfun = function(df, labelstr, .N_col, ...) {     in_rows(       rcell(nrow(df) * c(1, 1 / .N_col), format = \"xx (xx.xx%)\"),       .labels = labelstr     )   })  %>%   analyze(\"AGE\", s_summary) %>%   analyze(\"BEP01FL\", afun = s_summary, nested = FALSE,  show_labels = \"visible\") %>%   build_table(filter(ADSL_NA, SEX %in% c(\"M\", \"F\"))) #                 A: Drug X      B: Placebo     C: Combination #                  (N=130)         (N=132)         (N=126)     # ———————————————————————————————————————————————————————————— # Female         79 (60.77%)     77 (58.33%)     66 (52.38%)   #   n                65              61               54       #   Mean (sd)   32.71 (6.07)    34.33 (7.31)     34.61 (6.78)  #   IQR             9.00            10.00            6.75      #   min - max   21.00 - 47.00   23.00 - 58.00   21.00 - 54.00  # Male           51 (39.23%)     55 (41.67%)     60 (47.62%)   #   n                44              44               50       #   Mean (sd)   35.66 (6.78)    36.93 (8.18)     35.64 (8.42)  #   IQR             10.50           8.25            10.75      #   min - max   24.00 - 48.00   21.00 - 58.00   20.00 - 69.00  # BEP01FL                                                      #   Y                67              63               65       #   N                63              69               61 basic_table() %>%   split_cols_by(var = \"ARM\") %>%   split_rows_by(\"SEX\", labels_var = \"lbl_sex\", split_fun = drop_split_levels, child_labels = \"hidden\") %>%   summarize_row_groups(cfun = function(df, labelstr, .N_col, ...) {     in_rows(        rcell(nrow(df) * c(1, 1 / .N_col), format = \"xx (xx.xx%)\"),        .labels = paste0(labelstr, \": count (perc.)\")     )   })  %>%   analyze(\"AGE\", s_summary) %>%   analyze(\"BEP01FL\", s_summary, nested = FALSE, show_labels = \"visible\") %>%   build_table(filter(ADSL_NA, SEX %in% c(\"M\", \"F\"))) #                           A: Drug X      B: Placebo     C: Combination # —————————————————————————————————————————————————————————————————————— # Female: count (perc.)    79 (60.77%)     77 (58.33%)     66 (52.38%)   #   n                          65              61               54       #   Mean (sd)             32.71 (6.07)    34.33 (7.31)     34.61 (6.78)  #   IQR                       9.00            10.00            6.75      #   min - max             21.00 - 47.00   23.00 - 58.00   21.00 - 54.00  # Male: count (perc.)      51 (39.23%)     55 (41.67%)     60 (47.62%)   #   n                          44              44               50       #   Mean (sd)             35.66 (6.78)    36.93 (8.18)     35.64 (8.42)  #   IQR                       10.50           8.25            10.75      #   min - max             24.00 - 48.00   21.00 - 58.00   20.00 - 69.00  # BEP01FL                                                                #   Y                          67              63               65       #   N                          63              69               61"},{"path":"https://roche.github.io/rtables/main/articles/clinical_trials.html","id":"using-layouts","dir":"Articles","previous_headings":"Demographic Table","what":"Using Layouts","title":"Example Clinical Trials Tables","text":"Layouts couple advantages tabulating tables directly: .e. separate analyses description actual data referencing variable names happens via strings (non-standard evaluation (NSE) needed, though arguably either feature shortcoming) layouts can reused example demonstrates reusability layouts: can now build table ADSL patients older 18:","code":"lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   analyze(c(\"AGE\", \"SEX\"), afun = s_summary)  lyt # A Pre-data Table Layout #  # Column-Split Structure: # ARM (lvls)  #  # Row-Split Structure: # AGE:SEX (** multivar analysis **) build_table(lyt, ADSL) #                        A: Drug X      B: Placebo     C: Combination #                         (N=134)         (N=134)         (N=132)     # ——————————————————————————————————————————————————————————————————— # AGE                                                                 #   n                       134             134             132       #   Mean (sd)          33.77 (6.55)    35.43 (7.90)     35.43 (7.72)  #   IQR                    11.00           10.00           10.00      #   min - max          21.00 - 50.00   21.00 - 62.00   20.00 - 69.00  # SEX                                                                 #   F                       79              77               66       #   M                       51              55               60       #   U                        3               2               4        #   UNDIFFERENTIATED         1               0               2 build_table(lyt, ADSL %>% filter(AGE > 18)) #                        A: Drug X      B: Placebo     C: Combination #                         (N=134)         (N=134)         (N=132)     # ——————————————————————————————————————————————————————————————————— # AGE                                                                 #   n                       134             134             132       #   Mean (sd)          33.77 (6.55)    35.43 (7.90)     35.43 (7.72)  #   IQR                    11.00           10.00           10.00      #   min - max          21.00 - 50.00   21.00 - 62.00   20.00 - 69.00  # SEX                                                                 #   F                       79              77               66       #   M                       51              55               60       #   U                        3               2               4        #   UNDIFFERENTIATED         1               0               2"},{"path":"https://roche.github.io/rtables/main/articles/clinical_trials.html","id":"adverse-events","dir":"Articles","previous_headings":"","what":"Adverse Events","title":"Example Clinical Trials Tables","text":"number different adverse event tables. now present two tables show adverse events ID grade ID. time won’t use ADAE dataset random.cdisc.data rather generate dataset fly (see Adrian’s 2016 Phuse paper):","code":"set.seed(1)  lookup <- tribble(   ~AEDECOD,                          ~AEBODSYS,                                         ~AETOXGR,   \"HEADACHE\",                        \"NERVOUS SYSTEM DISORDERS\",                        \"5\",   \"BACK PAIN\",                       \"MUSCULOSKELETAL AND CONNECTIVE TISSUE DISORDERS\", \"2\",   \"GINGIVAL BLEEDING\",               \"GASTROINTESTINAL DISORDERS\",                      \"1\",   \"HYPOTENSION\",                     \"VASCULAR DISORDERS\",                              \"3\",   \"FAECES SOFT\",                     \"GASTROINTESTINAL DISORDERS\",                      \"2\",   \"ABDOMINAL DISCOMFORT\",            \"GASTROINTESTINAL DISORDERS\",                      \"1\",   \"DIARRHEA\",                        \"GASTROINTESTINAL DISORDERS\",                      \"1\",   \"ABDOMINAL FULLNESS DUE TO GAS\",   \"GASTROINTESTINAL DISORDERS\",                      \"1\",   \"NAUSEA (INTERMITTENT)\",           \"GASTROINTESTINAL DISORDERS\",                      \"2\",   \"WEAKNESS\",                        \"MUSCULOSKELETAL AND CONNECTIVE TISSUE DISORDERS\", \"3\",   \"ORTHOSTATIC HYPOTENSION\",         \"VASCULAR DISORDERS\",                              \"4\" )  normalize <- function(x) x / sum(x) weightsA <- normalize(c(0.1, dlnorm(seq(0, 5, length.out = 25), meanlog = 3))) weightsB <- normalize(c(0.2, dlnorm(seq(0, 5, length.out = 25))))  N_pop <- 300 ADSL2 <- data.frame(   USUBJID = seq(1, N_pop, by = 1),   ARM = sample(c(\"ARM A\", \"ARM B\"), N_pop, TRUE),   SEX = sample(c(\"F\", \"M\"), N_pop, TRUE),   AGE = 20 + rbinom(N_pop, size = 40, prob = 0.7) )  l.adae <- mapply(ADSL2$USUBJID, ADSL2$ARM, ADSL2$SEX, ADSL2$AGE, FUN = function(id, arm, sex, age) {   n_ae <- sample(0:25, 1, prob = if (arm == \"ARM A\") weightsA else weightsB)   i <- sample(seq_len(nrow(lookup)), size = n_ae, replace = TRUE, prob = c(6, rep(1, 10)) / 16)   lookup[i, ] %>%     mutate(       AESEQ = seq_len(n()),       USUBJID = id, ARM = arm, SEX = sex, AGE = age     ) }, SIMPLIFY = FALSE)  ADAE2 <- do.call(rbind, l.adae) ADAE2 <- ADAE2 %>%   mutate(     ARM = factor(ARM, levels = c(\"ARM A\", \"ARM B\")),     AEDECOD = as.factor(AEDECOD),     AEBODSYS = as.factor(AEBODSYS),     AETOXGR = factor(AETOXGR, levels = as.character(1:5))   ) %>%   select(USUBJID, ARM, AGE, SEX, AESEQ, AEDECOD, AEBODSYS, AETOXGR)  ADAE2 # # A tibble: 3,118 × 8 #    USUBJID ARM     AGE SEX   AESEQ AEDECOD               AEBODSYS        AETOXGR #      <dbl> <fct> <dbl> <chr> <int> <fct>                 <fct>           <fct>   #  1       1 ARM A    45 F         1 NAUSEA (INTERMITTENT) GASTROINTESTIN… 2       #  2       1 ARM A    45 F         2 HEADACHE              NERVOUS SYSTEM… 5       #  3       1 ARM A    45 F         3 HEADACHE              NERVOUS SYSTEM… 5       #  4       1 ARM A    45 F         4 HEADACHE              NERVOUS SYSTEM… 5       #  5       1 ARM A    45 F         5 HEADACHE              NERVOUS SYSTEM… 5       #  6       1 ARM A    45 F         6 HEADACHE              NERVOUS SYSTEM… 5       #  7       1 ARM A    45 F         7 HEADACHE              NERVOUS SYSTEM… 5       #  8       1 ARM A    45 F         8 HEADACHE              NERVOUS SYSTEM… 5       #  9       1 ARM A    45 F         9 HEADACHE              NERVOUS SYSTEM… 5       # 10       1 ARM A    45 F        10 FAECES SOFT           GASTROINTESTIN… 2       # # … with 3,108 more rows"},{"path":"https://roche.github.io/rtables/main/articles/clinical_trials.html","id":"adverse-events-by-id","dir":"Articles","previous_headings":"Adverse Events","what":"Adverse Events By ID","title":"Example Clinical Trials Tables","text":"start defining events summary function: , population 5 patients one patient 2 AEs one patient 1 AE three patients AEs get following summary: .N_col argument special keyword argument build_table() passes population size respective column. list keyword arguments functions passed afun analyze() refer documentation ?analyze. now use s_events_patients summary function tabulation: Note column Ns wrong default set number rows per group (.e. number AEs per arm ). also affects percentages. table interested number patients per column/arm usually taken ADSL (var ADSL2 ). rtables handles allowing us override column counts computed. can specify alt_counts_df build_table(). , rtables calculates column counts applying column faceting alt_counts_df primary data tabulation: Alternatively, desired column counts already calculated, can specified directly via col_counts argument build_table(), though specifying alt_counts_df preferred mechanism. next calculate information per system organ class: now add count table AEDECOD AEBODSYS. default analyze() behavior factor create count table per level (using rtab_inner): indent_mod argument enables relative indenting changes tree structure table result desired indentation default. table far however usual adverse event table counts total number events number subjects one events particular term. get correct table need write custom analysis function: desired AE table : Note missing overall summary first two rows. can added initial analyze() call. Finally, wanted prune 0 count rows can trim_rows() function: Pruning larger topic separate rtables package vignette.","code":"s_events_patients <- function(x, labelstr, .N_col) {   in_rows(     \"Total number of patients with at least one event\" =       rcell(length(unique(x)) * c(1, 1 / .N_col), format = \"xx (xx.xx%)\"),      \"Total number of events\" = rcell(length(x), format = \"xx\")   ) } s_events_patients(x = c(\"id 1\", \"id 1\", \"id 2\"), .N_col = 5) # RowsVerticalSection (in_rows) object print method: # ---------------------------- #                                           row_name formatted_cell indent_mod # 1 Total number of patients with at least one event     2 (40.00%)          0 # 2                           Total number of events              3          0 #                                          row_label # 1 Total number of patients with at least one event # 2                           Total number of events adae_0_lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   analyze(\"USUBJID\", s_events_patients)  build_table(adae_0_lyt, ADAE2) #                                                       ARM A         ARM B     #                                                     (N=2060)       (N=1058)   # ————————————————————————————————————————————————————————————————————————————— # Total number of patients with at least one event   114 (5.53%)   150 (14.18%) # Total number of events                                2060           1058 build_table(adae_0_lyt, ADAE2, alt_counts_df = ADSL2) #                                                       ARM A          ARM B     #                                                      (N=146)        (N=154)    # —————————————————————————————————————————————————————————————————————————————— # Total number of patients with at least one event   114 (78.08%)   150 (97.40%) # Total number of events                                 2060           1058 l <- basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   analyze(\"USUBJID\", s_events_patients) %>%   split_rows_by(\"AEBODSYS\", child_labels = \"visible\", nested = FALSE)  %>%   summarize_row_groups(\"USUBJID\", cfun = s_events_patients) build_table(l, ADAE2, alt_counts_df = ADSL2) #                                                         ARM A          ARM B     #                                                        (N=146)        (N=154)    # ———————————————————————————————————————————————————————————————————————————————— # Total number of patients with at least one event     114 (78.08%)   150 (97.40%) # Total number of events                                   2060           1058     # GASTROINTESTINAL DISORDERS                                                       #   Total number of patients with at least one event   114 (78.08%)   130 (84.42%) #   Total number of events                                 760            374      # MUSCULOSKELETAL AND CONNECTIVE TISSUE DISORDERS                                  #   Total number of patients with at least one event   98 (67.12%)    81 (52.60%)  #   Total number of events                                 273            142      # NERVOUS SYSTEM DISORDERS                                                         #   Total number of patients with at least one event   113 (77.40%)   133 (86.36%) #   Total number of events                                 787            420      # VASCULAR DISORDERS                                                               #   Total number of patients with at least one event   93 (63.70%)    75 (48.70%)  #   Total number of events                                 240            122 tbl1 <- basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   split_rows_by(\"AEBODSYS\", child_labels = \"visible\", indent_mod = 1)  %>%   summarize_row_groups(\"USUBJID\", cfun = s_events_patients) %>%   analyze(\"AEDECOD\", indent_mod = -1) %>%   build_table(ADAE2, alt_counts_df = ADSL2)  tbl1 #                                                           ARM A          ARM B     #                                                          (N=146)        (N=154)    # —————————————————————————————————————————————————————————————————————————————————— #   GASTROINTESTINAL DISORDERS                                                       #     Total number of patients with at least one event   114 (78.08%)   130 (84.42%) #     Total number of events                                 760            374      #     ABDOMINAL DISCOMFORT                                   113             65      #     ABDOMINAL FULLNESS DUE TO GAS                          119             65      #     BACK PAIN                                               0              0       #     DIARRHEA                                               107             53      #     FAECES SOFT                                            122             58      #     GINGIVAL BLEEDING                                      147             71      #     HEADACHE                                                0              0       #     HYPOTENSION                                             0              0       #     NAUSEA (INTERMITTENT)                                  152             62      #     ORTHOSTATIC HYPOTENSION                                 0              0       #     WEAKNESS                                                0              0       #   MUSCULOSKELETAL AND CONNECTIVE TISSUE DISORDERS                                  #     Total number of patients with at least one event   98 (67.12%)    81 (52.60%)  #     Total number of events                                 273            142      #     ABDOMINAL DISCOMFORT                                    0              0       #     ABDOMINAL FULLNESS DUE TO GAS                           0              0       #     BACK PAIN                                              135             75      #     DIARRHEA                                                0              0       #     FAECES SOFT                                             0              0       #     GINGIVAL BLEEDING                                       0              0       #     HEADACHE                                                0              0       #     HYPOTENSION                                             0              0       #     NAUSEA (INTERMITTENT)                                   0              0       #     ORTHOSTATIC HYPOTENSION                                 0              0       #     WEAKNESS                                               138             67      #   NERVOUS SYSTEM DISORDERS                                                         #     Total number of patients with at least one event   113 (77.40%)   133 (86.36%) #     Total number of events                                 787            420      #     ABDOMINAL DISCOMFORT                                    0              0       #     ABDOMINAL FULLNESS DUE TO GAS                           0              0       #     BACK PAIN                                               0              0       #     DIARRHEA                                                0              0       #     FAECES SOFT                                             0              0       #     GINGIVAL BLEEDING                                       0              0       #     HEADACHE                                               787            420      #     HYPOTENSION                                             0              0       #     NAUSEA (INTERMITTENT)                                   0              0       #     ORTHOSTATIC HYPOTENSION                                 0              0       #     WEAKNESS                                                0              0       #   VASCULAR DISORDERS                                                               #     Total number of patients with at least one event   93 (63.70%)    75 (48.70%)  #     Total number of events                                 240            122      #     ABDOMINAL DISCOMFORT                                    0              0       #     ABDOMINAL FULLNESS DUE TO GAS                           0              0       #     BACK PAIN                                               0              0       #     DIARRHEA                                                0              0       #     FAECES SOFT                                             0              0       #     GINGIVAL BLEEDING                                       0              0       #     HEADACHE                                                0              0       #     HYPOTENSION                                            104             58      #     NAUSEA (INTERMITTENT)                                   0              0       #     ORTHOSTATIC HYPOTENSION                                136             64      #     WEAKNESS                                                0              0 table_count_once_per_id <- function(df, termvar = \"AEDECOD\", idvar = \"USUBJID\") {    x <- df[[termvar]]   id <- df[[idvar]]    counts <- table(x[!duplicated(id)])    in_rows(     .list = as.vector(counts),     .labels = names(counts)   ) }  table_count_once_per_id(ADAE2) # RowsVerticalSection (in_rows) object print method: # ---------------------------- #                         row_name formatted_cell indent_mod # 1           ABDOMINAL DISCOMFORT             23          0 # 2  ABDOMINAL FULLNESS DUE TO GAS             21          0 # 3                      BACK PAIN             20          0 # 4                       DIARRHEA              7          0 # 5                    FAECES SOFT             11          0 # 6              GINGIVAL BLEEDING             15          0 # 7                       HEADACHE            100          0 # 8                    HYPOTENSION             16          0 # 9          NAUSEA (INTERMITTENT)             21          0 # 10       ORTHOSTATIC HYPOTENSION             14          0 # 11                      WEAKNESS             16          0 #                        row_label # 1           ABDOMINAL DISCOMFORT # 2  ABDOMINAL FULLNESS DUE TO GAS # 3                      BACK PAIN # 4                       DIARRHEA # 5                    FAECES SOFT # 6              GINGIVAL BLEEDING # 7                       HEADACHE # 8                    HYPOTENSION # 9          NAUSEA (INTERMITTENT) # 10       ORTHOSTATIC HYPOTENSION # 11                      WEAKNESS basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   split_rows_by(\"AEBODSYS\", child_labels = \"visible\", indent_mod = 1)  %>%   summarize_row_groups(\"USUBJID\", cfun = s_events_patients) %>%   analyze(\"AEDECOD\", afun = table_count_once_per_id, show_labels = \"hidden\", indent_mod = -1) %>%   build_table(ADAE2, alt_counts_df = ADSL2) #                                                           ARM A          ARM B     #                                                          (N=146)        (N=154)    # —————————————————————————————————————————————————————————————————————————————————— #   GASTROINTESTINAL DISORDERS                                                       #     Total number of patients with at least one event   114 (78.08%)   130 (84.42%) #     Total number of events                                 760            374      #     ABDOMINAL DISCOMFORT                                    24             28      #     ABDOMINAL FULLNESS DUE TO GAS                           18             26      #     BACK PAIN                                               0              0       #     DIARRHEA                                                17             17      #     FAECES SOFT                                             17             14      #     GINGIVAL BLEEDING                                       18             25      #     HEADACHE                                                0              0       #     HYPOTENSION                                             0              0       #     NAUSEA (INTERMITTENT)                                   20             20      #     ORTHOSTATIC HYPOTENSION                                 0              0       #     WEAKNESS                                                0              0       #   MUSCULOSKELETAL AND CONNECTIVE TISSUE DISORDERS                                  #     Total number of patients with at least one event   98 (67.12%)    81 (52.60%)  #     Total number of events                                 273            142      #     ABDOMINAL DISCOMFORT                                    0              0       #     ABDOMINAL FULLNESS DUE TO GAS                           0              0       #     BACK PAIN                                               58             45      #     DIARRHEA                                                0              0       #     FAECES SOFT                                             0              0       #     GINGIVAL BLEEDING                                       0              0       #     HEADACHE                                                0              0       #     HYPOTENSION                                             0              0       #     NAUSEA (INTERMITTENT)                                   0              0       #     ORTHOSTATIC HYPOTENSION                                 0              0       #     WEAKNESS                                                40             36      #   NERVOUS SYSTEM DISORDERS                                                         #     Total number of patients with at least one event   113 (77.40%)   133 (86.36%) #     Total number of events                                 787            420      #     ABDOMINAL DISCOMFORT                                    0              0       #     ABDOMINAL FULLNESS DUE TO GAS                           0              0       #     BACK PAIN                                               0              0       #     DIARRHEA                                                0              0       #     FAECES SOFT                                             0              0       #     GINGIVAL BLEEDING                                       0              0       #     HEADACHE                                               113            133      #     HYPOTENSION                                             0              0       #     NAUSEA (INTERMITTENT)                                   0              0       #     ORTHOSTATIC HYPOTENSION                                 0              0       #     WEAKNESS                                                0              0       #   VASCULAR DISORDERS                                                               #     Total number of patients with at least one event   93 (63.70%)    75 (48.70%)  #     Total number of events                                 240            122      #     ABDOMINAL DISCOMFORT                                    0              0       #     ABDOMINAL FULLNESS DUE TO GAS                           0              0       #     BACK PAIN                                               0              0       #     DIARRHEA                                                0              0       #     FAECES SOFT                                             0              0       #     GINGIVAL BLEEDING                                       0              0       #     HEADACHE                                                0              0       #     HYPOTENSION                                             44             31      #     NAUSEA (INTERMITTENT)                                   0              0       #     ORTHOSTATIC HYPOTENSION                                 49             44      #     WEAKNESS                                                0              0 tbl <- basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   analyze(\"USUBJID\", afun = s_events_patients) %>%   split_rows_by(\"AEBODSYS\", child_labels = \"visible\", indent_mod = 1, section_div = \"\")  %>%   summarize_row_groups(\"USUBJID\", cfun = s_events_patients) %>%   analyze(\"AEDECOD\", table_count_once_per_id, show_labels = \"hidden\", indent_mod = -1) %>%   build_table(ADAE2, alt_counts_df = ADSL2)  tbl #                                                           ARM A          ARM B     #                                                          (N=146)        (N=154)    # —————————————————————————————————————————————————————————————————————————————————— # Total number of patients with at least one event       114 (78.08%)   150 (97.40%) # Total number of events                                     2060           1058     #   GASTROINTESTINAL DISORDERS                                                       #     Total number of patients with at least one event   114 (78.08%)   130 (84.42%) #     Total number of events                                 760            374      #     ABDOMINAL DISCOMFORT                                    24             28      #     ABDOMINAL FULLNESS DUE TO GAS                           18             26      #     BACK PAIN                                               0              0       #     DIARRHEA                                                17             17      #     FAECES SOFT                                             17             14      #     GINGIVAL BLEEDING                                       18             25      #     HEADACHE                                                0              0       #     HYPOTENSION                                             0              0       #     NAUSEA (INTERMITTENT)                                   20             20      #     ORTHOSTATIC HYPOTENSION                                 0              0       #     WEAKNESS                                                0              0       #  #   MUSCULOSKELETAL AND CONNECTIVE TISSUE DISORDERS                                  #     Total number of patients with at least one event   98 (67.12%)    81 (52.60%)  #     Total number of events                                 273            142      #     ABDOMINAL DISCOMFORT                                    0              0       #     ABDOMINAL FULLNESS DUE TO GAS                           0              0       #     BACK PAIN                                               58             45      #     DIARRHEA                                                0              0       #     FAECES SOFT                                             0              0       #     GINGIVAL BLEEDING                                       0              0       #     HEADACHE                                                0              0       #     HYPOTENSION                                             0              0       #     NAUSEA (INTERMITTENT)                                   0              0       #     ORTHOSTATIC HYPOTENSION                                 0              0       #     WEAKNESS                                                40             36      #  #   NERVOUS SYSTEM DISORDERS                                                         #     Total number of patients with at least one event   113 (77.40%)   133 (86.36%) #     Total number of events                                 787            420      #     ABDOMINAL DISCOMFORT                                    0              0       #     ABDOMINAL FULLNESS DUE TO GAS                           0              0       #     BACK PAIN                                               0              0       #     DIARRHEA                                                0              0       #     FAECES SOFT                                             0              0       #     GINGIVAL BLEEDING                                       0              0       #     HEADACHE                                               113            133      #     HYPOTENSION                                             0              0       #     NAUSEA (INTERMITTENT)                                   0              0       #     ORTHOSTATIC HYPOTENSION                                 0              0       #     WEAKNESS                                                0              0       #  #   VASCULAR DISORDERS                                                               #     Total number of patients with at least one event   93 (63.70%)    75 (48.70%)  #     Total number of events                                 240            122      #     ABDOMINAL DISCOMFORT                                    0              0       #     ABDOMINAL FULLNESS DUE TO GAS                           0              0       #     BACK PAIN                                               0              0       #     DIARRHEA                                                0              0       #     FAECES SOFT                                             0              0       #     GINGIVAL BLEEDING                                       0              0       #     HEADACHE                                                0              0       #     HYPOTENSION                                             44             31      #     NAUSEA (INTERMITTENT)                                   0              0       #     ORTHOSTATIC HYPOTENSION                                 49             44      #     WEAKNESS                                                0              0 trim_rows(tbl) #                                                           ARM A          ARM B     #                                                          (N=146)        (N=154)    # —————————————————————————————————————————————————————————————————————————————————— # Total number of patients with at least one event       114 (78.08%)   150 (97.40%) # Total number of events                                     2060           1058     #   GASTROINTESTINAL DISORDERS                                                       #     Total number of patients with at least one event   114 (78.08%)   130 (84.42%) #     Total number of events                                 760            374      #     ABDOMINAL DISCOMFORT                                    24             28      #     ABDOMINAL FULLNESS DUE TO GAS                           18             26      #     DIARRHEA                                                17             17      #     FAECES SOFT                                             17             14      #     GINGIVAL BLEEDING                                       18             25      #     NAUSEA (INTERMITTENT)                                   20             20      #  #   MUSCULOSKELETAL AND CONNECTIVE TISSUE DISORDERS                                  #     Total number of patients with at least one event   98 (67.12%)    81 (52.60%)  #     Total number of events                                 273            142      #     BACK PAIN                                               58             45      #     WEAKNESS                                                40             36      #  #   NERVOUS SYSTEM DISORDERS                                                         #     Total number of patients with at least one event   113 (77.40%)   133 (86.36%) #     Total number of events                                 787            420      #     HEADACHE                                               113            133      #  #   VASCULAR DISORDERS                                                               #     Total number of patients with at least one event   93 (63.70%)    75 (48.70%)  #     Total number of events                                 240            122      #     HYPOTENSION                                             44             31      #     ORTHOSTATIC HYPOTENSION                                 49             44"},{"path":"https://roche.github.io/rtables/main/articles/clinical_trials.html","id":"adverse-events-by-id-and-by-grade","dir":"Articles","previous_headings":"Adverse Events","what":"Adverse Events By ID and By Grade","title":"Example Clinical Trials Tables","text":"adverse events table ID grade shows many patients least one adverse event per grade different subsets data (e.g. defined system organ class). table show zero count grades. Note add “overall” groups custom split function. layouting concepts needed create table already introduced far:","code":"table_count_grade_once_per_id <- function(df,                                           labelstr = \"\",                                           gradevar = \"AETOXGR\",                                           idvar = \"USUBJID\",                                           grade_levels = NULL) {   id <- df[[idvar]]   grade <- df[[gradevar]]    if (!is.null(grade_levels)) {     stopifnot(all(grade %in% grade_levels))     grade <- factor(grade, levels = grade_levels)   }    id_sel <- !duplicated(id)    in_rows(       \"--Any Grade--\" = sum(id_sel),       .list =  as.list(table(grade[id_sel]))     ) }  table_count_grade_once_per_id(ex_adae, grade_levels = 1:5) # RowsVerticalSection (in_rows) object print method: # ---------------------------- #        row_name formatted_cell indent_mod     row_label # 1 --Any Grade--            365          0 --Any Grade-- # 2             1            131          0             1 # 3             2             70          0             2 # 4             3             74          0             3 # 5             4             25          0             4 # 6             5             65          0             5 basic_table() %>%   split_cols_by(\"ARM\") %>%   add_colcounts() %>%   analyze(\"AETOXGR\",           afun = table_count_grade_once_per_id,           extra_args = list(grade_levels = 1:5),           var_labels = \"- Any adverse events -\", show_labels = \"visible\") %>%   split_rows_by(\"AEBODSYS\", child_labels = \"visible\", indent_mod = 1) %>%   summarize_row_groups(cfun = table_count_grade_once_per_id, format = \"xx\", indent_mod = 1) %>%   split_rows_by(\"AEDECOD\", child_labels = \"visible\", indent_mod = -2)  %>%   analyze(\"AETOXGR\",           afun = table_count_grade_once_per_id,           extra_args = list(grade_levels = 1:5), show_labels = \"hidden\") %>%   build_table(ADAE2, alt_counts_df = ADSL2) #                                                      ARM A     ARM B  #                                                     (N=146)   (N=154) # ————————————————————————————————————————————————————————————————————— # - Any adverse events -                                                #   --Any Grade--                                       114       150   #   1                                                   32        34    #   2                                                   22        30    #   3                                                   11        21    #   4                                                    8         6    #   5                                                   41        59    #   GASTROINTESTINAL DISORDERS                                          #         --Any Grade--                                 114       130   #         1                                             77        96    #         2                                             37        34    #         3                                              0         0    #         4                                              0         0    #         5                                              0         0    #     ABDOMINAL DISCOMFORT                                              #       --Any Grade--                                   68        49    #       1                                               68        49    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     ABDOMINAL FULLNESS DUE TO GAS                                     #       --Any Grade--                                   73        51    #       1                                               73        51    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     BACK PAIN                                                         #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     DIARRHEA                                                          #       --Any Grade--                                   68        40    #       1                                               68        40    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     FAECES SOFT                                                       #       --Any Grade--                                   76        44    #       1                                                0         0    #       2                                               76        44    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     GINGIVAL BLEEDING                                                 #       --Any Grade--                                   80        52    #       1                                               80        52    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     HEADACHE                                                          #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     HYPOTENSION                                                       #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     NAUSEA (INTERMITTENT)                                             #       --Any Grade--                                   83        50    #       1                                                0         0    #       2                                               83        50    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     ORTHOSTATIC HYPOTENSION                                           #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     WEAKNESS                                                          #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #   MUSCULOSKELETAL AND CONNECTIVE TISSUE DISORDERS                     #         --Any Grade--                                 98        81    #         1                                              0         0    #         2                                             58        45    #         3                                             40        36    #         4                                              0         0    #         5                                              0         0    #     ABDOMINAL DISCOMFORT                                              #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     ABDOMINAL FULLNESS DUE TO GAS                                     #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     BACK PAIN                                                         #       --Any Grade--                                   79        62    #       1                                                0         0    #       2                                               79        62    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     DIARRHEA                                                          #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     FAECES SOFT                                                       #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     GINGIVAL BLEEDING                                                 #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     HEADACHE                                                          #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     HYPOTENSION                                                       #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     NAUSEA (INTERMITTENT)                                             #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     ORTHOSTATIC HYPOTENSION                                           #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     WEAKNESS                                                          #       --Any Grade--                                   73        43    #       1                                                0         0    #       2                                                0         0    #       3                                               73        43    #       4                                                0         0    #       5                                                0         0    #   NERVOUS SYSTEM DISORDERS                                            #         --Any Grade--                                 113       133   #         1                                              0         0    #         2                                              0         0    #         3                                              0         0    #         4                                              0         0    #         5                                             113       133   #     ABDOMINAL DISCOMFORT                                              #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     ABDOMINAL FULLNESS DUE TO GAS                                     #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     BACK PAIN                                                         #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     DIARRHEA                                                          #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     FAECES SOFT                                                       #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     GINGIVAL BLEEDING                                                 #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     HEADACHE                                                          #       --Any Grade--                                   113       133   #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                               113       133   #     HYPOTENSION                                                       #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     NAUSEA (INTERMITTENT)                                             #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     ORTHOSTATIC HYPOTENSION                                           #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     WEAKNESS                                                          #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #   VASCULAR DISORDERS                                                  #         --Any Grade--                                 93        75    #         1                                              0         0    #         2                                              0         0    #         3                                             44        31    #         4                                             49        44    #         5                                              0         0    #     ABDOMINAL DISCOMFORT                                              #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     ABDOMINAL FULLNESS DUE TO GAS                                     #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     BACK PAIN                                                         #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     DIARRHEA                                                          #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     FAECES SOFT                                                       #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     GINGIVAL BLEEDING                                                 #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     HEADACHE                                                          #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     HYPOTENSION                                                       #       --Any Grade--                                   66        43    #       1                                                0         0    #       2                                                0         0    #       3                                               66        43    #       4                                                0         0    #       5                                                0         0    #     NAUSEA (INTERMITTENT)                                             #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0    #     ORTHOSTATIC HYPOTENSION                                           #       --Any Grade--                                   70        54    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                               70        54    #       5                                                0         0    #     WEAKNESS                                                          #       --Any Grade--                                    0         0    #       1                                                0         0    #       2                                                0         0    #       3                                                0         0    #       4                                                0         0    #       5                                                0         0"},{"path":"https://roche.github.io/rtables/main/articles/clinical_trials.html","id":"response-table","dir":"Articles","previous_headings":"","what":"Response Table","title":"Example Clinical Trials Tables","text":"response table create composed 3 parts: Binary response table Unstratified analysis comparison vs. control group Multinomial response table Let’s start first part fairly simple derive: Note set ref_group argument split_cols_by() current table effect use cell data responder non-responder counts. ref_group argument needed part 2 3 table. now look implementation part 2: unstratified analysis comparison vs. control group. Let’s start analysis function: Hence can now add next vignette table: Next add part 3: multinomial response table. , adding row-split response level, thing binary response table . can now create final response table three parts: case wanted rename levels AVALC remove CI NE follows: Note table missing rows gaps make readable. row spacing feature rtables roadmap implemented future.","code":"ADRS_BESRSPI <- ex_adrs %>%   filter(PARAMCD == \"BESRSPI\") %>%   mutate(     rsp = factor(AVALC %in% c(\"CR\", \"PR\"), levels = c(TRUE, FALSE), labels = c(\"Responders\", \"Non-Responders\")),     is_rsp = (rsp == \"Responders\")   )  s_proportion <- function(x, .N_col) {    in_rows(.list = lapply(as.list(table(x)), function(xi) rcell(xi * c(1, 1 / .N_col), format = \"xx.xx (xx.xx%)\"))) }  basic_table() %>%   split_cols_by(\"ARMCD\", ref_group = \"ARM A\") %>%   add_colcounts() %>%   analyze(\"rsp\", s_proportion, show_labels = \"hidden\") %>%   build_table(ADRS_BESRSPI) #                       ARM A            ARM B             ARM C      #                      (N=134)          (N=134)           (N=132)     # ——————————————————————————————————————————————————————————————————— # Responders       114.00 (85.07%)   90.00 (67.16%)   120.00 (90.91%) # Non-Responders   20.00 (14.93%)    44.00 (32.84%)    12.00 (9.09%) s_unstrat_resp <- function(x, .ref_group, .in_ref_col) {    if (.in_ref_col) {     return(in_rows(         \"Difference in Response Rates (%)\" = rcell(numeric(0)),         \"95% CI (Wald, with correction)\" = rcell(numeric(0)),         \"p-value (Chi-Squared Test)\" = rcell(numeric(0)),         \"Odds Ratio (95% CI)\" = rcell(numeric(0))     ))   }    fit <- stats::prop.test(     x = c(sum(x), sum(.ref_group)),     n = c(length(x), length(.ref_group)),     correct = FALSE   )    fit_glm <- stats::glm(     formula = rsp ~ group,     data = data.frame(       rsp = c(.ref_group, x),       group = factor(rep(c(\"ref\", \"x\"), times = c(length(.ref_group), length(x))), levels = c(\"ref\", \"x\"))     ),     family = binomial(link = \"logit\")   )    in_rows(       \"Difference in Response Rates (%)\" = non_ref_rcell((mean(x) - mean(.ref_group)) * 100,                                                          .in_ref_col, format = \"xx.xx\") ,       \"95% CI (Wald, with correction)\" = non_ref_rcell(fit$conf.int * 100,                                                        .in_ref_col, format = \"(xx.xx, xx.xx)\"),       \"p-value (Chi-Squared Test)\" = non_ref_rcell(fit$p.value,                                                    .in_ref_col, format = \"x.xxxx | (<0.0001)\"),       \"Odds Ratio (95% CI)\" = non_ref_rcell(c(           exp(stats::coef(fit_glm)[-1]),           exp(stats::confint.default(fit_glm, level = .95)[-1, , drop = FALSE])       ),       .in_ref_col, format = \"xx.xx (xx.xx - xx.xx)\")   ) }  s_unstrat_resp(   x = ADRS_BESRSPI %>% filter(ARM == \"A: Drug X\") %>% pull(is_rsp),   .ref_group = ADRS_BESRSPI %>% filter(ARM == \"B: Placebo\") %>% pull(is_rsp),   .in_ref_col = FALSE ) # RowsVerticalSection (in_rows) object print method: # ---------------------------- #                           row_name     formatted_cell indent_mod # 1 Difference in Response Rates (%)              17.91          0 # 2   95% CI (Wald, with correction)      (7.93, 27.89)          0 # 3       p-value (Chi-Squared Test)             0.0006          0 # 4              Odds Ratio (95% CI) 2.79 (1.53 - 5.06)          0 #                          row_label # 1 Difference in Response Rates (%) # 2   95% CI (Wald, with correction) # 3       p-value (Chi-Squared Test) # 4              Odds Ratio (95% CI) basic_table() %>%   split_cols_by(\"ARMCD\", ref_group = \"ARM A\") %>%   add_colcounts() %>%   analyze(\"rsp\", s_proportion, show_labels = \"hidden\") %>%   analyze(\"is_rsp\", s_unstrat_resp, show_labels = \"visible\",           var_labels = \"Unstratified Response Analysis\") %>%   build_table(ADRS_BESRSPI) #                                           ARM A              ARM B                ARM C        #                                          (N=134)            (N=134)              (N=132)       # —————————————————————————————————————————————————————————————————————————————————————————————— # Responders                           114.00 (85.07%)     90.00 (67.16%)      120.00 (90.91%)   # Non-Responders                       20.00 (14.93%)      44.00 (32.84%)       12.00 (9.09%)    # Unstratified Response Analysis                                                                 #   Difference in Response Rates (%)                           -17.91                5.83        #   95% CI (Wald, with correction)                        (-27.89, -7.93)       (-1.94, 13.61)   #   p-value (Chi-Squared Test)                                 0.0006               0.1436       #   Odds Ratio (95% CI)                                  0.36 (0.20 - 0.65)   1.75 (0.82 - 3.75) s_prop <- function(df, .N_col) {   in_rows(     \"95% CI (Wald, with correction)\" = rcell(binom.test(nrow(df), .N_col)$conf.int * 100, format = \"(xx.xx, xx.xx)\")   ) }  s_prop(   df = ADRS_BESRSPI %>% filter(ARM == \"A: Drug X\", AVALC == \"CR\"),   .N_col = sum(ADRS_BESRSPI$ARM == \"A: Drug X\") ) # RowsVerticalSection (in_rows) object print method: # ---------------------------- #                         row_name formatted_cell indent_mod # 1 95% CI (Wald, with correction) (49.38, 66.67)          0 #                        row_label # 1 95% CI (Wald, with correction) basic_table() %>%   split_cols_by(\"ARMCD\", ref_group = \"ARM A\") %>%   add_colcounts() %>%   analyze(\"rsp\", s_proportion, show_labels = \"hidden\") %>%   analyze(\"is_rsp\", s_unstrat_resp,           show_labels = \"visible\", var_labels = \"Unstratified Response Analysis\") %>%   split_rows_by(     var = \"AVALC\",     split_fun = reorder_split_levels(neworder = c(\"CR\", \"PR\", \"SD\", \"NON CR/PD\", \"PD\", \"NE\"), drlevels = TRUE),     nested = FALSE   ) %>%   summarize_row_groups() %>%   analyze(\"AVALC\", afun = s_prop) %>%   build_table(ADRS_BESRSPI) #                                           ARM A              ARM B                ARM C        #                                          (N=134)            (N=134)              (N=132)       # —————————————————————————————————————————————————————————————————————————————————————————————— # Responders                           114.00 (85.07%)     90.00 (67.16%)      120.00 (90.91%)   # Non-Responders                       20.00 (14.93%)      44.00 (32.84%)       12.00 (9.09%)    # Unstratified Response Analysis                                                                 #   Difference in Response Rates (%)                           -17.91                5.83        #   95% CI (Wald, with correction)                        (-27.89, -7.93)       (-1.94, 13.61)   #   p-value (Chi-Squared Test)                                 0.0006               0.1436       #   Odds Ratio (95% CI)                                  0.36 (0.20 - 0.65)   1.75 (0.82 - 3.75) # CR                                     78 (58.2%)          55 (41.0%)           97 (73.5%)     #   95% CI (Wald, with correction)     (49.38, 66.67)      (32.63, 49.87)       (65.10, 80.79)   # PR                                     36 (26.9%)          35 (26.1%)           23 (17.4%)     #   95% CI (Wald, with correction)     (19.58, 35.20)      (18.92, 34.41)       (11.38, 24.99)   # SD                                     20 (14.9%)          44 (32.8%)           12 (9.1%)      #   95% CI (Wald, with correction)      (9.36, 22.11)      (24.97, 41.47)       (4.79, 15.34) rsp_label <- function(x) {   rsp_full_label <- c(     CR          = \"Complete Response (CR)\",     PR          = \"Partial Response (PR)\",     SD          = \"Stable Disease (SD)\",     `NON CR/PD` = \"Non-CR or Non-PD (NON CR/PD)\",     PD          = \"Progressive Disease (PD)\",     NE          = \"Not Evaluable (NE)\",     Missing     = \"Missing\",     `NE/Missing` = \"Missing or unevaluable\"   )   stopifnot(all(x %in% names(rsp_full_label)))   rsp_full_label[x] }   tbl <- basic_table() %>%   split_cols_by(\"ARMCD\", ref_group = \"ARM A\") %>%   add_colcounts() %>%   analyze(\"rsp\", s_proportion, show_labels = \"hidden\") %>%   analyze(\"is_rsp\", s_unstrat_resp,           show_labels = \"visible\", var_labels = \"Unstratified Response Analysis\") %>%   split_rows_by(     var = \"AVALC\",     split_fun = keep_split_levels(c(\"CR\", \"PR\", \"SD\", \"PD\"), reorder = TRUE),     nested = FALSE   ) %>%   summarize_row_groups(cfun = function(df, labelstr, .N_col) {     in_rows(nrow(df) * c(1, 1 / .N_col), .formats = \"xx (xx.xx%)\", .labels = rsp_label(labelstr))   }) %>%   analyze(\"AVALC\", afun = s_prop) %>%   analyze(\"AVALC\", afun = function(x, .N_col) {     in_rows(rcell(sum(x == \"NE\") * c(1, 1 / .N_col), format = \"xx.xx (xx.xx%)\"), .labels = rsp_label(\"NE\"))   }, nested = FALSE) %>%   build_table(ADRS_BESRSPI)  tbl #                                           ARM A              ARM B                ARM C        #                                          (N=134)            (N=134)              (N=132)       # —————————————————————————————————————————————————————————————————————————————————————————————— # Responders                           114.00 (85.07%)     90.00 (67.16%)      120.00 (90.91%)   # Non-Responders                       20.00 (14.93%)      44.00 (32.84%)       12.00 (9.09%)    # Unstratified Response Analysis                                                                 #   Difference in Response Rates (%)                           -17.91                5.83        #   95% CI (Wald, with correction)                        (-27.89, -7.93)       (-1.94, 13.61)   #   p-value (Chi-Squared Test)                                 0.0006               0.1436       #   Odds Ratio (95% CI)                                  0.36 (0.20 - 0.65)   1.75 (0.82 - 3.75) # Complete Response (CR)                 78 (58.21%)        55 (41.04%)          97 (73.48%)     #   95% CI (Wald, with correction)     (49.38, 66.67)      (32.63, 49.87)       (65.10, 80.79)   # Partial Response (PR)                  36 (26.87%)        35 (26.12%)          23 (17.42%)     #   95% CI (Wald, with correction)     (19.58, 35.20)      (18.92, 34.41)       (11.38, 24.99)   # Stable Disease (SD)                    20 (14.93%)        44 (32.84%)           12 (9.09%)     #   95% CI (Wald, with correction)      (9.36, 22.11)      (24.97, 41.47)       (4.79, 15.34)    # Progressive Disease (PD)                0 (0.00%)          0 (0.00%)            0 (0.00%)      #   95% CI (Wald, with correction)      (0.00, 2.72)        (0.00, 2.72)         (0.00, 2.76)    # Not Evaluable (NE)                    0.00 (0.00%)        0.00 (0.00%)         0.00 (0.00%)"},{"path":"https://roche.github.io/rtables/main/articles/custom_appearance.html","id":"customizing-appearance","dir":"Articles","previous_headings":"","what":"Customizing Appearance","title":"Customizing Appearance","text":"vignette, want describe various ways can modify customize appearance rtables. Loading package:","code":"library(rtables)"},{"path":"https://roche.github.io/rtables/main/articles/custom_appearance.html","id":"rows-and-cell-values-alignments","dir":"Articles","previous_headings":"Customizing Appearance","what":"Rows and cell values alignments","title":"Customizing Appearance","text":"possible align content assigning \"left\", \"center\" (default), \"right\" .aligns align arguments in_rows() rcell(), respectively. Please consider using ?in_rows ?rcell clarifications two arguments, use rtables_aligns() see available alignment options. following show two simplified examples use align .aligns, respectively. concepts can well applied clinical table shown following, complex, example.","code":"# In rcell we use align. lyt <- basic_table() %>%     analyze(\"AGE\", function(x) {         in_rows(left = rcell(\"l\", align = \"left\"),                 right = rcell(\"r\", align = \"right\"),                 center = rcell(\"c\", align = \"center\"))     })  build_table(lyt, DM) #          all obs # ———————————————— # left     l       # right          r # center      c # In in_rows, we use .aligns. This can either set the general value or the #   single values (see NB). lyt2 <- basic_table() %>%     analyze(\"AGE\", function(x) {         in_rows(left = rcell(\"l\"),                 right = rcell(\"r\"),                 center = rcell(\"c\"),                 .aligns = c(\"right\")) # NB: .aligns = c(\"right\", \"left\", \"center\")     })  build_table(lyt2, DM) #          all obs # ———————————————— # left           l # right          r # center         c basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"SEX\") %>%   analyze(c(\"AGE\", \"STRATA1\"), function(x) {     if (is.numeric(x)) {       in_rows(         \"mean\" = rcell(mean(x)),         \"sd\" = rcell(sd(x)),         .formats = c(\"xx.x\"), .aligns = \"left\"       )     } else if (is.factor(x)) {       rcell(length(unique(x)), align = \"right\")     } else {       stop(\"Unsupported type\")     }   }, show_labels = \"visible\", na_str = \"NE\") %>%   build_table(ex_adsl) #                    A: Drug X   B: Placebo   C: Combination # —————————————————————————————————————————————————————————— # F                                                          #   AGE                                                      #     mean           32.8        34.1         35.2           #     sd             6.1         7.1          7.4            #   STRATA1                                                  #     STRATA1                3            3                3 # M                                                          #   AGE                                                      #     mean           35.6        37.4         35.4           #     sd             7.1         8.7          8.2            #   STRATA1                                                  #     STRATA1                3            3                3 # U                                                          #   AGE                                                      #     mean           31.7        31.0         35.2           #     sd             3.2         5.7          3.1            #   STRATA1                                                  #     STRATA1                3            2                3 # UNDIFFERENTIATED                                           #   AGE                                                      #     mean           28.0        NE           45.0           #     sd             NE          NE           1.4            #   STRATA1                                                  #     STRATA1                1            0                2"},{"path":"https://roche.github.io/rtables/main/articles/introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to rtables","text":"rtables R package provides framework create, tabulate output tables R. design requirements rtables origin studying tables commonly used report analyses clinical trials; however, careful keep rtables general purpose toolkit. number table frameworks available R gt RStudio, xtable, tableone, tables name . number reasons implement rtables (yet another tables R package): output tables ASCII text files rtables two powerful tabulation frameworks: rtabulate layouting based tabulation framework table view (ASCII, HTML, etc.) separate data model. Hence, one always access non-rounded/non-formatted numbers. pagination horizontal vertical directions meet health authority submission requirements cell, row, column, table reference system titles, footers, referential footnotes path based access cell content useful automated content generation remainder vignette, give short introduction rtables tabulating table. content based useR 2020 presentation Gabriel Becker. packages used vignette rtables dplyr:","code":"library(rtables) library(dplyr)"},{"path":"https://roche.github.io/rtables/main/articles/introduction.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Introduction to rtables","text":"data used vignette made using random number generators. data content relatively simple: one row per imaginary person one column per measurement: study arm, country origin, gender, handedness, age, weight. Note use factors variables level order represented row column order tabulate information df .","code":"n <- 400  set.seed(1)  df <- tibble(   arm = factor(sample(c(\"Arm A\", \"Arm B\"), n, replace = TRUE), levels = c(\"Arm A\", \"Arm B\")),   country = factor(sample(c(\"CAN\", \"USA\"), n, replace = TRUE, prob = c(.55, .45)), levels = c(\"CAN\", \"USA\")),   gender = factor(sample(c(\"Female\", \"Male\"), n, replace = TRUE), levels = c(\"Female\", \"Male\")),   handed = factor(sample(c(\"Left\", \"Right\"), n, prob = c(.6, .4), replace = TRUE), levels = c(\"Left\", \"Right\")),   age = rchisq(n, 30) + 10 ) %>% mutate(   weight = 35 * rnorm(n, sd = .5) + ifelse(gender == \"Female\", 140, 180) )  head(df) # # A tibble: 6 × 6 #   arm   country gender handed   age weight #   <fct> <fct>   <fct>  <fct>  <dbl>  <dbl> # 1 Arm A USA     Female Left    31.3   139. # 2 Arm B CAN     Female Right   50.5   116. # 3 Arm A USA     Male   Right   32.4   186. # 4 Arm A USA     Male   Right   34.6   169. # 5 Arm B USA     Female Right   43.0   160. # 6 Arm A USA     Female Right   43.2   126."},{"path":"https://roche.github.io/rtables/main/articles/introduction.html","id":"building-an-table","dir":"Articles","previous_headings":"","what":"Building an Table","title":"Introduction to rtables","text":"aim vignette build following table step step:","code":"#                     Arm A                     Arm B          #              Female        Male        Female        Male    #              (N=96)      (N=105)       (N=92)      (N=107)   # ———————————————————————————————————————————————————————————— # CAN        45 (46.9%)   64 (61.0%)   46 (50.0%)   62 (57.9%) #   Left     32 (33.3%)   42 (40.0%)   26 (28.3%)   37 (34.6%) #     mean      38.9         40.4         40.3         37.7    #   Right    13 (13.5%)   22 (21.0%)   20 (21.7%)   25 (23.4%) #     mean      36.6         40.2         40.2         40.6    # USA        51 (53.1%)   41 (39.0%)   46 (50.0%)   45 (42.1%) #   Left     34 (35.4%)   19 (18.1%)   25 (27.2%)   25 (23.4%) #     mean      40.4         39.7         39.2         40.1    #   Right    17 (17.7%)   22 (21.0%)   21 (22.8%)   20 (18.7%) #     mean      36.9         39.8         38.5         39.0"},{"path":"https://roche.github.io/rtables/main/articles/introduction.html","id":"starting-simple","dir":"Articles","previous_headings":"","what":"Starting Simple","title":"Introduction to rtables","text":"rtables basic table defined 0 rows one column representing data. Analyzing variable one way adding row:","code":"l <- basic_table() %>%   analyze(\"age\", mean, format = \"xx.x\")  build_table(l, df) #        all obs # —————————————— # mean    39.4"},{"path":"https://roche.github.io/rtables/main/articles/introduction.html","id":"layout-instructions","dir":"Articles","previous_headings":"Starting Simple","what":"Layout Instructions","title":"Introduction to rtables","text":"code first described table assigned description variable l. built table using actual data build_table(). description table called table layout. basic_table() start every table layout contains information one column representing data. analyze() instruction adds layout age variable analyzed mean() analysis function result rounded 1 decimal place. Hence, layout “pre-data”, , ’s description build table get data. can look layout isolated: general layouting instructions summarized : basic_table() layout representing table zero rows one column row space: split_rows_by(), split_rows_by_multivar(), split_rows_by_cuts(), split_rows_by_cutfun(), split_rows_by_quartiles() column space: split_cols_by(), split_cols_by_multivar(), split_cols_by_cuts(), split_cols_by_cutfun(), split_cols_by_quartiles() Summarizing Groups: summarize_row_groups() Analyzing Variables: analyze(), analyze_colvars() using functions possible create wide variety tables show document.","code":"l # A Pre-data Table Layout #  # Column-Split Structure: #  ()  #  # Row-Split Structure: # age (** analysis **)"},{"path":"https://roche.github.io/rtables/main/articles/introduction.html","id":"adding-column-structure","dir":"Articles","previous_headings":"Starting Simple","what":"Adding Column Structure","title":"Introduction to rtables","text":"now add structure columns adding column split based factor variable arm: resulting table one column per factor level arm. data represented first column df[df$arm == \"ARM \", ]. Hence, split_cols_by() partitions data among columns default. Column splitting can done recursive/nested manner adding sequential split_cols_by() layout instruction. ’s also possible add non-nested split. splitting arm gender: first column represents data df df$arm == \"\" & df$gender == \"Female\" second column data df df$arm == \"\" & df$gender == \"Male\", .","code":"l <- basic_table() %>%   split_cols_by(\"arm\") %>%   analyze(\"age\", afun = mean, format = \"xx.x\")  build_table(l, df) #        Arm A   Arm B # ———————————————————— # mean   39.5    39.4 l <- basic_table() %>%   split_cols_by(\"arm\") %>%   split_cols_by(\"gender\") %>%   analyze(\"age\", afun = mean, format = \"xx.x\")  build_table(l, df) #            Arm A           Arm B     #        Female   Male   Female   Male # ———————————————————————————————————— # mean    38.8    40.1    39.6    39.2"},{"path":"https://roche.github.io/rtables/main/articles/introduction.html","id":"adding-row-structure","dir":"Articles","previous_headings":"Starting Simple","what":"Adding Row Structure","title":"Introduction to rtables","text":"far, created layouts analysis column splitting instructions, .e. analyze() split_cols_by(), respectively. resulted table multiple columns one data row. add row structure stratifying mean analysis country (.e. adding split row space): table data used derive first data cell (average age female Canadians Arm ) df$country == \"CAN\" & df$arm == \"Arm \" & df$gender == \"Female\". cell value can also calculated manually:","code":"l <- basic_table() %>%   split_cols_by(\"arm\") %>%   split_cols_by(\"gender\") %>%   split_rows_by(\"country\") %>%   analyze(\"age\", afun = mean, format = \"xx.x\")  build_table(l, df) #              Arm A           Arm B     #          Female   Male   Female   Male # —————————————————————————————————————— # CAN                                    #   mean    38.2    40.3    40.3    38.9 # USA                                    #   mean    39.2    39.7    38.9    39.6 mean(df$age[df$country == \"CAN\" & df$arm == \"Arm A\" & df$gender == \"Female\"]) # [1] 38.22447"},{"path":"https://roche.github.io/rtables/main/articles/introduction.html","id":"adding-group-information","dir":"Articles","previous_headings":"Starting Simple","what":"Adding Group Information","title":"Introduction to rtables","text":"adding row splits get default label rows split level, example CAN USA table . Besides column space subsetting, now subsetted data cell. often useful defining row splitting display information row group. rtables referred content information, .e. mean() row 2 descendant CAN (visible via indenting, though table underlying tree structure importance vignette). order add content information turn CAN label row content row summarize_row_groups() function required. default, count (nrows()) percentage data relative column associated data calculated: relative percentage average age female Canadians calculated follows: group percentages per row split sum 1 column. can split row space dividing country handedness: Next, add count percentage summary handedness within country:","code":"l <- basic_table() %>%   split_cols_by(\"arm\") %>%   split_cols_by(\"gender\") %>%   split_rows_by(\"country\") %>%   summarize_row_groups() %>%   analyze(\"age\", afun = mean, format = \"xx.x\")  build_table(l, df) #                   Arm A                     Arm B          #            Female        Male        Female        Male    # —————————————————————————————————————————————————————————— # CAN      45 (46.9%)   64 (61.0%)   46 (50.0%)   62 (57.9%) #   mean      38.2         40.3         40.3         38.9    # USA      51 (53.1%)   41 (39.0%)   46 (50.0%)   45 (42.1%) #   mean      39.2         39.7         38.9         39.6 df_cell <- subset(df, df$country == \"CAN\" & df$arm == \"Arm A\" & df$gender == \"Female\") df_col_1 <- subset(df, df$arm == \"Arm A\" & df$gender == \"Female\")  c(count = nrow(df_cell), percentage = nrow(df_cell) / nrow(df_col_1)) #      count percentage  #   45.00000    0.46875 l <- basic_table() %>%   split_cols_by(\"arm\") %>%   split_cols_by(\"gender\") %>%   split_rows_by(\"country\") %>%   summarize_row_groups() %>%   split_rows_by(\"handed\") %>%   analyze(\"age\", afun = mean, format = \"xx.x\")  build_table(l, df) #                     Arm A                     Arm B          #              Female        Male        Female        Male    # ———————————————————————————————————————————————————————————— # CAN        45 (46.9%)   64 (61.0%)   46 (50.0%)   62 (57.9%) #   Left                                                       #     mean      38.9         40.4         40.3         37.7    #   Right                                                      #     mean      36.6         40.2         40.2         40.6    # USA        51 (53.1%)   41 (39.0%)   46 (50.0%)   45 (42.1%) #   Left                                                       #     mean      40.4         39.7         39.2         40.1    #   Right                                                      #     mean      36.9         39.8         38.5         39.0 l <- basic_table() %>%   split_cols_by(\"arm\") %>%   split_cols_by(\"gender\") %>%   split_rows_by(\"country\") %>%   summarize_row_groups() %>%   split_rows_by(\"handed\") %>%   summarize_row_groups() %>%   analyze(\"age\", afun = mean, format = \"xx.x\")  tbl <- build_table(l, df) tbl #                     Arm A                     Arm B          #              Female        Male        Female        Male    # ———————————————————————————————————————————————————————————— # CAN        45 (46.9%)   64 (61.0%)   46 (50.0%)   62 (57.9%) #   Left     32 (33.3%)   42 (40.0%)   26 (28.3%)   37 (34.6%) #     mean      38.9         40.4         40.3         37.7    #   Right    13 (13.5%)   22 (21.0%)   20 (21.7%)   25 (23.4%) #     mean      36.6         40.2         40.2         40.6    # USA        51 (53.1%)   41 (39.0%)   46 (50.0%)   45 (42.1%) #   Left     34 (35.4%)   19 (18.1%)   25 (27.2%)   25 (23.4%) #     mean      40.4         39.7         39.2         40.1    #   Right    17 (17.7%)   22 (21.0%)   21 (22.8%)   20 (18.7%) #     mean      36.9         39.8         38.5         39.0"},{"path":"https://roche.github.io/rtables/main/articles/introduction.html","id":"introspecting-rtables-table-objects","dir":"Articles","previous_headings":"","what":"Introspecting rtables Table Objects","title":"Introduction to rtables","text":"created table, can inspect structure using number functions. table_structure() function prints summary table’s row structure one two levels detail. default, summarizes structure subtable level. detail argument set \"row\", however, provides detailed row-level summary, acts useful alternative might normally use str() function interrogate compound nested lists. make_row_df() make_col_df() functions create data.frame variety information table’s structure. useful introspection purposes label, name, abs_rownumber, path node_class columns (remainder information returned data.frame used pagination) default make_row_df() summarizes visible rows, setting visible_only FALSE gives us structural summary table, including full hierarchy subtables, including aren’t represented directly visible rows: make_col_df() similarly accepts visible_only, though meaining slightly different, indicating whether leaf columns summarized (TRUE, default) whether higher level groups columns, analogous subtables row space, summarized well. row_paths_summary() col_paths_summary() functions wrap respective make_*_df functions, printing name, node_class path information (row case), label path information (column case), indented illustrate table structure:","code":"table_structure(tbl) # [TableTree] country #  [TableTree] CAN [cont: 1 x 4] #   [TableTree] handed #    [TableTree] Left [cont: 1 x 4] #     [ElementaryTable] age (1 x 4) #    [TableTree] Right [cont: 1 x 4] #     [ElementaryTable] age (1 x 4) #  [TableTree] USA [cont: 1 x 4] #   [TableTree] handed #    [TableTree] Left [cont: 1 x 4] #     [ElementaryTable] age (1 x 4) #    [TableTree] Right [cont: 1 x 4] #     [ElementaryTable] age (1 x 4) table_structure(tbl, detail = \"row\") # TableTree: [country] (country) #   labelrow: [country] (country) - <not visible> #   children:  #     TableTree: [CAN] (CAN) #       labelrow: [CAN] (CAN) - <not visible> #       content: #         ElementaryTable: [CAN@content] () #           labelrow: [] () - <not visible> #           children:  #             ContentRow: [CAN] (CAN) #       children:  #         TableTree: [handed] (handed) #           labelrow: [handed] (handed) - <not visible> #           children:  #             TableTree: [Left] (Left) #               labelrow: [Left] (Left) - <not visible> #               content: #                 ElementaryTable: [Left@content] () #                   labelrow: [] () - <not visible> #                   children:  #                     ContentRow: [Left] (Left) #               children:  #                 ElementaryTable: [age] (age) #                   labelrow: [age] (age) - <not visible> #                   children:  #                     DataRow: [mean] (mean) #             TableTree: [Right] (Right) #               labelrow: [Right] (Right) - <not visible> #               content: #                 ElementaryTable: [Right@content] () #                   labelrow: [] () - <not visible> #                   children:  #                     ContentRow: [Right] (Right) #               children:  #                 ElementaryTable: [age] (age) #                   labelrow: [age] (age) - <not visible> #                   children:  #                     DataRow: [mean] (mean) #     TableTree: [USA] (USA) #       labelrow: [USA] (USA) - <not visible> #       content: #         ElementaryTable: [USA@content] () #           labelrow: [] () - <not visible> #           children:  #             ContentRow: [USA] (USA) #       children:  #         TableTree: [handed] (handed) #           labelrow: [handed] (handed) - <not visible> #           children:  #             TableTree: [Left] (Left) #               labelrow: [Left] (Left) - <not visible> #               content: #                 ElementaryTable: [Left@content] () #                   labelrow: [] () - <not visible> #                   children:  #                     ContentRow: [Left] (Left) #               children:  #                 ElementaryTable: [age] (age) #                   labelrow: [age] (age) - <not visible> #                   children:  #                     DataRow: [mean] (mean) #             TableTree: [Right] (Right) #               labelrow: [Right] (Right) - <not visible> #               content: #                 ElementaryTable: [Right@content] () #                   labelrow: [] () - <not visible> #                   children:  #                     ContentRow: [Right] (Right) #               children:  #                 ElementaryTable: [age] (age) #                   labelrow: [age] (age) - <not visible> #                   children:  #                     DataRow: [mean] (mean) make_row_df(tbl)[,c(\"label\", \"name\", \"abs_rownumber\", \"path\", \"node_class\")] #    label  name abs_rownumber         path node_class # 1    CAN   CAN             1 country,.... ContentRow # 2   Left  Left             2 country,.... ContentRow # 3   mean  mean             3 country,....    DataRow # 4  Right Right             4 country,.... ContentRow # 5   mean  mean             5 country,....    DataRow # 6    USA   USA             6 country,.... ContentRow # 7   Left  Left             7 country,.... ContentRow # 8   mean  mean             8 country,....    DataRow # 9  Right Right             9 country,.... ContentRow # 10  mean  mean            10 country,....    DataRow make_row_df(tbl, visible_only = FALSE)[,c(\"label\", \"name\", \"abs_rownumber\", \"path\", \"node_class\")] #    label          name abs_rownumber         path      node_class # 1              country            NA      country       TableTree # 2                  CAN            NA country, CAN       TableTree # 3          CAN@content            NA country,.... ElementaryTable # 4    CAN           CAN             1 country,....      ContentRow # 5               handed            NA country,....       TableTree # 6                 Left            NA country,....       TableTree # 7         Left@content            NA country,.... ElementaryTable # 8   Left          Left             2 country,....      ContentRow # 9                  age            NA country,.... ElementaryTable # 10  mean          mean             3 country,....         DataRow # 11               Right            NA country,....       TableTree # 12       Right@content            NA country,.... ElementaryTable # 13 Right         Right             4 country,....      ContentRow # 14                 age            NA country,.... ElementaryTable # 15  mean          mean             5 country,....         DataRow # 16                 USA            NA country, USA       TableTree # 17         USA@content            NA country,.... ElementaryTable # 18   USA           USA             6 country,....      ContentRow # 19              handed            NA country,....       TableTree # 20                Left            NA country,....       TableTree # 21        Left@content            NA country,.... ElementaryTable # 22  Left          Left             7 country,....      ContentRow # 23                 age            NA country,.... ElementaryTable # 24  mean          mean             8 country,....         DataRow # 25               Right            NA country,....       TableTree # 26       Right@content            NA country,.... ElementaryTable # 27 Right         Right             9 country,....      ContentRow # 28                 age            NA country,.... ElementaryTable # 29  mean          mean            10 country,....         DataRow make_col_df(tbl) #     name  label abs_pos         path pos_in_siblings n_siblings leaf_indices # 1 Female Female       1 arm, Arm....               1          2            1 # 2   Male   Male       2 arm, Arm....               2          2            2 # 3 Female Female       3 arm, Arm....               1          2            3 # 4   Male   Male       4 arm, Arm....               2          2            4 #   total_span col_fnotes n_col_fnotes # 1          1                       0 # 2          1                       0 # 3          1                       0 # 4          1                       0 make_col_df(tbl, visible_only = FALSE) #     name  label abs_pos         path pos_in_siblings n_siblings leaf_indices # 1  Arm A  Arm A      NA   arm, Arm A               1          2         1, 2 # 2 Female Female       1 arm, Arm....               1          2            1 # 3   Male   Male       2 arm, Arm....               2          2            2 # 4  Arm B  Arm B      NA   arm, Arm B               2          2         3, 4 # 5 Female Female       3 arm, Arm....               1          2            3 # 6   Male   Male       4 arm, Arm....               2          2            4 #   total_span col_fnotes n_col_fnotes # 1          2                       0 # 2          1                       0 # 3          1                       0 # 4          2                       0 # 5          1                       0 # 6          1                       0 row_paths_summary(tbl) # rowname     node_class    path                                         # —————————————————————————————————————————————————————————————————————— # CAN         ContentRow    country, CAN, @content, CAN                  #   Left      ContentRow    country, CAN, handed, Left, @content, Left   #     mean    DataRow       country, CAN, handed, Left, age, mean        #   Right     ContentRow    country, CAN, handed, Right, @content, Right #     mean    DataRow       country, CAN, handed, Right, age, mean       # USA         ContentRow    country, USA, @content, USA                  #   Left      ContentRow    country, USA, handed, Left, @content, Left   #     mean    DataRow       country, USA, handed, Left, age, mean        #   Right     ContentRow    country, USA, handed, Right, @content, Right #     mean    DataRow       country, USA, handed, Right, age, mean col_paths_summary(tbl) # label       path                       # —————————————————————————————————————— # Arm A       arm, Arm A                 #   Female    arm, Arm A, gender, Female #   Male      arm, Arm A, gender, Male   # Arm B       arm, Arm B                 #   Female    arm, Arm B, gender, Female #   Male      arm, Arm B, gender, Male"},{"path":"https://roche.github.io/rtables/main/articles/introduction.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Introduction to rtables","text":"vignette learned: means much tabulation splitting/subsetting data tables can described pre-data using layouts tables form visualization data vignettes rtables package provide detailed information rtables package. recommend continue tabulation_dplyr vignette compares information derived table vignette using dplyr.","code":""},{"path":"https://roche.github.io/rtables/main/articles/manual_table_construction.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Constructing rtables Manually","text":"main functions currently associated rtables Tables rtables can constructed via layout rtabulate tabulation frameworks also manually. Currently manual table construction way define column spans. main functions manual table constructions : rtable(): collection rrow() objects, column header default format rrow(): collection rcell() objects default format rcell(): collection data objects cell format","code":""},{"path":"https://roche.github.io/rtables/main/articles/manual_table_construction.html","id":"simple-example","dir":"Articles","previous_headings":"","what":"Simple Example","title":"Constructing rtables Manually","text":"go explaining individual components used create table continue html conversion rtable() object:  Next, [ operator lets access cell content. format cell run format_rcell(tbl[1,1])=. Note tbl[6, 1] tbl[6, 2] display rcell colspan.","code":"library(rtables) tbl <- rtable(   header = c(\"Treatement\\nN=100\", \"Comparison\\nN=300\"),   format = \"xx (xx.xx%)\",   rrow(\"A\", c(104, .2), c(100, .4)),   rrow(\"B\", c(23, .4), c(43, .5)),   rrow(),   rrow(\"this is a very long section header\"),   rrow(\"estimate\", rcell(55.23, \"xx.xx\", colspan = 2)),   rrow(\"95% CI\", indent = 1, rcell(c(44.8, 67.4), format = \"(xx.x, xx.x)\", colspan = 2)) ) as_html(tbl, width = \"80%\") tbl[1, 1] #      Treatement  #        N=100     # ———————————————— # A   104 (20.00%)"},{"path":"https://roche.github.io/rtables/main/articles/sorting_pruning.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Pruning and Sorting Tables","text":"Often want filter reorder subsections table ways take account table structure. example sorting subtables corresponding factor levels commonly observed levels occur first table Removing subtables represent 0 observations filtering contain 0 rows","code":"library(rtables) # Loading required package: magrittr # Loading required package: formatters library(dplyr) #  # Attaching package: 'dplyr' # The following objects are masked from 'package:stats': #  #     filter, lag # The following objects are masked from 'package:base': #  #     intersect, setdiff, setequal, union"},{"path":"https://roche.github.io/rtables/main/articles/sorting_pruning.html","id":"a-table-in-need-of-attention","dir":"Articles","previous_headings":"","what":"A Table In Need of Attention","title":"Pruning and Sorting Tables","text":"","code":"rawtable <- basic_table() %>%     split_cols_by(\"ARM\") %>%     split_cols_by(\"SEX\") %>%     split_rows_by(\"RACE\") %>%     summarize_row_groups() %>%     split_rows_by(\"STRATA1\") %>%     summarize_row_groups() %>%     analyze(\"AGE\") %>%     build_table(DM) rawtable #                                                                  A: Drug X                                              B: Placebo                                           C: Combination                    #                                                 F            M           U      UNDIFFERENTIATED       F            M           U      UNDIFFERENTIATED       F            M           U      UNDIFFERENTIATED # —————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN                                       44 (62.9%)   35 (68.6%)   0 (NA%)       0 (NA%)        37 (66.1%)   31 (62.0%)   0 (NA%)       0 (NA%)        40 (65.6%)   44 (64.7%)   0 (NA%)       0 (NA%)      #   A                                         15 (21.4%)   12 (23.5%)   0 (NA%)       0 (NA%)        14 (25.0%)   6 (12.0%)    0 (NA%)       0 (NA%)        15 (24.6%)   16 (23.5%)   0 (NA%)       0 (NA%)      #     Mean                                      30.40        34.42        NA             NA            35.43        30.33        NA             NA            37.40        36.25        NA             NA        #   B                                         16 (22.9%)   8 (15.7%)    0 (NA%)       0 (NA%)        13 (23.2%)   16 (32.0%)   0 (NA%)       0 (NA%)        10 (16.4%)   12 (17.6%)   0 (NA%)       0 (NA%)      #     Mean                                      33.75        34.88        NA             NA            32.46        30.94        NA             NA            33.30        35.92        NA             NA        #   C                                         13 (18.6%)   15 (29.4%)   0 (NA%)       0 (NA%)        10 (17.9%)   9 (18.0%)    0 (NA%)       0 (NA%)        15 (24.6%)   16 (23.5%)   0 (NA%)       0 (NA%)      #     Mean                                      36.92        35.60        NA             NA            34.00        31.89        NA             NA            33.47        31.38        NA             NA        # BLACK OR AFRICAN AMERICAN                   18 (25.7%)   10 (19.6%)   0 (NA%)       0 (NA%)        12 (21.4%)   12 (24.0%)   0 (NA%)       0 (NA%)        13 (21.3%)   14 (20.6%)   0 (NA%)       0 (NA%)      #   A                                          5 (7.1%)     1 (2.0%)    0 (NA%)       0 (NA%)         5 (8.9%)     2 (4.0%)    0 (NA%)       0 (NA%)         4 (6.6%)     4 (5.9%)    0 (NA%)       0 (NA%)      #     Mean                                      31.20        33.00        NA             NA            28.00        30.00        NA             NA            30.75        36.50        NA             NA        #   B                                         7 (10.0%)     3 (5.9%)    0 (NA%)       0 (NA%)         3 (5.4%)     3 (6.0%)    0 (NA%)       0 (NA%)         6 (9.8%)     6 (8.8%)    0 (NA%)       0 (NA%)      #     Mean                                      36.14        34.33        NA             NA            29.67        32.00        NA             NA            36.33        31.00        NA             NA        #   C                                          6 (8.6%)    6 (11.8%)    0 (NA%)       0 (NA%)         4 (7.1%)    7 (14.0%)    0 (NA%)       0 (NA%)         3 (4.9%)     4 (5.9%)    0 (NA%)       0 (NA%)      #     Mean                                      31.33        39.67        NA             NA            34.50        34.00        NA             NA            33.00        36.50        NA             NA        # WHITE                                       8 (11.4%)    6 (11.8%)    0 (NA%)       0 (NA%)        7 (12.5%)    7 (14.0%)    0 (NA%)       0 (NA%)        8 (13.1%)    10 (14.7%)   0 (NA%)       0 (NA%)      #   A                                          2 (2.9%)     1 (2.0%)    0 (NA%)       0 (NA%)         3 (5.4%)     3 (6.0%)    0 (NA%)       0 (NA%)         1 (1.6%)     5 (7.4%)    0 (NA%)       0 (NA%)      #     Mean                                      34.00        45.00        NA             NA            29.33        33.33        NA             NA            35.00        32.80        NA             NA        #   B                                          4 (5.7%)     3 (5.9%)    0 (NA%)       0 (NA%)         1 (1.8%)     4 (8.0%)    0 (NA%)       0 (NA%)         3 (4.9%)     1 (1.5%)    0 (NA%)       0 (NA%)      #     Mean                                      37.00        43.67        NA             NA            48.00        36.75        NA             NA            34.33        36.00        NA             NA        #   C                                          2 (2.9%)     2 (3.9%)    0 (NA%)       0 (NA%)         3 (5.4%)     0 (0.0%)    0 (NA%)       0 (NA%)         4 (6.6%)     4 (5.9%)    0 (NA%)       0 (NA%)      #     Mean                                      35.50        44.00        NA             NA            44.67          NA         NA             NA            38.50        35.00        NA             NA        # AMERICAN INDIAN OR ALASKA NATIVE             0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #   A                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        #   B                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        #   C                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        # MULTIPLE                                     0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #   A                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        #   B                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        #   C                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        # NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER    0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #   A                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        #   B                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        #   C                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        # OTHER                                        0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #   A                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        #   B                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        #   C                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        # UNKNOWN                                      0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #   A                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        #   B                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA        #   C                                          0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)         0 (0.0%)     0 (0.0%)    0 (NA%)       0 (NA%)      #     Mean                                        NA           NA         NA             NA              NA           NA         NA             NA              NA           NA         NA             NA"},{"path":[]},{"path":"https://roche.github.io/rtables/main/articles/sorting_pruning.html","id":"rows","dir":"Articles","previous_headings":"Trimming","what":"Rows","title":"Pruning and Sorting Tables","text":"Trimming represents convenience wrapper around simple, direct subsetting rows TableTree. use trim_rows() function table criteria function. rows criteria function returns TRUE removed, others retained. NOTE: row kept removed completely independently, awareness surrounding structure. means, example, subtree analysis rows removed removed . structure-aware filtering table, use pruning described next section. trimming function accepts TableRow object returns TRUE row removed. default trimming function removes rows columns values , .e. NA values 0 values:","code":"trim_rows(rawtable) #                                                  A: Drug X                                              B: Placebo                                           C: Combination                    #                                 F            M           U      UNDIFFERENTIATED       F            M           U      UNDIFFERENTIATED       F            M           U      UNDIFFERENTIATED # —————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN                       44 (62.9%)   35 (68.6%)   0 (NA%)       0 (NA%)        37 (66.1%)   31 (62.0%)   0 (NA%)       0 (NA%)        40 (65.6%)   44 (64.7%)   0 (NA%)       0 (NA%)      #   A                         15 (21.4%)   12 (23.5%)   0 (NA%)       0 (NA%)        14 (25.0%)   6 (12.0%)    0 (NA%)       0 (NA%)        15 (24.6%)   16 (23.5%)   0 (NA%)       0 (NA%)      #     Mean                      30.40        34.42        NA             NA            35.43        30.33        NA             NA            37.40        36.25        NA             NA        #   B                         16 (22.9%)   8 (15.7%)    0 (NA%)       0 (NA%)        13 (23.2%)   16 (32.0%)   0 (NA%)       0 (NA%)        10 (16.4%)   12 (17.6%)   0 (NA%)       0 (NA%)      #     Mean                      33.75        34.88        NA             NA            32.46        30.94        NA             NA            33.30        35.92        NA             NA        #   C                         13 (18.6%)   15 (29.4%)   0 (NA%)       0 (NA%)        10 (17.9%)   9 (18.0%)    0 (NA%)       0 (NA%)        15 (24.6%)   16 (23.5%)   0 (NA%)       0 (NA%)      #     Mean                      36.92        35.60        NA             NA            34.00        31.89        NA             NA            33.47        31.38        NA             NA        # BLACK OR AFRICAN AMERICAN   18 (25.7%)   10 (19.6%)   0 (NA%)       0 (NA%)        12 (21.4%)   12 (24.0%)   0 (NA%)       0 (NA%)        13 (21.3%)   14 (20.6%)   0 (NA%)       0 (NA%)      #   A                          5 (7.1%)     1 (2.0%)    0 (NA%)       0 (NA%)         5 (8.9%)     2 (4.0%)    0 (NA%)       0 (NA%)         4 (6.6%)     4 (5.9%)    0 (NA%)       0 (NA%)      #     Mean                      31.20        33.00        NA             NA            28.00        30.00        NA             NA            30.75        36.50        NA             NA        #   B                         7 (10.0%)     3 (5.9%)    0 (NA%)       0 (NA%)         3 (5.4%)     3 (6.0%)    0 (NA%)       0 (NA%)         6 (9.8%)     6 (8.8%)    0 (NA%)       0 (NA%)      #     Mean                      36.14        34.33        NA             NA            29.67        32.00        NA             NA            36.33        31.00        NA             NA        #   C                          6 (8.6%)    6 (11.8%)    0 (NA%)       0 (NA%)         4 (7.1%)    7 (14.0%)    0 (NA%)       0 (NA%)         3 (4.9%)     4 (5.9%)    0 (NA%)       0 (NA%)      #     Mean                      31.33        39.67        NA             NA            34.50        34.00        NA             NA            33.00        36.50        NA             NA        # WHITE                       8 (11.4%)    6 (11.8%)    0 (NA%)       0 (NA%)        7 (12.5%)    7 (14.0%)    0 (NA%)       0 (NA%)        8 (13.1%)    10 (14.7%)   0 (NA%)       0 (NA%)      #   A                          2 (2.9%)     1 (2.0%)    0 (NA%)       0 (NA%)         3 (5.4%)     3 (6.0%)    0 (NA%)       0 (NA%)         1 (1.6%)     5 (7.4%)    0 (NA%)       0 (NA%)      #     Mean                      34.00        45.00        NA             NA            29.33        33.33        NA             NA            35.00        32.80        NA             NA        #   B                          4 (5.7%)     3 (5.9%)    0 (NA%)       0 (NA%)         1 (1.8%)     4 (8.0%)    0 (NA%)       0 (NA%)         3 (4.9%)     1 (1.5%)    0 (NA%)       0 (NA%)      #     Mean                      37.00        43.67        NA             NA            48.00        36.75        NA             NA            34.33        36.00        NA             NA        #   C                          2 (2.9%)     2 (3.9%)    0 (NA%)       0 (NA%)         3 (5.4%)     0 (0.0%)    0 (NA%)       0 (NA%)         4 (6.6%)     4 (5.9%)    0 (NA%)       0 (NA%)      #     Mean                      35.50        44.00        NA             NA            44.67          NA         NA             NA            38.50        35.00        NA             NA"},{"path":"https://roche.github.io/rtables/main/articles/sorting_pruning.html","id":"trimming-columns","dir":"Articles","previous_headings":"Trimming","what":"Trimming Columns","title":"Pruning and Sorting Tables","text":"currently special utilities trimming columns can remove empty columns fairly straightforward column subsetting:","code":"coltrimmed <- rawtable[, col_counts(rawtable) > 0] # Note: method with signature 'VTableTree#missing#ANY' chosen for function '[', #  target signature 'TableTree#missing#logical'. #  \"VTableTree#ANY#logical\" would also be valid head(coltrimmed) #                   A: Drug X                B: Placebo              C: Combination      #                F            M            F            M            F            M      # —————————————————————————————————————————————————————————————————————————————————————— # ASIAN      44 (62.9%)   35 (68.6%)   37 (66.1%)   31 (62.0%)   40 (65.6%)   44 (64.7%) #   A        15 (21.4%)   12 (23.5%)   14 (25.0%)   6 (12.0%)    15 (24.6%)   16 (23.5%) #     Mean     30.40        34.42        35.43        30.33        37.40        36.25    #   B        16 (22.9%)   8 (15.7%)    13 (23.2%)   16 (32.0%)   10 (16.4%)   12 (17.6%) #     Mean     33.75        34.88        32.46        30.94        33.30        35.92    #   C        13 (18.6%)   15 (29.4%)   10 (17.9%)   9 (18.0%)    15 (24.6%)   16 (23.5%)"},{"path":"https://roche.github.io/rtables/main/articles/sorting_pruning.html","id":"pruning","dir":"Articles","previous_headings":"","what":"Pruning","title":"Pruning and Sorting Tables","text":"Pruning similar outcome trimming, powerful complex, takes structure account. Pruning applied recursively, structural unit (subtable, row) applies pruning function level ’s children (user-specifiable maximum depth). default pruning function, example, determines subtree empty Removing children contain single content row contains zeros NAs Removing rows contain either zeros NAs Removing full subtree unpruned children remain can also use low_obs_pruner() pruning function constructor create pruning function removes subtrees content summaries whose first entries column sum average specified number. (default summaries first entry per column count). Note pruning applied recursively, ASIAN subtree remains even though full BLACK AFRICAN AMERICAN subtree encompassed enough observations, strata within . can take care setting stop_depth pruning 1. can also see pruning lower number observations, say, total 16, stop_depth removes strata third race (WHITE).","code":"pruned <- prune_table(coltrimmed) pruned #                                    A: Drug X                B: Placebo              C: Combination      #                                 F            M            F            M            F            M      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN                       44 (62.9%)   35 (68.6%)   37 (66.1%)   31 (62.0%)   40 (65.6%)   44 (64.7%) #   A                         15 (21.4%)   12 (23.5%)   14 (25.0%)   6 (12.0%)    15 (24.6%)   16 (23.5%) #     Mean                      30.40        34.42        35.43        30.33        37.40        36.25    #   B                         16 (22.9%)   8 (15.7%)    13 (23.2%)   16 (32.0%)   10 (16.4%)   12 (17.6%) #     Mean                      33.75        34.88        32.46        30.94        33.30        35.92    #   C                         13 (18.6%)   15 (29.4%)   10 (17.9%)   9 (18.0%)    15 (24.6%)   16 (23.5%) #     Mean                      36.92        35.60        34.00        31.89        33.47        31.38    # BLACK OR AFRICAN AMERICAN   18 (25.7%)   10 (19.6%)   12 (21.4%)   12 (24.0%)   13 (21.3%)   14 (20.6%) #   A                          5 (7.1%)     1 (2.0%)     5 (8.9%)     2 (4.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      31.20        33.00        28.00        30.00        30.75        36.50    #   B                         7 (10.0%)     3 (5.9%)     3 (5.4%)     3 (6.0%)     6 (9.8%)     6 (8.8%)  #     Mean                      36.14        34.33        29.67        32.00        36.33        31.00    #   C                          6 (8.6%)    6 (11.8%)     4 (7.1%)    7 (14.0%)     3 (4.9%)     4 (5.9%)  #     Mean                      31.33        39.67        34.50        34.00        33.00        36.50    # WHITE                       8 (11.4%)    6 (11.8%)    7 (12.5%)    7 (14.0%)    8 (13.1%)    10 (14.7%) #   A                          2 (2.9%)     1 (2.0%)     3 (5.4%)     3 (6.0%)     1 (1.6%)     5 (7.4%)  #     Mean                      34.00        45.00        29.33        33.33        35.00        32.80    #   B                          4 (5.7%)     3 (5.9%)     1 (1.8%)     4 (8.0%)     3 (4.9%)     1 (1.5%)  #     Mean                      37.00        43.67        48.00        36.75        34.33        36.00    #   C                          2 (2.9%)     2 (3.9%)     3 (5.4%)     0 (0.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      35.50        44.00        44.67          NA         38.50        35.00 pruned2 <- prune_table(coltrimmed, low_obs_pruner(10, \"mean\")) pruned2 #                   A: Drug X                B: Placebo              C: Combination      #                F            M            F            M            F            M      # —————————————————————————————————————————————————————————————————————————————————————— # ASIAN      44 (62.9%)   35 (68.6%)   37 (66.1%)   31 (62.0%)   40 (65.6%)   44 (64.7%) #   A        15 (21.4%)   12 (23.5%)   14 (25.0%)   6 (12.0%)    15 (24.6%)   16 (23.5%) #     Mean     30.40        34.42        35.43        30.33        37.40        36.25    #   B        16 (22.9%)   8 (15.7%)    13 (23.2%)   16 (32.0%)   10 (16.4%)   12 (17.6%) #     Mean     33.75        34.88        32.46        30.94        33.30        35.92    #   C        13 (18.6%)   15 (29.4%)   10 (17.9%)   9 (18.0%)    15 (24.6%)   16 (23.5%) #     Mean     36.92        35.60        34.00        31.89        33.47        31.38 pruned3 <- prune_table(coltrimmed, low_obs_pruner(10, \"sum\"), stop_depth = 1) pruned3 #                                    A: Drug X                B: Placebo              C: Combination      #                                 F            M            F            M            F            M      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN                       44 (62.9%)   35 (68.6%)   37 (66.1%)   31 (62.0%)   40 (65.6%)   44 (64.7%) #   A                         15 (21.4%)   12 (23.5%)   14 (25.0%)   6 (12.0%)    15 (24.6%)   16 (23.5%) #     Mean                      30.40        34.42        35.43        30.33        37.40        36.25    #   B                         16 (22.9%)   8 (15.7%)    13 (23.2%)   16 (32.0%)   10 (16.4%)   12 (17.6%) #     Mean                      33.75        34.88        32.46        30.94        33.30        35.92    #   C                         13 (18.6%)   15 (29.4%)   10 (17.9%)   9 (18.0%)    15 (24.6%)   16 (23.5%) #     Mean                      36.92        35.60        34.00        31.89        33.47        31.38    # BLACK OR AFRICAN AMERICAN   18 (25.7%)   10 (19.6%)   12 (21.4%)   12 (24.0%)   13 (21.3%)   14 (20.6%) #   A                          5 (7.1%)     1 (2.0%)     5 (8.9%)     2 (4.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      31.20        33.00        28.00        30.00        30.75        36.50    #   B                         7 (10.0%)     3 (5.9%)     3 (5.4%)     3 (6.0%)     6 (9.8%)     6 (8.8%)  #     Mean                      36.14        34.33        29.67        32.00        36.33        31.00    #   C                          6 (8.6%)    6 (11.8%)     4 (7.1%)    7 (14.0%)     3 (4.9%)     4 (5.9%)  #     Mean                      31.33        39.67        34.50        34.00        33.00        36.50    # WHITE                       8 (11.4%)    6 (11.8%)    7 (12.5%)    7 (14.0%)    8 (13.1%)    10 (14.7%) #   A                          2 (2.9%)     1 (2.0%)     3 (5.4%)     3 (6.0%)     1 (1.6%)     5 (7.4%)  #     Mean                      34.00        45.00        29.33        33.33        35.00        32.80    #   B                          4 (5.7%)     3 (5.9%)     1 (1.8%)     4 (8.0%)     3 (4.9%)     1 (1.5%)  #     Mean                      37.00        43.67        48.00        36.75        34.33        36.00    #   C                          2 (2.9%)     2 (3.9%)     3 (5.4%)     0 (0.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      35.50        44.00        44.67          NA         38.50        35.00 pruned4 <- prune_table(coltrimmed, low_obs_pruner(16, \"sum\")) pruned4 #                                    A: Drug X                B: Placebo              C: Combination      #                                 F            M            F            M            F            M      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN                       44 (62.9%)   35 (68.6%)   37 (66.1%)   31 (62.0%)   40 (65.6%)   44 (64.7%) #   A                         15 (21.4%)   12 (23.5%)   14 (25.0%)   6 (12.0%)    15 (24.6%)   16 (23.5%) #     Mean                      30.40        34.42        35.43        30.33        37.40        36.25    #   B                         16 (22.9%)   8 (15.7%)    13 (23.2%)   16 (32.0%)   10 (16.4%)   12 (17.6%) #     Mean                      33.75        34.88        32.46        30.94        33.30        35.92    #   C                         13 (18.6%)   15 (29.4%)   10 (17.9%)   9 (18.0%)    15 (24.6%)   16 (23.5%) #     Mean                      36.92        35.60        34.00        31.89        33.47        31.38    # BLACK OR AFRICAN AMERICAN   18 (25.7%)   10 (19.6%)   12 (21.4%)   12 (24.0%)   13 (21.3%)   14 (20.6%) #   A                          5 (7.1%)     1 (2.0%)     5 (8.9%)     2 (4.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      31.20        33.00        28.00        30.00        30.75        36.50    #   B                         7 (10.0%)     3 (5.9%)     3 (5.4%)     3 (6.0%)     6 (9.8%)     6 (8.8%)  #     Mean                      36.14        34.33        29.67        32.00        36.33        31.00    #   C                          6 (8.6%)    6 (11.8%)     4 (7.1%)    7 (14.0%)     3 (4.9%)     4 (5.9%)  #     Mean                      31.33        39.67        34.50        34.00        33.00        36.50    # WHITE                       8 (11.4%)    6 (11.8%)    7 (12.5%)    7 (14.0%)    8 (13.1%)    10 (14.7%) #   B                          4 (5.7%)     3 (5.9%)     1 (1.8%)     4 (8.0%)     3 (4.9%)     1 (1.5%)  #     Mean                      37.00        43.67        48.00        36.75        34.33        36.00"},{"path":"https://roche.github.io/rtables/main/articles/sorting_pruning.html","id":"sorting","dir":"Articles","previous_headings":"","what":"Sorting","title":"Pruning and Sorting Tables","text":"Sorting rtable done path recursively, meaning sort operation occur particular location within table, subtables (children) reordered potentially children reordered well. done giving score function accepts subtree TableRow returns single numeric value. Within context currently sorted, subtrees reordered value score function. Another difference pruning sorting sorting occurs particular places table, defined path. path can contain “*” indicate portion structure sorting occur separately within branch path. Sort strata observation counts within just ASIAN subtable: Sort ethnicity observations increasing order: Within ethnicity separately, sort strata number females arm C (.e. column position 5):","code":"sort_at_path(pruned, path = c(\"RACE\", \"ASIAN\", \"STRATA1\"), scorefun = cont_n_allcols) #                                    A: Drug X                B: Placebo              C: Combination      #                                 F            M            F            M            F            M      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN                       44 (62.9%)   35 (68.6%)   37 (66.1%)   31 (62.0%)   40 (65.6%)   44 (64.7%) #   A                         15 (21.4%)   12 (23.5%)   14 (25.0%)   6 (12.0%)    15 (24.6%)   16 (23.5%) #     Mean                      30.40        34.42        35.43        30.33        37.40        36.25    #   C                         13 (18.6%)   15 (29.4%)   10 (17.9%)   9 (18.0%)    15 (24.6%)   16 (23.5%) #     Mean                      36.92        35.60        34.00        31.89        33.47        31.38    #   B                         16 (22.9%)   8 (15.7%)    13 (23.2%)   16 (32.0%)   10 (16.4%)   12 (17.6%) #     Mean                      33.75        34.88        32.46        30.94        33.30        35.92    # BLACK OR AFRICAN AMERICAN   18 (25.7%)   10 (19.6%)   12 (21.4%)   12 (24.0%)   13 (21.3%)   14 (20.6%) #   A                          5 (7.1%)     1 (2.0%)     5 (8.9%)     2 (4.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      31.20        33.00        28.00        30.00        30.75        36.50    #   B                         7 (10.0%)     3 (5.9%)     3 (5.4%)     3 (6.0%)     6 (9.8%)     6 (8.8%)  #     Mean                      36.14        34.33        29.67        32.00        36.33        31.00    #   C                          6 (8.6%)    6 (11.8%)     4 (7.1%)    7 (14.0%)     3 (4.9%)     4 (5.9%)  #     Mean                      31.33        39.67        34.50        34.00        33.00        36.50    # WHITE                       8 (11.4%)    6 (11.8%)    7 (12.5%)    7 (14.0%)    8 (13.1%)    10 (14.7%) #   A                          2 (2.9%)     1 (2.0%)     3 (5.4%)     3 (6.0%)     1 (1.6%)     5 (7.4%)  #     Mean                      34.00        45.00        29.33        33.33        35.00        32.80    #   B                          4 (5.7%)     3 (5.9%)     1 (1.8%)     4 (8.0%)     3 (4.9%)     1 (1.5%)  #     Mean                      37.00        43.67        48.00        36.75        34.33        36.00    #   C                          2 (2.9%)     2 (3.9%)     3 (5.4%)     0 (0.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      35.50        44.00        44.67          NA         38.50        35.00 ethsort <- sort_at_path(pruned, path = c(\"RACE\"), scorefun = cont_n_allcols, decreasing = FALSE) ethsort #                                    A: Drug X                B: Placebo              C: Combination      #                                 F            M            F            M            F            M      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— # WHITE                       8 (11.4%)    6 (11.8%)    7 (12.5%)    7 (14.0%)    8 (13.1%)    10 (14.7%) #   A                          2 (2.9%)     1 (2.0%)     3 (5.4%)     3 (6.0%)     1 (1.6%)     5 (7.4%)  #     Mean                      34.00        45.00        29.33        33.33        35.00        32.80    #   B                          4 (5.7%)     3 (5.9%)     1 (1.8%)     4 (8.0%)     3 (4.9%)     1 (1.5%)  #     Mean                      37.00        43.67        48.00        36.75        34.33        36.00    #   C                          2 (2.9%)     2 (3.9%)     3 (5.4%)     0 (0.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      35.50        44.00        44.67          NA         38.50        35.00    # BLACK OR AFRICAN AMERICAN   18 (25.7%)   10 (19.6%)   12 (21.4%)   12 (24.0%)   13 (21.3%)   14 (20.6%) #   A                          5 (7.1%)     1 (2.0%)     5 (8.9%)     2 (4.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      31.20        33.00        28.00        30.00        30.75        36.50    #   B                         7 (10.0%)     3 (5.9%)     3 (5.4%)     3 (6.0%)     6 (9.8%)     6 (8.8%)  #     Mean                      36.14        34.33        29.67        32.00        36.33        31.00    #   C                          6 (8.6%)    6 (11.8%)     4 (7.1%)    7 (14.0%)     3 (4.9%)     4 (5.9%)  #     Mean                      31.33        39.67        34.50        34.00        33.00        36.50    # ASIAN                       44 (62.9%)   35 (68.6%)   37 (66.1%)   31 (62.0%)   40 (65.6%)   44 (64.7%) #   A                         15 (21.4%)   12 (23.5%)   14 (25.0%)   6 (12.0%)    15 (24.6%)   16 (23.5%) #     Mean                      30.40        34.42        35.43        30.33        37.40        36.25    #   B                         16 (22.9%)   8 (15.7%)    13 (23.2%)   16 (32.0%)   10 (16.4%)   12 (17.6%) #     Mean                      33.75        34.88        32.46        30.94        33.30        35.92    #   C                         13 (18.6%)   15 (29.4%)   10 (17.9%)   9 (18.0%)    15 (24.6%)   16 (23.5%) #     Mean                      36.92        35.60        34.00        31.89        33.47        31.38 sort_at_path(pruned, path = c(\"RACE\", \"*\", \"STRATA1\"), cont_n_onecol(5)) #                                    A: Drug X                B: Placebo              C: Combination      #                                 F            M            F            M            F            M      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN                       44 (62.9%)   35 (68.6%)   37 (66.1%)   31 (62.0%)   40 (65.6%)   44 (64.7%) #   A                         15 (21.4%)   12 (23.5%)   14 (25.0%)   6 (12.0%)    15 (24.6%)   16 (23.5%) #     Mean                      30.40        34.42        35.43        30.33        37.40        36.25    #   C                         13 (18.6%)   15 (29.4%)   10 (17.9%)   9 (18.0%)    15 (24.6%)   16 (23.5%) #     Mean                      36.92        35.60        34.00        31.89        33.47        31.38    #   B                         16 (22.9%)   8 (15.7%)    13 (23.2%)   16 (32.0%)   10 (16.4%)   12 (17.6%) #     Mean                      33.75        34.88        32.46        30.94        33.30        35.92    # BLACK OR AFRICAN AMERICAN   18 (25.7%)   10 (19.6%)   12 (21.4%)   12 (24.0%)   13 (21.3%)   14 (20.6%) #   B                         7 (10.0%)     3 (5.9%)     3 (5.4%)     3 (6.0%)     6 (9.8%)     6 (8.8%)  #     Mean                      36.14        34.33        29.67        32.00        36.33        31.00    #   A                          5 (7.1%)     1 (2.0%)     5 (8.9%)     2 (4.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      31.20        33.00        28.00        30.00        30.75        36.50    #   C                          6 (8.6%)    6 (11.8%)     4 (7.1%)    7 (14.0%)     3 (4.9%)     4 (5.9%)  #     Mean                      31.33        39.67        34.50        34.00        33.00        36.50    # WHITE                       8 (11.4%)    6 (11.8%)    7 (12.5%)    7 (14.0%)    8 (13.1%)    10 (14.7%) #   C                          2 (2.9%)     2 (3.9%)     3 (5.4%)     0 (0.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      35.50        44.00        44.67          NA         38.50        35.00    #   B                          4 (5.7%)     3 (5.9%)     1 (1.8%)     4 (8.0%)     3 (4.9%)     1 (1.5%)  #     Mean                      37.00        43.67        48.00        36.75        34.33        36.00    #   A                          2 (2.9%)     1 (2.0%)     3 (5.4%)     3 (6.0%)     1 (1.6%)     5 (7.4%)  #     Mean                      34.00        45.00        29.33        33.33        35.00        32.80"},{"path":"https://roche.github.io/rtables/main/articles/sorting_pruning.html","id":"sorting-within-an-analysis-subtable","dir":"Articles","previous_headings":"Sorting","what":"Sorting Within an Analysis Subtable","title":"Pruning and Sorting Tables","text":"sorting within analysis subtable (e.g., subtable generated analysis function generates one row per group data), name subtable (generally name variable analyzed) must appear path, even variable label displayed table printed. path required sort rows inside “analysis” mpg c(\"cyl\", \"*\", \"mpg\"):","code":"silly_afun <- function(x) {     in_rows(a = rcell(2),             b = rcell(3),             c = rcell(1)) }    sillytbl <- basic_table() %>%     split_rows_by(\"cyl\") %>%     analyze(\"mpg\", silly_afun) %>%     build_table(mtcars) # Split var [cyl] was not character or factor. Converting to factor sillytbl #       all obs # ————————————— # 6             #   a      2    #   b      3    #   c      1    # 4             #   a      2    #   b      3    #   c      1    # 8             #   a      2    #   b      3    #   c      1 scorefun <- function(tt) { mean(unlist(row_values(tt)))} sort_at_path(sillytbl, c(\"cyl\", \"*\", \"mpg\"), scorefun) #       all obs # ————————————— # 6             #   b      3    #   a      2    #   c      1    # 4             #   b      3    #   a      2    #   c      1    # 8             #   b      3    #   a      2    #   c      1"},{"path":"https://roche.github.io/rtables/main/articles/sorting_pruning.html","id":"writing-custom-pruning-criteria-and-scoring-functions","dir":"Articles","previous_headings":"","what":"Writing Custom Pruning Criteria and Scoring Functions","title":"Pruning and Sorting Tables","text":"Pruning criteria scoring functions map TableTree TableRow objects Boolean value (pruning criteria) sortable scalar value (scoring functions). currently need interact structure objects usual.","code":""},{"path":"https://roche.github.io/rtables/main/articles/sorting_pruning.html","id":"useful-functions-and-accessors","dir":"Articles","previous_headings":"Writing Custom Pruning Criteria and Scoring Functions","what":"Useful Functions and Accessors","title":"Pruning and Sorting Tables","text":"content_table() - Retrieves TableTree object’s content table (contains summary rows). tree_children() - Retrieves TableTree object’s children (either subtables, rows possibly mix thereof, though happen practice) row_values() - Retrieves TableRow object’s values form list length ncol(tt) vapply(row_values(tt), '[[', =1, numeric(1)) - retrieve first element cell provided tt TableRow (first element numeric value). obj_name() - Retrieves name object. Note can differ label displayed () printing. match element path. obj_label() - Retrieves display label object. Note can differ name appears path.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/articles/sorting_pruning.html","id":"sort-by-a-character-score","dir":"Articles","previous_headings":"Writing Custom Pruning Criteria and Scoring Functions > Example Custom Scoring Functions","what":"Sort by a character “score”","title":"Pruning and Sorting Tables","text":"case, convenience/simplicity, use name table element logic returns single string used . sort ethnicities alphabetical order (practice undoing previous sorting ethnicity ). NOTE generally appropriately done using reorder_split_levels function within layout rather sort post-processing step, character scorers may may map easily layouting directives.","code":"silly_name_scorer <- function(tt) {     nm <- obj_name(tt)     print(nm)     nm }  sort_at_path(ethsort, \"RACE\", silly_name_scorer) # [1] \"WHITE\" # [1] \"BLACK OR AFRICAN AMERICAN\" # [1] \"ASIAN\" #                                    A: Drug X                B: Placebo              C: Combination      #                                 F            M            F            M            F            M      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN                       44 (62.9%)   35 (68.6%)   37 (66.1%)   31 (62.0%)   40 (65.6%)   44 (64.7%) #   A                         15 (21.4%)   12 (23.5%)   14 (25.0%)   6 (12.0%)    15 (24.6%)   16 (23.5%) #     Mean                      30.40        34.42        35.43        30.33        37.40        36.25    #   B                         16 (22.9%)   8 (15.7%)    13 (23.2%)   16 (32.0%)   10 (16.4%)   12 (17.6%) #     Mean                      33.75        34.88        32.46        30.94        33.30        35.92    #   C                         13 (18.6%)   15 (29.4%)   10 (17.9%)   9 (18.0%)    15 (24.6%)   16 (23.5%) #     Mean                      36.92        35.60        34.00        31.89        33.47        31.38    # BLACK OR AFRICAN AMERICAN   18 (25.7%)   10 (19.6%)   12 (21.4%)   12 (24.0%)   13 (21.3%)   14 (20.6%) #   A                          5 (7.1%)     1 (2.0%)     5 (8.9%)     2 (4.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      31.20        33.00        28.00        30.00        30.75        36.50    #   B                         7 (10.0%)     3 (5.9%)     3 (5.4%)     3 (6.0%)     6 (9.8%)     6 (8.8%)  #     Mean                      36.14        34.33        29.67        32.00        36.33        31.00    #   C                          6 (8.6%)    6 (11.8%)     4 (7.1%)    7 (14.0%)     3 (4.9%)     4 (5.9%)  #     Mean                      31.33        39.67        34.50        34.00        33.00        36.50    # WHITE                       8 (11.4%)    6 (11.8%)    7 (12.5%)    7 (14.0%)    8 (13.1%)    10 (14.7%) #   A                          2 (2.9%)     1 (2.0%)     3 (5.4%)     3 (6.0%)     1 (1.6%)     5 (7.4%)  #     Mean                      34.00        45.00        29.33        33.33        35.00        32.80    #   B                          4 (5.7%)     3 (5.9%)     1 (1.8%)     4 (8.0%)     3 (4.9%)     1 (1.5%)  #     Mean                      37.00        43.67        48.00        36.75        34.33        36.00    #   C                          2 (2.9%)     2 (3.9%)     3 (5.4%)     0 (0.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      35.50        44.00        44.67          NA         38.50        35.00"},{"path":"https://roche.github.io/rtables/main/articles/sorting_pruning.html","id":"sort-by-the-percent-difference-in-counts-between-genders-in-arm-c","dir":"Articles","previous_headings":"Writing Custom Pruning Criteria and Scoring Functions > Example Custom Scoring Functions","what":"Sort by the Percent Difference in Counts Between Genders in Arm C","title":"Pruning and Sorting Tables","text":"need F M percents, Arm C (.e. columns 5 6), differenced. sort strata within ethnicity percent difference counts males females arm C. statistically meaningful , fact terrible idea reorders strata seemingly () random within race, illustrates various things need inside custom sorting functions.","code":"silly_gender_diffcount <- function(tt) {     ctable <- content_table(tt) ## get summary table at this location     crow <- tree_children(ctable)[[1]] ## get first row in summary table     vals <- row_values(crow)     ## we need to have a better api for specifying location in column space but currently we don't     mcount <- vals[[6]][1]     fcount <- vals[[5]][1]     (mcount - fcount) / fcount }  sort_at_path(pruned, c(\"RACE\", \"*\", \"STRATA1\"), silly_gender_diffcount) #                                    A: Drug X                B: Placebo              C: Combination      #                                 F            M            F            M            F            M      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN                       44 (62.9%)   35 (68.6%)   37 (66.1%)   31 (62.0%)   40 (65.6%)   44 (64.7%) #   B                         16 (22.9%)   8 (15.7%)    13 (23.2%)   16 (32.0%)   10 (16.4%)   12 (17.6%) #     Mean                      33.75        34.88        32.46        30.94        33.30        35.92    #   A                         15 (21.4%)   12 (23.5%)   14 (25.0%)   6 (12.0%)    15 (24.6%)   16 (23.5%) #     Mean                      30.40        34.42        35.43        30.33        37.40        36.25    #   C                         13 (18.6%)   15 (29.4%)   10 (17.9%)   9 (18.0%)    15 (24.6%)   16 (23.5%) #     Mean                      36.92        35.60        34.00        31.89        33.47        31.38    # BLACK OR AFRICAN AMERICAN   18 (25.7%)   10 (19.6%)   12 (21.4%)   12 (24.0%)   13 (21.3%)   14 (20.6%) #   C                          6 (8.6%)    6 (11.8%)     4 (7.1%)    7 (14.0%)     3 (4.9%)     4 (5.9%)  #     Mean                      31.33        39.67        34.50        34.00        33.00        36.50    #   A                          5 (7.1%)     1 (2.0%)     5 (8.9%)     2 (4.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      31.20        33.00        28.00        30.00        30.75        36.50    #   B                         7 (10.0%)     3 (5.9%)     3 (5.4%)     3 (6.0%)     6 (9.8%)     6 (8.8%)  #     Mean                      36.14        34.33        29.67        32.00        36.33        31.00    # WHITE                       8 (11.4%)    6 (11.8%)    7 (12.5%)    7 (14.0%)    8 (13.1%)    10 (14.7%) #   A                          2 (2.9%)     1 (2.0%)     3 (5.4%)     3 (6.0%)     1 (1.6%)     5 (7.4%)  #     Mean                      34.00        45.00        29.33        33.33        35.00        32.80    #   C                          2 (2.9%)     2 (3.9%)     3 (5.4%)     0 (0.0%)     4 (6.6%)     4 (5.9%)  #     Mean                      35.50        44.00        44.67          NA         38.50        35.00    #   B                          4 (5.7%)     3 (5.9%)     1 (1.8%)     4 (8.0%)     3 (4.9%)     1 (1.5%)  #     Mean                      37.00        43.67        48.00        36.75        34.33        36.00"},{"path":"https://roche.github.io/rtables/main/articles/subsetting_tables.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Subsetting and Manipulating Table Contents","text":"TableTree objects based tree data structure name indicates. package written user need walk trees many basic table manipulations. Walking trees still necessary certain manipulation subject different vignette. vignette show methods subset tables extract cell values. use following table illustrative purposes:","code":"library(rtables) # Loading required package: magrittr # Loading required package: formatters library(dplyr) #  # Attaching package: 'dplyr' # The following objects are masked from 'package:stats': #  #     filter, lag # The following objects are masked from 'package:base': #  #     intersect, setdiff, setequal, union tbl <- basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"SEX\", split_fun = drop_split_levels) %>%   analyze(c(\"AGE\", \"STRATA1\")) %>%   build_table(ex_adsl %>% filter(SEX %in% c(\"M\", \"F\")))  tbl #             A: Drug X   B: Placebo   C: Combination # ——————————————————————————————————————————————————— # F                                                   #   AGE                                               #     Mean      32.76       34.12          35.20      #   STRATA1                                           #     A          21           24             18       #     B          25           27             21       #     C          33           26             27       # M                                                   #   AGE                                               #     Mean      35.57       37.44          35.38      #   STRATA1                                           #     A          16           19             20       #     B          21           17             21       #     C          14           19             19"},{"path":"https://roche.github.io/rtables/main/articles/subsetting_tables.html","id":"traditional-subsetting-and-modification-with","dir":"Articles","previous_headings":"","what":"Traditional Subsetting and modification with [","title":"Subsetting and Manipulating Table Contents","text":"[ [<- acessor functions operate largerly data.frame cousins: particular means label rows treated rows empty cell values, rather rows without cells multiple values can specified row column position negative numeric positions supported, though like [.data.frame mixed positive ones [ always returns class object subset unless drop = TRUE [ , drop = TRUE returns raw (possibly multi-element) value associated cell. Known Differences [.data.frame Note general result ordering unlikely structurally valid character indices treated paths, vectors names [ [<- [ accessor function always returns TableTree object drop=TRUE set. first argument row indices second argument column indices. Alternatively logical subsetting can used. indices based visible rows tree structure. : table empty cell first row label row. need access cell actual cell data: retrieve value, use drop = TRUE: One can access multiple rows columns: Note repeat label rows descending children, e.g. show first row derived AGE. order repeat content/label information one use pagination feature. Please read related vignette. Character indices interpreted paths (see ), elements matched names(tbl):","code":"tbl[1, 1] #     A: Drug X # ————————————— # F tbl[3, 1] #        A: Drug X # ———————————————— # Mean     32.76 tbl[3, 1, drop = TRUE] # [1] 32.75949 tbl[1:3, 1:2] #            A: Drug X   B: Placebo # ————————————————————————————————— # F                                 #   AGE                             #     Mean     32.76       34.12 tbl[2:4, ] #           A: Drug X   B: Placebo   C: Combination # ————————————————————————————————————————————————— # AGE                                               #   Mean      32.76       34.12          35.20      # STRATA1 tbl[,c(\"ARM\", \"A: Drug X\")] # Note: method with signature 'VTableTree#missing#ANY' chosen for function '[', #  target signature 'TableTree#missing#character'. #  \"VTableTree#ANY#character\" would also be valid #             A: Drug X # ————————————————————— # F                     #   AGE                 #     Mean      32.76   #   STRATA1             #     A          21     #     B          25     #     C          33     # M                     #   AGE                 #     Mean      35.57   #   STRATA1             #     A          16     #     B          21     #     C          14"},{"path":"https://roche.github.io/rtables/main/articles/subsetting_tables.html","id":"path-based-cell-value-accessing","dir":"Articles","previous_headings":"","what":"Path Based Cell Value Accessing:","title":"Subsetting and Manipulating Table Contents","text":"Tables can subset modified structurally aware manner via pathing. Paths define semantically meaningful positions within constructed table correspond logic layout used create . path ordered set split names, names subgroups generated split, @content directive, steps position’s content (row group summary) table. can see row column paths existing table via row_paths(), col_paths(), row_paths_summary(), col_paths_summary(), functions, portion general make_row_df() function output. column paths follows: row paths follows: get semantically meaningful subset table, , can use [ (tt_at_path() underlies ) cal also retrieve individual cell-values via value_at() convenience function, takes pair row column paths resolve together individual cell, e.g. average age asian femal patients arm : can also request information non-cell specific paths cell_values() function: Note return value cell_values() always list even specify path cell:","code":"tbl2 <- basic_table() %>%   split_cols_by(\"ARM\") %>%     split_cols_by(\"SEX\", split_fun = drop_split_levels) %>%     split_rows_by(\"RACE\", split_fun = drop_split_levels) %>%     summarize_row_groups() %>%     analyze(c(\"AGE\", \"STRATA1\")) %>%     build_table(ex_adsl %>% filter(SEX %in% c(\"M\", \"F\") &                                    RACE %in% (levels(RACE)[1:3])))  tbl2 #                                    A: Drug X                B: Placebo              C: Combination      #                                 F            M            F            M            F            M      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN                       41 (53.9%)   25 (54.3%)   36 (52.2%)   30 (60.0%)   39 (60.9%)   32 (57.1%) #   AGE                                                                                                   #     Mean                      31.22        34.60        35.06        38.63        36.44        37.66    #   STRATA1                                                                                               #     A                           11           10           14           10           11           7      #     B                           11           9            15           7            11           14     #     C                           19           6            7            13           17           11     # BLACK OR AFRICAN AMERICAN   18 (23.7%)   12 (26.1%)   16 (23.2%)   12 (24.0%)   14 (21.9%)   14 (25.0%) #   AGE                                                                                                   #     Mean                      34.06        34.58        33.88        36.33        33.21        34.21    #   STRATA1                                                                                               #     A                           5            2            5            6            3            7      #     B                           6            5            3            4            4            4      #     C                           7            5            8            2            7            3      # WHITE                       17 (22.4%)   9 (19.6%)    17 (24.6%)   8 (16.0%)    11 (17.2%)   10 (17.9%) #   AGE                                                                                                   #     Mean                      34.12        40.00        32.41        34.62        33.00        30.80    #   STRATA1                                                                                               #     A                           5            3            3            3            3            5      #     B                           5            4            8            4            5            2      #     C                           7            2            6            1            3            3 col_paths_summary(tbl2) # label             path                        # ————————————————————————————————————————————— # A: Drug X         ARM, A: Drug X              #   F               ARM, A: Drug X, SEX, F      #   M               ARM, A: Drug X, SEX, M      # B: Placebo        ARM, B: Placebo             #   F               ARM, B: Placebo, SEX, F     #   M               ARM, B: Placebo, SEX, M     # C: Combination    ARM, C: Combination         #   F               ARM, C: Combination, SEX, F #   M               ARM, C: Combination, SEX, M row_paths_summary(tbl2) # rowname                      node_class    path                                                                 # ——————————————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN                        ContentRow    RACE, ASIAN, @content, ASIAN                                         #   AGE                        LabelRow      RACE, ASIAN, AGE                                                     #     Mean                     DataRow       RACE, ASIAN, AGE, Mean                                               #   STRATA1                    LabelRow      RACE, ASIAN, STRATA1                                                 #     A                        DataRow       RACE, ASIAN, STRATA1, A                                              #     B                        DataRow       RACE, ASIAN, STRATA1, B                                              #     C                        DataRow       RACE, ASIAN, STRATA1, C                                              # BLACK OR AFRICAN AMERICAN    ContentRow    RACE, BLACK OR AFRICAN AMERICAN, @content, BLACK OR AFRICAN AMERICAN #   AGE                        LabelRow      RACE, BLACK OR AFRICAN AMERICAN, AGE                                 #     Mean                     DataRow       RACE, BLACK OR AFRICAN AMERICAN, AGE, Mean                           #   STRATA1                    LabelRow      RACE, BLACK OR AFRICAN AMERICAN, STRATA1                             #     A                        DataRow       RACE, BLACK OR AFRICAN AMERICAN, STRATA1, A                          #     B                        DataRow       RACE, BLACK OR AFRICAN AMERICAN, STRATA1, B                          #     C                        DataRow       RACE, BLACK OR AFRICAN AMERICAN, STRATA1, C                          # WHITE                        ContentRow    RACE, WHITE, @content, WHITE                                         #   AGE                        LabelRow      RACE, WHITE, AGE                                                     #     Mean                     DataRow       RACE, WHITE, AGE, Mean                                               #   STRATA1                    LabelRow      RACE, WHITE, STRATA1                                                 #     A                        DataRow       RACE, WHITE, STRATA1, A                                              #     B                        DataRow       RACE, WHITE, STRATA1, B                                              #     C                        DataRow       RACE, WHITE, STRATA1, C tbl2[c(\"RACE\", \"ASIAN\"), c(\"ARM\", \"C: Combination\")] #                 C: Combination      #                 F            M      # ——————————————————————————————————— # ASIAN       39 (60.9%)   32 (57.1%) #   AGE                               #     Mean      36.44        37.66    #   STRATA1                           #     A           11           7      #     B           11           14     #     C           17           11 value_at(tbl2, c(\"RACE\", \"ASIAN\", \"AGE\",  \"Mean\"), c(\"ARM\", \"A: Drug X\", \"SEX\", \"F\")) # [1] 31.21951 cell_values(tbl2, c(\"RACE\", \"ASIAN\", \"AGE\", \"Mean\"), c(\"ARM\", \"A: Drug X\")) # $`A: Drug X.F` # [1] 31.21951 #  # $`A: Drug X.M` # [1] 34.6 cell_values(tbl2, c(\"RACE\", \"ASIAN\", \"AGE\",  \"Mean\"), c(\"ARM\", \"A: Drug X\", \"SEX\", \"F\")) # $`A: Drug X.F` # [1] 31.21951"},{"path":"https://roche.github.io/rtables/main/articles/tabulation_concepts.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Tabulation Concepts","text":"vignette introduce theory behind using layouts table creation. Much theory also holds true using vignette use following packages: data use following one created random number generators:","code":"library(dplyr) #  # Attaching package: 'dplyr' # The following objects are masked from 'package:stats': #  #     filter, lag # The following objects are masked from 'package:base': #  #     intersect, setdiff, setequal, union library(tibble) library(rtables) # Loading required package: magrittr # Loading required package: formatters add_subgroup <- function(x) paste0(tolower(x), sample(1:3, length(x), TRUE))  set.seed(1)  df <- tibble(   x = rnorm(100),   c1 = factor(sample(c(\"A\", \"B\", \"C\"), 100, replace = TRUE), levels = c(\"A\", \"B\", \"C\")),   r1 = factor(sample(c(\"U\", \"V\", \"W\"), 100, replace = TRUE), levels = c(\"U\", \"V\", \"W\")) ) %>%   mutate(     c2 = add_subgroup(c1),     r2 = add_subgroup(r1),     y = as.numeric(2 * as.numeric(c1) - 3 * as.numeric(r1))   ) %>%     select(c1, c2, r1, r2, x, y)  df # # A tibble: 100 × 6 #    c1    c2    r1    r2         x     y #    <fct> <chr> <fct> <chr>  <dbl> <dbl> #  1 B     b2    U     u3    -0.626     1 #  2 A     a3    V     v2     0.184    -4 #  3 B     b1    V     v2    -0.836    -2 #  4 B     b3    V     v2     1.60     -2 #  5 B     b1    U     u1     0.330     1 #  6 C     c1    U     u3    -0.820     3 #  7 A     a3    U     u3     0.487    -1 #  8 B     b1    U     u3     0.738     1 #  9 C     c3    V     v2     0.576     0 # 10 C     c3    U     u2    -0.305     3 # # … with 90 more rows"},{"path":"https://roche.github.io/rtables/main/articles/tabulation_concepts.html","id":"building-a-table-row-by-row","dir":"Articles","previous_headings":"","what":"Building A Table Row By Row","title":"Tabulation Concepts","text":"Let’s look table 3 columns 3 rows. row represents different analysis (functions foo, bar, zoo return rcell() object): data passed analysis functions subset defined respective column : Let’s concrete data analyze(): wanted x variable instead data frame: function passed afun evaluated using argument matching, afun argument x analysis variable specified vars analyze() passed function afun argument df set subset dataset passed afun. , Note also possible function returns multiple rows in_rows() recommend specify row names explicitly.","code":"A         B         C ------------------------------------------------ foo_label        foo(df_A)  foo(df_B)  foo(df_C) bar_label        bar(df_A)  bar(df_B)  bar(df_C) zoo_label        zoo(df_A)  zoo(df_B)  zoo(df_C) df_A <- df %>% filter(c1 == \"A\") df_B <- df %>% filter(c1 == \"B\") df_C <- df %>% filter(c1 == \"C\") foo <- prod bar <- sum zoo <- mean  basic_table() %>%   split_cols_by(\"c1\") %>%   analyze(\"x\", function(df) foo(df$x), var_labels = \"foo label\", format = \"xx.xx\") %>%   analyze(\"x\", function(df) bar(df$x), var_labels = \"bar label\", format = \"xx.xx\") %>%   analyze(\"x\", function(df) zoo(df$x), var_labels = \"zoo label\", format = \"xx.xx\") %>%   build_table(df) # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: root #                A       B       C   # —————————————————————————————————— # foo label                          #   foo label   0.00   -0.00   -0.00 # bar label                          #   bar label   1.87   4.37    4.64  # zoo label                          #   zoo label   0.05   0.13    0.18 A         B         C ------------------------------------------------ foo_label        foo(x_A)  foo(x_B)  foo(x_C) bar_label        bar(x_A)  bar(x_B)  bar(x_C) zoo_label        zoo(x_A)  zoo(x_B)  zoo(x_C) x_A <- df_A$x x_B <- df_B$x x_C <- df_C$x basic_table() %>%   split_cols_by(\"c1\") %>%   analyze(\"x\", foo, var_labels = \"foo label\", format = \"xx.xx\") %>%   analyze(\"x\", bar, var_labels = \"bar label\", format = \"xx.xx\") %>%   analyze(\"x\", zoo, var_labels = \"zoo label\", format = \"xx.xx\") %>%   build_table(df) # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: root #              A       B       C   # ———————————————————————————————— # foo label                        #   foo       0.00   -0.00   -0.00 # bar label                        #   bar       1.87   4.37    4.64  # zoo label                        #   zoo       0.05   0.13    0.18 basic_table() %>%   split_cols_by(\"c1\") %>%   analyze(\"x\", function(x) {     in_rows(       \"row 1\" = rcell(mean(x), format = \"xx.xx\"),       \"row 2\" = rcell(sd(x), format = \"xx.xxx\")     )   }, var_labels = \"foo label\") %>%   analyze(\"x\", function(x) {     in_rows(       \"more rows 1\" =  rcell(median(x), format = \"xx.x\"),       \"even more rows 1\" = rcell(IQR(x), format = \"xx.xx\")     )   }, var_labels = \"bar label\", format = \"xx.xx\") %>%   build_table(df) # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: root #                        A       B       C   # —————————————————————————————————————————— # foo label                                  #   row 1              0.05    0.13    0.18  #   row 2              0.985   0.815   0.890 # bar label                                  #   more rows 1        -0.0     0.2     0.3  #   even more rows 1   1.20    1.15    1.16"},{"path":"https://roche.github.io/rtables/main/articles/tabulation_concepts.html","id":"tabulation-with-row-structure","dir":"Articles","previous_headings":"","what":"Tabulation With Row Structure","title":"Tabulation Concepts","text":"Let’s say like create following table: df_* subsets df follows: note df_* class df, .e. tibbles. Hence foo aggregates subset data cell value. Given function foo (ignore ... now): can start calculating cell values individually: Now still missing table structure: rtables type tabulation done layouts want see foo label use now row labels disappeared. cfun needs define ’s row label. let’s redefine foo:","code":"A         B         C -------------------------------------- U        foo(df_UA)  foo(df_UB)  foo(df_UC) V        foo(df_VA)  foo(df_VB)  foo(df_VC) W        foo(df_WA)  foo(df_WB)  foo(df_WC) df_UA <- df %>% filter(r1 == \"U\", c1 == \"A\") df_VA <- df %>% filter(r1 == \"V\", c1 == \"A\") df_WA <- df %>% filter(r1 == \"W\", c1 == \"A\") df_UB <- df %>% filter(r1 == \"U\", c1 == \"B\") df_VB <- df %>% filter(r1 == \"V\", c1 == \"B\") df_WB <- df %>% filter(r1 == \"W\", c1 == \"C\") df_UC <- df %>% filter(r1 == \"U\", c1 == \"C\") df_VC <- df %>% filter(r1 == \"V\", c1 == \"C\") df_WC <- df %>% filter(r1 == \"W\", c1 == \"C\") foo <- function(df, labelstr = \"\", ...) {   paste(dim(df), collapse = \" x \") } foo(df_UA) # [1] \"17 x 6\" foo(df_VA) # [1] \"9 x 6\" foo(df_WA) # [1] \"14 x 6\" foo(df_UB) # [1] \"13 x 6\" foo(df_VB) # [1] \"15 x 6\" foo(df_WB) # [1] \"11 x 6\" foo(df_UC) # [1] \"10 x 6\" foo(df_VC) # [1] \"5 x 6\" foo(df_WC) # [1] \"11 x 6\" matrix(   list(     foo(df_UA),     foo(df_VA),     foo(df_WA),     foo(df_UB),     foo(df_VB),     foo(df_WB),     foo(df_UC),     foo(df_VC),     foo(df_WC)   ),   byrow = FALSE, ncol = 3 ) #      [,1]     [,2]     [,3]     # [1,] \"17 x 6\" \"13 x 6\" \"10 x 6\" # [2,] \"9 x 6\"  \"15 x 6\" \"5 x 6\"  # [3,] \"14 x 6\" \"11 x 6\" \"11 x 6\" basic_table() %>%   split_cols_by(\"c1\") %>%   split_rows_by(\"r1\") %>%   analyze(\"x\", foo) %>%   build_table(df) #           A        B        C    # ———————————————————————————————— # U                                #   foo   17 x 6   13 x 6   10 x 6 # V                                #   foo   9 x 6    15 x 6   5 x 6  # W                                #   foo   14 x 6   6 x 6    11 x 6 basic_table() %>%   split_cols_by(\"c1\") %>%   split_rows_by(\"r1\") %>%   summarize_row_groups(cfun = foo, format = \"xx\") %>%   build_table(df) #      A        B        C    # ——————————————————————————— #    17 x 6   13 x 6   10 x 6 #    9 x 6    15 x 6   5 x 6  #    14 x 6   6 x 6    11 x 6 foo <- function(df, labelstr) {   rcell(paste(dim(df), collapse = \" x \"), format = \"xx\", label = labelstr) }  basic_table() %>%   split_cols_by(\"c1\") %>%   split_rows_by(\"r1\") %>%   summarize_row_groups(cfun = foo) %>%   build_table(df) #       A        B        C    # ———————————————————————————— # U   17 x 6   13 x 6   10 x 6 # V   9 x 6    15 x 6   5 x 6  # W   14 x 6   6 x 6    11 x 6"},{"path":"https://roche.github.io/rtables/main/articles/tabulation_concepts.html","id":"calculating-the-mean","dir":"Articles","previous_headings":"Tabulation With Row Structure","what":"Calculating the Mean","title":"Tabulation Concepts","text":"lets calculate mean df$y pattern . Note foo variable information hard encoded function body. Let’s try alternatives returning analyze(): note subset y variable passed x argument mean(). also get data.frame instead variable: contrast : function receives subset y.","code":"foo <- function(df, labelstr) {   rcell(mean(df$y), label = labelstr, format = \"xx.xx\") }  basic_table() %>%   split_cols_by(\"c1\") %>%   split_rows_by(\"r1\") %>%   summarize_row_groups(cfun = foo) %>%   build_table(df) #       A       B       C   # ————————————————————————— # U   -1.00   1.00    3.00  # V   -4.00   -2.00   0.00  # W   -7.00   -5.00   -3.00 basic_table() %>%   split_cols_by(\"c1\") %>%   split_rows_by(\"r1\") %>%   analyze(\"y\", afun = mean) %>%   build_table(df) #          A    B    C  # ————————————————————— # U                     #   mean   -1   1    3  # V                     #   mean   -4   -2   0  # W                     #   mean   -7   -5   -3 basic_table() %>%   split_cols_by(\"c1\") %>%   split_rows_by(\"r1\") %>%   analyze(\"y\", afun = function(df) mean(df$y)) %>%   build_table(df) #       A    B    C  # —————————————————— # U                  #   y   -1   1    3  # V                  #   y   -4   -2   0  # W                  #   y   -7   -5   -3 basic_table() %>%   split_cols_by(\"c1\") %>%   split_rows_by(\"r1\") %>%   analyze(\"y\", afun = function(x) mean(x)) %>%   build_table(df) #       A    B    C  # —————————————————— # U                  #   y   -1   1    3  # V                  #   y   -4   -2   0  # W                  #   y   -7   -5   -3"},{"path":"https://roche.github.io/rtables/main/articles/tabulation_concepts.html","id":"group-summaries","dir":"Articles","previous_headings":"Tabulation With Row Structure","what":"Group Summaries","title":"Tabulation Concepts","text":"Pattern interesting one can add row structure (splits). Consider following table: <> represents data represented cell. cell U > u1, subset: . can get table follows: , wanted calculate two summaries per row split: following structure: rows U, u1, u2, …, W, w1, w2, w3 label rows rows (mean_sd range data rows). Currently content rows table. Content rows summarize data defined splitting (.e. V > v1, B). wanted add content row r2 split level get: s_cfun_2 content function either returns one row via rcell() multiple rows via in_rows(). data represented <> content rows data ’s descendant, .e. U > u1, content row cell df %>% filter(r1 == \"U\", r2 == \"u1\", c1 == \"\"). Note content functions cfun operate data frames vectors/variables must take df argument. , cfun must also labelstr argument split level. way, cfun can define row name. order get table can use layout framework follows: manner, wanted content rows r1 split can follows: pagination content rows label rows get repeated page split descendant content row. example, split following table *** : get following two tables: ","code":"A         B         C -------------------------------------- U   u1     foo(<>)  foo(<>)  foo(<>)   u2     foo(<>)  foo(<>)  foo(<>)   u3     foo(<>)  foo(<>)  foo(<>) V   v1     foo(<>)  foo(<>)  foo(<>)   v2     foo(<>)  foo(<>)  foo(<>)   v3     foo(<>)  foo(<>)  foo(<>) W   w1     foo(<>)  foo(<>)  foo(<>)   w2     foo(<>)  foo(<>)  foo(<>)   w3     foo(<>)  foo(<>)  foo(<>) df %>%   filter(r1 == \"U\", r2 == \"u1\", c1 == \"A\") # # A tibble: 2 × 6 #   c1    c2    r1    r2        x     y #   <fct> <chr> <fct> <chr> <dbl> <dbl> # 1 A     a2    U     u1    1.12     -1 # 2 A     a1    U     u1    0.594    -1 basic_table() %>%   split_cols_by(\"c1\") %>%   split_rows_by(\"r1\") %>%   split_rows_by(\"r2\") %>%   summarize_row_groups(cfun = function(df, labelstr) {     rcell(mean(df$x), format = \"xx.xx\", label = paste(\"mean x for\", labelstr))   }) %>%   build_table(df) #                     A       B       C   # ——————————————————————————————————————— # U                                       #   mean x for u3   -0.04   0.36    -0.25 #   mean x for u1   0.86    0.32     NA   #   mean x for u2   -0.28   0.38    0.08  # V                                       #   mean x for v2   0.01    0.55    0.60  #   mean x for v3   -0.03   -0.30   1.06  #   mean x for v1   0.56    -0.27   -0.54 # W                                       #   mean x for w1   -0.58   0.42    0.67  #   mean x for w3   0.56    0.69    -0.39 #   mean x for w2   -1.99   -0.10   0.53 s_mean_sd <- function(x) {   in_rows(\"mean (sd)\" = rcell(c(mean(x), sd(x)), format = \"xx.xx (xx.xx)\")) }  s_range <- function(x) {   in_rows(\"range\" = rcell(range(x), format = \"xx.xx - xx.xx\")) }  basic_table() %>%   split_cols_by(\"c1\") %>%   split_rows_by(\"r1\") %>%   split_rows_by(\"r2\") %>%   analyze(\"x\", s_mean_sd, show_labels = \"hidden\") %>%   analyze(\"x\", s_range, show_labels = \"hidden\") %>%   build_table(df) # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[U]->r2[u3] # Warning in min(x): no non-missing arguments to min; returning Inf # Warning in max(x): no non-missing arguments to max; returning -Inf # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[U]->r2[u1] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[U]->r2[u2] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[V]->r2[v2] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[V]->r2[v3] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[V]->r2[v1] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[W]->r2[w1] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[W]->r2[w3] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[W]->r2[w2] #                       A              B              C       # ——————————————————————————————————————————————————————————— # U                                                           #   u3                                                        #     mean (sd)   -0.04 (1.18)    0.36 (1.41)    -0.25 (0.72) #     range       -1.80 - 1.47    -1.28 - 2.40   -0.82 - 0.56 #   u1                                                        #     mean (sd)    0.86 (0.38)    0.32 (0.51)         NA      #     range        0.59 - 1.12    -0.48 - 0.94    Inf - -Inf  #   u2                                                        #     mean (sd)   -0.28 (0.96)    0.38 (0.67)    0.08 (0.91)  #     range       -1.52 - 1.43    -0.39 - 0.82   -0.93 - 1.51 # V                                                           #   v2                                                        #     mean (sd)    0.01 (0.25)    0.55 (1.14)    0.60 (0.03)  #     range       -0.16 - 0.18    -0.84 - 1.60   0.58 - 0.62  #   v3                                                        #     mean (sd)   -0.03 (0.37)    -0.30 (0.36)    1.06 (NA)   #     range       -0.41 - 0.33    -0.62 - 0.03   1.06 - 1.06  #   v1                                                        #     mean (sd)    0.56 (1.10)    -0.27 (0.73)   -0.54 (1.18) #     range       -0.16 - 2.17    -1.22 - 0.59   -1.38 - 0.29 # W                                                           #   w1                                                        #     mean (sd)   -0.58 (0.85)     0.42 (NA)     0.67 (0.39)  #     range       -1.25 - 0.61    0.42 - 0.42    0.37 - 1.21  #   w3                                                        #     mean (sd)    0.56 (0.85)     0.69 (NA)     -0.39 (1.68) #     range       -0.71 - 1.98    0.69 - 0.69    -2.21 - 1.10 #   w2                                                        #     mean (sd)    -1.99 (NA)     -0.10 (0.47)   0.53 (0.60)  #     range       -1.99 - -1.99   -0.61 - 0.39   -0.10 - 1.16 A              B              C --------------------------------------------------------- U   u1      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)   u2      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)   u3      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>) V   v1      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)   v2      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)   v3      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>) W   w1      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)   w2      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)   w3      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>) A              B              C --------------------------------------------------------- U   u1          s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)   u2          s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)   u3          s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>) V   v1          s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)   v2          s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)   v3          s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>) W   w1          s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)   w2          s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)   w3          s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>) s_mean_sd <- function(x) {   in_rows(\"mean (sd)\" = rcell(c(mean(x), sd(x)), format = \"xx.xx (xx.xx)\")) }  s_range <- function(x) {   in_rows(\"range\" = rcell(range(x), format = \"xx.xx - xx.xx\")) }  s_cfun_2 <- function(df, labelstr) {   rcell(nrow(df), format = \"xx\", label = paste(labelstr, \"(n)\")) }   basic_table() %>%   split_cols_by(\"c1\") %>%   split_rows_by(\"r1\") %>%   split_rows_by(\"r2\") %>%   summarize_row_groups(cfun = s_cfun_2) %>%   analyze(\"x\", s_mean_sd, show_labels = \"hidden\") %>%   analyze(\"x\", s_range, show_labels = \"hidden\") %>%   build_table(df) # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[U]->r2[u3] # Warning in min(x): no non-missing arguments to min; returning Inf # Warning in max(x): no non-missing arguments to max; returning -Inf # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[U]->r2[u1] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[U]->r2[u2] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[V]->r2[v2] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[V]->r2[v3] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[V]->r2[v1] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[W]->r2[w1] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[W]->r2[w3] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[W]->r2[w2] #                       A              B              C       # ——————————————————————————————————————————————————————————— # U                                                           #   u3 (n)              6              5              3       #     mean (sd)   -0.04 (1.18)    0.36 (1.41)    -0.25 (0.72) #     range       -1.80 - 1.47    -1.28 - 2.40   -0.82 - 0.56 #   u1 (n)              2              5              0       #     mean (sd)    0.86 (0.38)    0.32 (0.51)         NA      #     range        0.59 - 1.12    -0.48 - 0.94    Inf - -Inf  #   u2 (n)              9              3              7       #     mean (sd)   -0.28 (0.96)    0.38 (0.67)    0.08 (0.91)  #     range       -1.52 - 1.43    -0.39 - 0.82   -0.93 - 1.51 # V                                                           #   v2 (n)              2              4              2       #     mean (sd)    0.01 (0.25)    0.55 (1.14)    0.60 (0.03)  #     range       -0.16 - 0.18    -0.84 - 1.60   0.58 - 0.62  #   v3 (n)              3              4              1       #     mean (sd)   -0.03 (0.37)    -0.30 (0.36)    1.06 (NA)   #     range       -0.41 - 0.33    -0.62 - 0.03   1.06 - 1.06  #   v1 (n)              4              7              2       #     mean (sd)    0.56 (1.10)    -0.27 (0.73)   -0.54 (1.18) #     range       -0.16 - 2.17    -1.22 - 0.59   -1.38 - 0.29 # W                                                           #   w1 (n)              4              1              4       #     mean (sd)   -0.58 (0.85)     0.42 (NA)     0.67 (0.39)  #     range       -1.25 - 0.61    0.42 - 0.42    0.37 - 1.21  #   w3 (n)              9              1              3       #     mean (sd)    0.56 (0.85)     0.69 (NA)     -0.39 (1.68) #     range       -0.71 - 1.98    0.69 - 0.69    -2.21 - 1.10 #   w2 (n)              1              4              4       #     mean (sd)    -1.99 (NA)     -0.10 (0.47)   0.53 (0.60)  #     range       -1.99 - -1.99   -0.61 - 0.39   -0.10 - 1.16 basic_table() %>%   split_cols_by(\"c1\") %>%   split_rows_by(\"r1\") %>%   summarize_row_groups(cfun = s_cfun_2) %>%   split_rows_by(\"r2\") %>%   summarize_row_groups(cfun = s_cfun_2) %>%   analyze(\"x\", s_mean_sd, show_labels = \"hidden\") %>%   analyze(\"x\", s_range, show_labels = \"hidden\") %>%   build_table(df) # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[U]->r2[u3] # Warning in min(x): no non-missing arguments to min; returning Inf # Warning in max(x): no non-missing arguments to max; returning -Inf # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[U]->r2[u1] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[U]->r2[u2] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[V]->r2[v2] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[V]->r2[v3] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[V]->r2[v1] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[W]->r2[w1] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[W]->r2[w3] # Warning: Non-unique sibling analysis table names. Using Labels instead. Use the table_names argument to analyze to avoid this when analyzing the same variable multiple times. #   occured at (row) path: r1[W]->r2[w2] #                       A              B              C       # ——————————————————————————————————————————————————————————— # U (n)                17              13             10      #   u3 (n)              6              5              3       #     mean (sd)   -0.04 (1.18)    0.36 (1.41)    -0.25 (0.72) #     range       -1.80 - 1.47    -1.28 - 2.40   -0.82 - 0.56 #   u1 (n)              2              5              0       #     mean (sd)    0.86 (0.38)    0.32 (0.51)         NA      #     range        0.59 - 1.12    -0.48 - 0.94    Inf - -Inf  #   u2 (n)              9              3              7       #     mean (sd)   -0.28 (0.96)    0.38 (0.67)    0.08 (0.91)  #     range       -1.52 - 1.43    -0.39 - 0.82   -0.93 - 1.51 # V (n)                 9              15             5       #   v2 (n)              2              4              2       #     mean (sd)    0.01 (0.25)    0.55 (1.14)    0.60 (0.03)  #     range       -0.16 - 0.18    -0.84 - 1.60   0.58 - 0.62  #   v3 (n)              3              4              1       #     mean (sd)   -0.03 (0.37)    -0.30 (0.36)    1.06 (NA)   #     range       -0.41 - 0.33    -0.62 - 0.03   1.06 - 1.06  #   v1 (n)              4              7              2       #     mean (sd)    0.56 (1.10)    -0.27 (0.73)   -0.54 (1.18) #     range       -0.16 - 2.17    -1.22 - 0.59   -1.38 - 0.29 # W (n)                14              6              11      #   w1 (n)              4              1              4       #     mean (sd)   -0.58 (0.85)     0.42 (NA)     0.67 (0.39)  #     range       -1.25 - 0.61    0.42 - 0.42    0.37 - 1.21  #   w3 (n)              9              1              3       #     mean (sd)    0.56 (0.85)     0.69 (NA)     -0.39 (1.68) #     range       -0.71 - 1.98    0.69 - 0.69    -2.21 - 1.10 #   w2 (n)              1              4              4       #     mean (sd)    -1.99 (NA)     -0.10 (0.47)   0.53 (0.60)  #     range       -1.99 - -1.99   -0.61 - 0.39   -0.10 - 1.16 A              B              C --------------------------------------------------------- U   u1 (n)      s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>) ***      range    s_range(<>)    s_range(<>)    s_range(<>)   u2 (n)      s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>) A              B              C --------------------------------------------------------- U   u1 (n)      s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>) A              B              C --------------------------------------------------------- U   u1 (n)      s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)   u2 (n)      s_cfun_2(<>)   s_cfun_2(<>)   s_cfun_2(<>)      mean_sd  s_mean_sd(<>)  s_mean_sd(<>)  s_mean_sd(<>)      range    s_range(<>)    s_range(<>)    s_range(<>)"},{"path":"https://roche.github.io/rtables/main/articles/tabulation_concepts.html","id":"pattern-iii","dir":"Articles","previous_headings":"Tabulation With Row Structure","what":"Pattern III","title":"Tabulation Concepts","text":"Let’s consider following tabulation pattern: discuss future release rtables.","code":"A         B         C ------------------------------------------------ label 1        foo(x_A)  bar(x_B)  zoo(x_C) label 2        foo(x_A)  bar(x_B)  zoo(x_C) label 3        foo(x_A)  bar(x_B)  zoo(x_C)"},{"path":"https://roche.github.io/rtables/main/articles/tabulation_dplyr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Comparison with `dplyr` Tabulation","text":"vignette like discuss similarities differences dplyr rtable. Much rtables framework focuses tabulation/summarizing data visualization table. vignette focus summarizing data using dplyr contrast rtables. won’t pay attention table visualization/markup just derive cell content. Using dplyr summarize data gt visualize table good way tabulation certain nature complexity. However, tables table created introduction vignette take effort create dplyr. Part effort due fact using dplyr table data stored data.frames tibbles natural way represent table show vignette. know elegant way deriving table content dplyr please let us know update vignette. table data used introduction vignette:","code":"library(rtables) library(dplyr) n <- 400  set.seed(1)  df <- tibble(   arm = factor(sample(c(\"Arm A\", \"Arm B\"), n, replace = TRUE), levels = c(\"Arm A\", \"Arm B\")),   country = factor(sample(c(\"CAN\", \"USA\"), n, replace = TRUE, prob = c(.55, .45)), levels = c(\"CAN\", \"USA\")),   gender = factor(sample(c(\"Female\", \"Male\"), n, replace = TRUE), levels = c(\"Female\", \"Male\")),   handed = factor(sample(c(\"Left\", \"Right\"), n, prob = c(.6, .4), replace = TRUE), levels = c(\"Left\", \"Right\")),   age = rchisq(n, 30) + 10 ) %>% mutate(   weight = 35 * rnorm(n, sd = .5) + ifelse(gender == \"Female\", 140, 180) )  basic_table() %>%   split_cols_by(\"arm\") %>%   split_cols_by(\"gender\") %>%   add_colcounts() %>%   split_rows_by(\"country\") %>%   summarize_row_groups() %>%   split_rows_by(\"handed\") %>%   summarize_row_groups() %>%   analyze(\"age\", afun = mean, format = \"xx.x\") %>%   build_table(df) #                     Arm A                     Arm B          #              Female        Male        Female        Male    #              (N=96)      (N=105)       (N=92)      (N=107)   # ———————————————————————————————————————————————————————————— # CAN        45 (46.9%)   64 (61.0%)   46 (50.0%)   62 (57.9%) #   Left     32 (33.3%)   42 (40.0%)   26 (28.3%)   37 (34.6%) #     mean      38.9         40.4         40.3         37.7    #   Right    13 (13.5%)   22 (21.0%)   20 (21.7%)   25 (23.4%) #     mean      36.6         40.2         40.2         40.6    # USA        51 (53.1%)   41 (39.0%)   46 (50.0%)   45 (42.1%) #   Left     34 (35.4%)   19 (18.1%)   25 (27.2%)   25 (23.4%) #     mean      40.4         39.7         39.2         40.1    #   Right    17 (17.7%)   22 (21.0%)   21 (22.8%)   20 (18.7%) #     mean      36.9         39.8         38.5         39.0"},{"path":"https://roche.github.io/rtables/main/articles/tabulation_dplyr.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Comparison with `dplyr` Tabulation","text":"start deriving first data cell row 3 (note, row 1 2 content cells, see introduction vignette). Cell 3,1 contains mean age left handed & female Canadians “Arm ”: dplyr: , dplyr gives us verbs easily get average age left handed Canadians group defined 4 columns: can get average age cell values : rtable syntax need following code get content: mentioned introduction vignette, please ignore difference arranging formatting data: ’s possible condense rtable possible make tibble look like reference table using gt R package. terms tabulation example arguably much added rtables dplyr.","code":"mean(df$age[df$country == \"CAN\" & df$arm == \"Arm A\" & df$gender == \"Female\" & df$handed == \"Left\"]) # [1] 38.86979 df %>%   filter(country == \"CAN\", arm == \"Arm A\", gender == \"Female\", handed == \"Left\") %>%   summarise(mean_age = mean(age)) # # A tibble: 1 × 1 #   mean_age #      <dbl> # 1     38.9 df %>%   group_by(arm, gender) %>%   filter(country == \"CAN\", handed == \"Left\") %>%   summarise(mean_age = mean(age)) # `summarise()` has grouped output by 'arm'. You can override using the `.groups` # argument. # # A tibble: 4 × 3 # # Groups:   arm [2] #   arm   gender mean_age #   <fct> <fct>     <dbl> # 1 Arm A Female     38.9 # 2 Arm A Male       40.4 # 3 Arm B Female     40.3 # 4 Arm B Male       37.7 average_age <- df %>%   group_by(arm, gender, country, handed) %>%   summarise(mean_age = mean(age)) # `summarise()` has grouped output by 'arm', 'gender', 'country'. You can # override using the `.groups` argument. average_age # # A tibble: 16 × 5 # # Groups:   arm, gender, country [8] #    arm   gender country handed mean_age #    <fct> <fct>  <fct>   <fct>     <dbl> #  1 Arm A Female CAN     Left       38.9 #  2 Arm A Female CAN     Right      36.6 #  3 Arm A Female USA     Left       40.4 #  4 Arm A Female USA     Right      36.9 #  5 Arm A Male   CAN     Left       40.4 #  6 Arm A Male   CAN     Right      40.2 #  7 Arm A Male   USA     Left       39.7 #  8 Arm A Male   USA     Right      39.8 #  9 Arm B Female CAN     Left       40.3 # 10 Arm B Female CAN     Right      40.2 # 11 Arm B Female USA     Left       39.2 # 12 Arm B Female USA     Right      38.5 # 13 Arm B Male   CAN     Left       37.7 # 14 Arm B Male   CAN     Right      40.6 # 15 Arm B Male   USA     Left       40.1 # 16 Arm B Male   USA     Right      39.0 basic_table() %>%   split_cols_by(\"arm\") %>%   split_cols_by(\"gender\") %>%   split_rows_by(\"country\") %>%   split_rows_by(\"handed\") %>%   analyze(\"age\", afun = mean, format = \"xx.x\") %>%   build_table(df) #                Arm A           Arm B     #            Female   Male   Female   Male # ———————————————————————————————————————— # CAN                                      #   Left                                   #     mean    38.9    40.4    40.3    37.7 #   Right                                  #     mean    36.6    40.2    40.2    40.6 # USA                                      #   Left                                   #     mean    40.4    39.7    39.2    40.1 #   Right                                  #     mean    36.9    39.8    38.5    39.0"},{"path":"https://roche.github.io/rtables/main/articles/tabulation_dplyr.html","id":"content-information","dir":"Articles","previous_headings":"","what":"Content Information","title":"Comparison with `dplyr` Tabulation","text":"Unlike rtables different levels summarization discrete computations dplyr need combine first focus count percentage information handedness within country (arm-gender pair), along analysis row mean values: 16 rows (cells) like average_age data frame defined . Next, derive group information countries: Finally, left_join() two levels summary get data.frame containing full set values make body table (note, however, order): Alternatively, calculate counts c_h_df, use mutate() left_join() divide counts n_col values naturally calculated within c_df. simplify c_h_df’s creation somewhat requiring explicit ungroup(), prevents level summarization self-contained set computations. rtables call contrast : can now spotcheck values , rtable syntax hopefully also become bit straightforward derive cell values dplyr particular table.","code":"c_h_df <- df %>%   group_by(arm, gender, country, handed) %>%     summarize(mean = mean(age), c_h_count = n()) %>%     ## we need the sum below to *not* be by country, so that we're dividing by the column counts     ungroup(country) %>%   # now the `handed` grouping has been removed, therefore we can calculate percent now:     mutate(n_col = sum(c_h_count), c_h_percent = c_h_count / n_col) # `summarise()` has grouped output by 'arm', 'gender', 'country'. You can # override using the `.groups` argument. c_h_df # # A tibble: 16 × 8 # # Groups:   arm, gender [4] #    arm   gender country handed  mean c_h_count n_col c_h_percent #    <fct> <fct>  <fct>   <fct>  <dbl>     <int> <int>       <dbl> #  1 Arm A Female CAN     Left    38.9        32    96       0.333 #  2 Arm A Female CAN     Right   36.6        13    96       0.135 #  3 Arm A Female USA     Left    40.4        34    96       0.354 #  4 Arm A Female USA     Right   36.9        17    96       0.177 #  5 Arm A Male   CAN     Left    40.4        42   105       0.4   #  6 Arm A Male   CAN     Right   40.2        22   105       0.210 #  7 Arm A Male   USA     Left    39.7        19   105       0.181 #  8 Arm A Male   USA     Right   39.8        22   105       0.210 #  9 Arm B Female CAN     Left    40.3        26    92       0.283 # 10 Arm B Female CAN     Right   40.2        20    92       0.217 # 11 Arm B Female USA     Left    39.2        25    92       0.272 # 12 Arm B Female USA     Right   38.5        21    92       0.228 # 13 Arm B Male   CAN     Left    37.7        37   107       0.346 # 14 Arm B Male   CAN     Right   40.6        25   107       0.234 # 15 Arm B Male   USA     Left    40.1        25   107       0.234 # 16 Arm B Male   USA     Right   39.0        20   107       0.187 c_df <- df %>%   group_by(arm, gender, country) %>%     summarize(c_count = n()) %>%   # now the `handed` grouping has been removed, therefore we can calculate percent now:     mutate(n_col = sum(c_count), c_percent = c_count / n_col) # `summarise()` has grouped output by 'arm', 'gender'. You can override using the # `.groups` argument. c_df # # A tibble: 8 × 6 # # Groups:   arm, gender [4] #   arm   gender country c_count n_col c_percent #   <fct> <fct>  <fct>     <int> <int>     <dbl> # 1 Arm A Female CAN          45    96     0.469 # 2 Arm A Female USA          51    96     0.531 # 3 Arm A Male   CAN          64   105     0.610 # 4 Arm A Male   USA          41   105     0.390 # 5 Arm B Female CAN          46    92     0.5   # 6 Arm B Female USA          46    92     0.5   # 7 Arm B Male   CAN          62   107     0.579 # 8 Arm B Male   USA          45   107     0.421 full_dplyr <- left_join(c_h_df, c_df) %>% ungroup # Joining, by = c(\"arm\", \"gender\", \"country\", \"n_col\") tbl <- basic_table() %>%   split_cols_by(\"arm\") %>%   split_cols_by(\"gender\") %>%   add_colcounts() %>%   split_rows_by(\"country\") %>%   summarize_row_groups() %>%   split_rows_by(\"handed\") %>%   summarize_row_groups() %>%   analyze(\"age\", afun = mean, format = \"xx.x\") %>%   build_table(df) tbl #                     Arm A                     Arm B          #              Female        Male        Female        Male    #              (N=96)      (N=105)       (N=92)      (N=107)   # ———————————————————————————————————————————————————————————— # CAN        45 (46.9%)   64 (61.0%)   46 (50.0%)   62 (57.9%) #   Left     32 (33.3%)   42 (40.0%)   26 (28.3%)   37 (34.6%) #     mean      38.9         40.4         40.3         37.7    #   Right    13 (13.5%)   22 (21.0%)   20 (21.7%)   25 (23.4%) #     mean      36.6         40.2         40.2         40.6    # USA        51 (53.1%)   41 (39.0%)   46 (50.0%)   45 (42.1%) #   Left     34 (35.4%)   19 (18.1%)   25 (27.2%)   25 (23.4%) #     mean      40.4         39.7         39.2         40.1    #   Right    17 (17.7%)   22 (21.0%)   21 (22.8%)   20 (18.7%) #     mean      36.9         39.8         38.5         39.0 frm_rtables_h <- cell_values(tbl, rowpath = c(\"country\", \"CAN\", \"handed\", \"Right\", \"@content\"),                              colpath = c(\"arm\", \"Arm B\", \"gender\", \"Female\"))[[1]] frm_rtables_h # [1] 20.0000000  0.2173913 frm_dplyr_h <-  full_dplyr %>%     filter(country == \"CAN\" & handed == \"Right\" & arm == \"Arm B\" &            gender == \"Female\") %>%     select(c_h_count, c_h_percent)  frm_dplyr_h # # A tibble: 1 × 2 #   c_h_count c_h_percent #       <int>       <dbl> # 1        20       0.217 frm_rtables_c <-  cell_values(tbl, rowpath = c(\"country\", \"CAN\", \"@content\"),                               colpath = c(\"arm\", \"Arm A\", \"gender\", \"Male\"))[[1]]  frm_rtables_c # [1] 64.0000000  0.6095238 frm_dplyr_c <- full_dplyr %>%     filter(country == \"CAN\" & arm == \"Arm A\" & gender == \"Male\") %>%     select(c_count, c_percent)  frm_dplyr_c # # A tibble: 2 × 2 #   c_count c_percent #     <int>     <dbl> # 1      64     0.610 # 2      64     0.610"},{"path":"https://roche.github.io/rtables/main/articles/tabulation_dplyr.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Comparison with `dplyr` Tabulation","text":"vignette learned : dplyr keeps simple things simple tables group summaries repeating information required rtables streamlines construction complex tables recommend continue reading clinical_trials vignette create number advanced tables using layouts.","code":""},{"path":"https://roche.github.io/rtables/main/articles/title_footer.html","id":"titles-and-non-referential-footer-materials","dir":"Articles","previous_headings":"","what":"Titles and Non-Referential Footer Materials","title":"Titles, Footers, and Referential Footnotes","text":"rtables table can annotated three types header (title) information, well three types footer information. Header information comes two forms specified directly (main title subtitles), well one populated automatically necessary (page title). Similarly, footer materials come two directly specified components: main footer provenance footer, addition one computed necessary: referential footnotes. basic_table() accepts values element can set directly:","code":"library(rtables) # Loading required package: magrittr # Loading required package: formatters library(dplyr) #  # Attaching package: 'dplyr' # The following objects are masked from 'package:stats': #  #     filter, lag # The following objects are masked from 'package:base': #  #     intersect, setdiff, setequal, union lyt <- basic_table(title = \"Study XXXXXXXX\",                    subtitles = c(\"subtitle YYYYYYYYYY\", \"subtitle2 ZZZZZZZZZ\"),                    main_footer = \"Analysis was done using cool methods that are correct\",                    prov_footer = \"file: /path/to/stuff/that/lives/there HASH:1ac41b242a\") %>%     split_cols_by(\"ARM\") %>%     split_rows_by(\"SEX\", page_by = TRUE, page_prefix = \"Patient Subset - Gender\", split_fun = drop_split_levels) %>%     split_rows_by(\"STRATA1\") %>%     analyze(\"AGE\", mean, format = \"xx.x\")  tbl <- build_table(lyt, DM) cat(export_as_txt(tbl, paginate = TRUE, page_break = \"\\n\\n\\n\")) # Study XXXXXXXX # subtitle YYYYYYYYYY # subtitle2 ZZZZZZZZZ # Patient Subset - Gender: F #  # —————————————————————————————————————————————————— #            A: Drug X   B: Placebo   C: Combination # —————————————————————————————————————————————————— # A                                                  #   mean       30.9         32.9           36.0      # B                                                  #   mean       34.9         32.9           34.4      # C                                                  #   mean       35.2         36.0           34.3      # —————————————————————————————————————————————————— #  # Analysis was done using cool methods that are correct #  # file: /path/to/stuff/that/lives/there HASH:1ac41b242a #  #  #  # Study XXXXXXXX # subtitle YYYYYYYYYY # subtitle2 ZZZZZZZZZ # Patient Subset - Gender: M #  # —————————————————————————————————————————————————— #            A: Drug X   B: Placebo   C: Combination # —————————————————————————————————————————————————— # A                                                  #   mean       35.1         31.1           35.6      # B                                                  #   mean       36.6         32.1           34.4      # C                                                  #   mean       37.4         32.8           32.8      # —————————————————————————————————————————————————— #  # Analysis was done using cool methods that are correct #  # file: /path/to/stuff/that/lives/there HASH:1ac41b242a"},{"path":"https://roche.github.io/rtables/main/articles/title_footer.html","id":"referential-footnotes","dir":"Articles","previous_headings":"","what":"Referential Footnotes","title":"Titles, Footers, and Referential Footnotes","text":"Referential footnotes footnotes associated particular component table: column, row, cell. can added tabulation via analysis functions, can also added post-hoc table created. rendered number within curly braces within table body, row, column labels, followed message associated number printed table rendering.","code":""},{"path":"https://roche.github.io/rtables/main/articles/title_footer.html","id":"adding-cell--and-analysis-row-referential-footnotes-at-tabulation-time","dir":"Articles","previous_headings":"Referential Footnotes","what":"Adding Cell- and Analysis-row Referential Footnotes At Tabulation Time","title":"Titles, Footers, and Referential Footnotes","text":"note typically type footnote added within analysis function dependent computations done calculate cell value(s), e.g., model converging. simply use context information illustrative proxy . procedure adding footnotes content (summary row) rows cells identical , done within content function.","code":"afun <- function(df, .var, .spl_context) {     val <- .spl_context$value[NROW(.spl_context)]     rw_fnotes <-  if(val == \"C\") list(\"This is strata level C for these patients\") else list()     cl_fnotes <- if(val == \"B\" && df[1, \"ARM\", drop = TRUE] == \"C: Combination\")                      list(\"these Strata B patients got the drug combination\") else list()          in_rows(mean = mean(df[[.var]]),             .row_footnotes = rw_fnotes,             .cell_footnotes = cl_fnotes,             .formats = c(mean = \"xx.x\")) }  lyt <- basic_table(title = \"Study XXXXXXXX\",                    subtitles = c(\"subtitle YYYYYYYYYY\", \"subtitle2 ZZZZZZZZZ\"),                    main_footer = \"Analysis was done using cool methods that are correct\",                    prov_footer = \"file: /path/to/stuff/that/lives/there HASH:1ac41b242a\") %>%     split_cols_by(\"ARM\") %>%     split_rows_by(\"SEX\", page_by = TRUE, page_prefix = \"Patient Subset - Gender\", split_fun = drop_split_levels) %>%     split_rows_by(\"STRATA1\") %>%     analyze(\"AGE\", afun, format = \"xx.x\")  tbl <- build_table(lyt, DM) cat(export_as_txt(tbl, paginate = TRUE, page_break = \"\\n\\n\\n\")) # Study XXXXXXXX # subtitle YYYYYYYYYY # subtitle2 ZZZZZZZZZ # Patient Subset - Gender: F #  # —————————————————————————————————————————————————————— #                A: Drug X   B: Placebo   C: Combination # —————————————————————————————————————————————————————— # A                                                      #   mean           30.9         32.9           36.0      # B                                                      #   mean           34.9         32.9         34.4 {1}    # C                                                      #   mean {2}       35.2         36.0           34.3      # —————————————————————————————————————————————————————— #  # {1} - these Strata B patients got the drug combination # {2} - This is strata level C for these patients # —————————————————————————————————————————————————————— #  # Analysis was done using cool methods that are correct #  # file: /path/to/stuff/that/lives/there HASH:1ac41b242a #  #  #  # Study XXXXXXXX # subtitle YYYYYYYYYY # subtitle2 ZZZZZZZZZ # Patient Subset - Gender: M #  # —————————————————————————————————————————————————————— #                A: Drug X   B: Placebo   C: Combination # —————————————————————————————————————————————————————— # A                                                      #   mean           35.1         31.1           35.6      # B                                                      #   mean           36.6         32.1         34.4 {3}    # C                                                      #   mean {4}       37.4         32.8           32.8      # —————————————————————————————————————————————————————— #  # {3} - these Strata B patients got the drug combination # {4} - This is strata level C for these patients # —————————————————————————————————————————————————————— #  # Analysis was done using cool methods that are correct #  # file: /path/to/stuff/that/lives/there HASH:1ac41b242a"},{"path":"https://roche.github.io/rtables/main/articles/title_footer.html","id":"annotating-an-existing-table-with-referential-footnotes","dir":"Articles","previous_headings":"Referential Footnotes","what":"Annotating an Existing Table with Referential Footnotes","title":"Titles, Footers, and Referential Footnotes","text":"addition inserting referential footnotes tabulation time within analysis functions, cal also annotate tables post-hoc. also way add footnotes column labels, controlled within analysis content function. fnotes_at_path<- function accepts row path, column path, value *full set footnotes defined locations (NULL character vector). non-NULL row path NULL column path specifies footnote(s) attached row, NULL row path non-NULL column path indicates go column. non-null indicates cell (must resolve individual cell). Note step content table row must add path, even though didn’t need put footnote full row.","code":"tbl2 <- basic_table() %>%   split_cols_by(\"ARM\") %>%     split_cols_by(\"SEX\", split_fun = drop_split_levels) %>%     split_rows_by(\"RACE\", split_fun = drop_split_levels) %>%     summarize_row_groups() %>%     analyze(c(\"AGE\", \"STRATA1\")) %>%     build_table(ex_adsl %>% filter(SEX %in% c(\"M\", \"F\") &                                    RACE %in% (levels(RACE)[1:3])))  tbl2 #                                    A: Drug X                B: Placebo              C: Combination      #                                 F            M            F            M            F            M      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN                       41 (53.9%)   25 (54.3%)   36 (52.2%)   30 (60.0%)   39 (60.9%)   32 (57.1%) #   AGE                                                                                                   #     Mean                      31.22        34.60        35.06        38.63        36.44        37.66    #   STRATA1                                                                                               #     A                           11           10           14           10           11           7      #     B                           11           9            15           7            11           14     #     C                           19           6            7            13           17           11     # BLACK OR AFRICAN AMERICAN   18 (23.7%)   12 (26.1%)   16 (23.2%)   12 (24.0%)   14 (21.9%)   14 (25.0%) #   AGE                                                                                                   #     Mean                      34.06        34.58        33.88        36.33        33.21        34.21    #   STRATA1                                                                                               #     A                           5            2            5            6            3            7      #     B                           6            5            3            4            4            4      #     C                           7            5            8            2            7            3      # WHITE                       17 (22.4%)   9 (19.6%)    17 (24.6%)   8 (16.0%)    11 (17.2%)   10 (17.9%) #   AGE                                                                                                   #     Mean                      34.12        40.00        32.41        34.62        33.00        30.80    #   STRATA1                                                                                               #     A                           5            3            3            3            3            5      #     B                           5            4            8            4            5            2      #     C                           7            2            6            1            3            3 fnotes_at_path(tbl2, c(\"RACE\", \"ASIAN\")) <- c(\"hi\", \"there\") tbl2 #                                    A: Drug X                B: Placebo              C: Combination      #                                 F            M            F            M            F            M      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN {1, 2}                41 (53.9%)   25 (54.3%)   36 (52.2%)   30 (60.0%)   39 (60.9%)   32 (57.1%) #   AGE                                                                                                   #     Mean                      31.22        34.60        35.06        38.63        36.44        37.66    #   STRATA1                                                                                               #     A                           11           10           14           10           11           7      #     B                           11           9            15           7            11           14     #     C                           19           6            7            13           17           11     # BLACK OR AFRICAN AMERICAN   18 (23.7%)   12 (26.1%)   16 (23.2%)   12 (24.0%)   14 (21.9%)   14 (25.0%) #   AGE                                                                                                   #     Mean                      34.06        34.58        33.88        36.33        33.21        34.21    #   STRATA1                                                                                               #     A                           5            2            5            6            3            7      #     B                           6            5            3            4            4            4      #     C                           7            5            8            2            7            3      # WHITE                       17 (22.4%)   9 (19.6%)    17 (24.6%)   8 (16.0%)    11 (17.2%)   10 (17.9%) #   AGE                                                                                                   #     Mean                      34.12        40.00        32.41        34.62        33.00        30.80    #   STRATA1                                                                                               #     A                           5            3            3            3            3            5      #     B                           5            4            8            4            5            2      #     C                           7            2            6            1            3            3      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— #  # {1} - hi # {2} - there # ——————————————————————————————————————————————————————————————————————————————————————————————————————— fnotes_at_path(tbl2, rowpath = NULL, c(\"ARM\", \"B: Placebo\")) <- c(\"this is a placebo\") tbl2 #                                    A: Drug X              B: Placebo {1}            C: Combination      #                                 F            M            F            M            F            M      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN {2, 3}                41 (53.9%)   25 (54.3%)   36 (52.2%)   30 (60.0%)   39 (60.9%)   32 (57.1%) #   AGE                                                                                                   #     Mean                      31.22        34.60        35.06        38.63        36.44        37.66    #   STRATA1                                                                                               #     A                           11           10           14           10           11           7      #     B                           11           9            15           7            11           14     #     C                           19           6            7            13           17           11     # BLACK OR AFRICAN AMERICAN   18 (23.7%)   12 (26.1%)   16 (23.2%)   12 (24.0%)   14 (21.9%)   14 (25.0%) #   AGE                                                                                                   #     Mean                      34.06        34.58        33.88        36.33        33.21        34.21    #   STRATA1                                                                                               #     A                           5            2            5            6            3            7      #     B                           6            5            3            4            4            4      #     C                           7            5            8            2            7            3      # WHITE                       17 (22.4%)   9 (19.6%)    17 (24.6%)   8 (16.0%)    11 (17.2%)   10 (17.9%) #   AGE                                                                                                   #     Mean                      34.12        40.00        32.41        34.62        33.00        30.80    #   STRATA1                                                                                               #     A                           5            3            3            3            3            5      #     B                           5            4            8            4            5            2      #     C                           7            2            6            1            3            3      # ——————————————————————————————————————————————————————————————————————————————————————————————————————— #  # {1} - this is a placebo # {2} - hi # {3} - there # ——————————————————————————————————————————————————————————————————————————————————————————————————————— fnotes_at_path(tbl2, rowpath = c(\"RACE\", \"ASIAN\", \"@content\", \"ASIAN\"),  c(\"ARM\", \"B: Placebo\", \"SEX\", \"F\")) <- \"These asian women got placebo treatments\" tbl2 #                                    A: Drug X                B: Placebo {1}              C: Combination      #                                 F            M              F              M            F            M      # ——————————————————————————————————————————————————————————————————————————————————————————————————————————— # ASIAN {2, 3}                41 (53.9%)   25 (54.3%)   36 (52.2%) {4}   30 (60.0%)   39 (60.9%)   32 (57.1%) #   AGE                                                                                                       #     Mean                      31.22        34.60          35.06          38.63        36.44        37.66    #   STRATA1                                                                                                   #     A                           11           10             14             10           11           7      #     B                           11           9              15             7            11           14     #     C                           19           6              7              13           17           11     # BLACK OR AFRICAN AMERICAN   18 (23.7%)   12 (26.1%)     16 (23.2%)     12 (24.0%)   14 (21.9%)   14 (25.0%) #   AGE                                                                                                       #     Mean                      34.06        34.58          33.88          36.33        33.21        34.21    #   STRATA1                                                                                                   #     A                           5            2              5              6            3            7      #     B                           6            5              3              4            4            4      #     C                           7            5              8              2            7            3      # WHITE                       17 (22.4%)   9 (19.6%)      17 (24.6%)     8 (16.0%)    11 (17.2%)   10 (17.9%) #   AGE                                                                                                       #     Mean                      34.12        40.00          32.41          34.62        33.00        30.80    #   STRATA1                                                                                                   #     A                           5            3              3              3            3            5      #     B                           5            4              8              4            5            2      #     C                           7            2              6              1            3            3      # ——————————————————————————————————————————————————————————————————————————————————————————————————————————— #  # {1} - this is a placebo # {2} - hi # {3} - there # {4} - These asian women got placebo treatments # ———————————————————————————————————————————————————————————————————————————————————————————————————————————"},{"path":"https://roche.github.io/rtables/main/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabriel Becker. Author, maintainer. Adrian Waddell. Author. Daniel Sabanés Bové. Contributor. Maximilian Mordig. Contributor. Davide Garolini. Contributor.","code":""},{"path":"https://roche.github.io/rtables/main/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker G, Waddell (2022). rtables: Reporting Tables. https://github.com/roche/rtables, https://roche.github.io/rtables/.","code":"@Manual{,   title = {rtables: Reporting Tables},   author = {Gabriel Becker and Adrian Waddell},   year = {2022},   note = {https://github.com/roche/rtables, https://roche.github.io/rtables/}, }"},{"path":[]},{"path":"https://roche.github.io/rtables/main/index.html","id":"reporting-tables-with-r","dir":"","previous_headings":"","what":"Reporting tables with R","title":"Reporting Tables","text":"rtables R package designed create display complex tables R. cells rtable may contain high-dimensional data structure can displayed cell-specific formatting instructions. Currently, rtables can outputted ascii html, pdf, well powerpoint (via conversion flextable objects). rtf support development future release. rtables developed copy written F. Hoffmann-La Roche released open source Apache License Version 2. rtables development driven need create regulatory ready tables health authority review. key requirements undertaking listed : values need programmatically accessible non-rounded state cross-checking multiple values displayed within cell flexible tabulation framework flexible formatting (cell spans, rounding, alignment, etc.) multiple output formats (html, ascii, latex, pdf, xml) flexible pagination horizontal vertical directions distinguish name label data structure work CDISC standards title, footnotes, cell cell/row/column references rtables currently covers virtually requirements, advances remain active development.","code":""},{"path":"https://roche.github.io/rtables/main/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reporting Tables","text":"rtables now available CRAN can install latest released version : can install latest development version directly GitHub : Packaged releases (CRAN official CRAN releases) can found releases list","code":"install.packages(\"rtables\") devtool::install_github(\"Roche/rtables\")"},{"path":"https://roche.github.io/rtables/main/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Reporting Tables","text":"first begin demographic table alike example show creation complex table.","code":"library(rtables)  lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   analyze(c(\"AGE\", \"BMRKR1\", \"BMRKR2\"), function(x, ...) {     if (is.numeric(x)) {       in_rows(         \"Mean (sd)\" = c(mean(x), sd(x)),         \"Median\" = median(x),         \"Min - Max\" = range(x),         .formats = c(\"xx.xx (xx.xx)\", \"xx.xx\", \"xx.xx - xx.xx\")       )     } else if (is.factor(x) || is.character(x)) {       in_rows(.list = list_wrap_x(table)(x))     } else {       stop(\"type not supproted\")     }   })  build_table(lyt, ex_adsl) #>                 A: Drug X      B: Placebo     C: Combination #> ———————————————————————————————————————————————————————————— #> AGE                                                          #>   Mean (sd)   33.77 (6.55)    35.43 (7.90)     35.43 (7.72)  #>   Median          33.00           35.00           35.00      #>   Min - Max   21.00 - 50.00   21.00 - 62.00   20.00 - 69.00  #> BMRKR1                                                       #>   Mean (sd)    5.97 (3.55)     5.70 (3.31)     5.62 (3.49)   #>   Median          5.39            4.81             4.61      #>   Min - Max   0.41 - 17.67    0.65 - 14.24     0.17 - 21.39  #> BMRKR2                                                       #>   LOW              50              45               40       #>   MEDIUM           37              56               42       #>   HIGH             47              33               50 library(rtables) library(dplyr)  ## for simplicity grab non-sparse subset ADSL <- ex_adsl %>% filter(RACE %in% levels(RACE)[1:3])  biomarker_ave <- function(x, ...) {      val <- if(length(x) > 0) round(mean(x), 2) else \"no data\"      in_rows(         \"Biomarker 1 (mean)\" = rcell(val)      ) }  basic_table() %>%   split_cols_by(\"ARM\") %>%   split_cols_by(\"BMRKR2\") %>%   add_colcounts() %>%   split_rows_by(\"RACE\", split_fun = trim_levels_in_group(\"SEX\")) %>%   split_rows_by(\"SEX\") %>%   summarize_row_groups() %>%   analyze(\"BMRKR1\", biomarker_ave) %>%   build_table(ADSL) #>                                          A: Drug X                            B: Placebo                           C: Combination            #>                                LOW        MEDIUM        HIGH         LOW         MEDIUM       HIGH         LOW         MEDIUM        HIGH    #>                               (N=45)      (N=35)       (N=46)       (N=42)       (N=48)      (N=31)       (N=40)       (N=39)       (N=47)   #> ———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> ASIAN                                                                                                                                        #>   F                         13 (28.9%)   9 (25.7%)   19 (41.3%)   9 (21.4%)    18 (37.5%)   9 (29.0%)   13 (32.5%)   9 (23.1%)    17 (36.2%) #>     Biomarker 1 (mean)         5.23        6.17         5.38         5.64         5.55        4.33         5.46         5.48         5.19    #>   M                         8 (17.8%)    7 (20.0%)   10 (21.7%)   12 (28.6%)   10 (20.8%)   8 (25.8%)   5 (12.5%)    11 (28.2%)   16 (34.0%) #>     Biomarker 1 (mean)         6.77        6.06         5.54         4.9          4.98        6.81         6.53         5.47         4.98    #>   U                          1 (2.2%)    1 (2.9%)     0 (0.0%)     0 (0.0%)     0 (0.0%)    1 (3.2%)     0 (0.0%)     1 (2.6%)     1 (2.1%)  #>     Biomarker 1 (mean)         4.68         7.7       no data      no data      no data       6.97       no data       11.93         9.01    #> BLACK OR AFRICAN AMERICAN                                                                                                                    #>   F                         6 (13.3%)    3 (8.6%)    9 (19.6%)    6 (14.3%)    8 (16.7%)    2 (6.5%)    7 (17.5%)    4 (10.3%)     3 (6.4%)  #>     Biomarker 1 (mean)         5.01         7.2         6.79         6.15         5.26        8.57         5.72         5.76         4.58    #>   M                         5 (11.1%)    5 (14.3%)    2 (4.3%)     3 (7.1%)    5 (10.4%)    4 (12.9%)   4 (10.0%)    5 (12.8%)    5 (10.6%)  #>     Biomarker 1 (mean)         6.92        5.82        11.66         4.46         6.14        8.47         6.16         5.25         4.83    #>   U                          0 (0.0%)    0 (0.0%)     0 (0.0%)     0 (0.0%)     0 (0.0%)    0 (0.0%)     1 (2.5%)     1 (2.6%)     0 (0.0%)  #>     Biomarker 1 (mean)       no data      no data     no data      no data      no data      no data       2.79         9.82       no data   #>   UNDIFFERENTIATED           1 (2.2%)    0 (0.0%)     0 (0.0%)     0 (0.0%)     0 (0.0%)    0 (0.0%)     2 (5.0%)     0 (0.0%)     0 (0.0%)  #>     Biomarker 1 (mean)         9.48       no data     no data      no data      no data      no data       6.46       no data      no data   #> WHITE                                                                                                                                        #>   F                         6 (13.3%)    7 (20.0%)    4 (8.7%)    5 (11.9%)    6 (12.5%)    6 (19.4%)   6 (15.0%)     3 (7.7%)     2 (4.3%)  #>     Biomarker 1 (mean)         4.43        7.83         4.52         6.42         5.07        7.83         6.71         5.87         10.7    #>   M                          4 (8.9%)    3 (8.6%)     2 (4.3%)    6 (14.3%)     1 (2.1%)    1 (3.2%)     2 (5.0%)    5 (12.8%)     3 (6.4%)  #>     Biomarker 1 (mean)         5.81        7.23         1.39         4.72         4.58        12.87        2.3          5.1          5.98    #>   U                          1 (2.2%)    0 (0.0%)     0 (0.0%)     1 (2.4%)     0 (0.0%)    0 (0.0%)     0 (0.0%)     0 (0.0%)     0 (0.0%)  #>     Biomarker 1 (mean)         3.94       no data     no data        3.77       no data      no data     no data      no data      no data"},{"path":"https://roche.github.io/rtables/main/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Reporting Tables","text":"like thank everyone made rtables better project providing feedback improving examples & vignettes. following list contributors alphabetical: Maximo Carreras, Francois Collins, Saibah Chohan, Tadeusz Lewandowski, Nick Paszty, Nina Qi, Jana Stoilova, Heng Wang, Godwin Yung","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/index.html","id":"rinpharma-workshop-creating-submission-quality-clinical-trial-reporting-tables-in-r-with-rtables","dir":"","previous_headings":"Presentations","what":"RinPharma Workshop: Creating Submission-Quality Clinical Trial Reporting Tables in R with rtables","title":"Reporting Tables","text":"Slides","code":""},{"path":"https://roche.github.io/rtables/main/index.html","id":"r-adoption-series","dir":"","previous_headings":"Presentations","what":"R Adoption Series","title":"Reporting Tables","text":"R Adoption Series presentation 2022 Slides: https://github.com/gmbecker/rtables_radoption_webinar (index.html)","code":""},{"path":"https://roche.github.io/rtables/main/index.html","id":"new-current-layouting-and-tabulation-framework-v03","dir":"","previous_headings":"Presentations","what":"New (Current) Layouting and Tabulation Framework (v.0.3+)","title":"Reporting Tables","text":"useR!2020 Presentation (v0.3.1.1) July 2020","code":""},{"path":"https://roche.github.io/rtables/main/reference/CellValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell Value constructor — CellValue","title":"Cell Value constructor — CellValue","text":"Cell Value constructor","code":""},{"path":"https://roche.github.io/rtables/main/reference/CellValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell Value constructor — CellValue","text":"","code":"CellValue(   val,   format = NULL,   colspan = 1L,   label = NULL,   indent_mod = NULL,   footnotes = NULL,   align = NULL,   format_na_str = NULL )"},{"path":"https://roche.github.io/rtables/main/reference/CellValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell Value constructor — CellValue","text":"val . value cell exactly passed formatter returned extracted format FormatSpec. Format associated split. Formats can declared via strings (\"xx.x\") function. cases analyze calls, can character vectors lists functions. colspan integer(1). Columnspan value. label character(1). label (confused name) object/structure. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. footnotes list NULL. Referential footnote messages cell. align character(1) NULL. Alignment value rendered . defaults \"center\" NULL used. See rtables_aligns currently supported alignments. format_na_str character(1). String displayed formatted cell's value(s) NA.","code":""},{"path":"https://roche.github.io/rtables/main/reference/CellValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell Value constructor — CellValue","text":"object representing value within single cell within populated table. underlying structure object implementation detail sholud relied upon beyond calling accessors class.","code":""},{"path":"https://roche.github.io/rtables/main/reference/EmptyColInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Empty table, column, split objects — EmptyColInfo","title":"Empty table, column, split objects — EmptyColInfo","text":"Empty objects various types compare efficiently.","code":""},{"path":"https://roche.github.io/rtables/main/reference/ManualSplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually defined split — ManualSplit","title":"Manually defined split — ManualSplit","text":"Manually defined split","code":""},{"path":"https://roche.github.io/rtables/main/reference/ManualSplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually defined split — ManualSplit","text":"","code":"ManualSplit(   levels,   label,   name = \"manual\",   extra_args = list(),   indent_mod = 0L,   cindent_mod = 0L,   cvar = \"\",   cextra_args = list(),   label_pos = \"visible\",   page_prefix = NA_character_,   section_div = NA_character_ )"},{"path":"https://roche.github.io/rtables/main/reference/ManualSplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually defined split — ManualSplit","text":"levels character. Levels split (ie children manual split) label character(1). label (confused name) object/structure. name character(1). Name split/table/row created. Defaults corresponding label, required . extra_args list. Extra arguments passed tabulation function. Element position thte list corresponds children split. Named elements child-specific lists ignored match formal argument ttabulation function. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. cindent_mod numeric(1). indent modifier content tables generated split. cvar character(1). variable, , content function accept. Defaults NA. cextra_args list. Extra arguments passed content function tabulating row group summaries. label_pos character(1). Location variable label displayed, Accepts  hidden (default non-analyze row splits), visible, topleft, - analyze splits - default.  analyze calls, default indicates variable visible multiple variables analyzed level nesting. page_prefix character(1). Prefix, appended split value, forcing pagination children split/table section_div character(1). String repeated section divider group defined split instruciton, NA_character_ (default) section divider.","code":""},{"path":"https://roche.github.io/rtables/main/reference/ManualSplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually defined split — ManualSplit","text":"ManualSplit object.","code":""},{"path":"https://roche.github.io/rtables/main/reference/ManualSplit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Manually defined split — ManualSplit","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/MultiVarSplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Split between two or more different variables — MultiVarSplit","title":"Split between two or more different variables — MultiVarSplit","text":"Split two different variables","code":""},{"path":"https://roche.github.io/rtables/main/reference/MultiVarSplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split between two or more different variables — MultiVarSplit","text":"","code":"MultiVarSplit(   vars,   split_label = \"\",   varlabels = NULL,   varnames = NULL,   cfun = NULL,   cformat = NULL,   cna_str = NA_character_,   split_format = NULL,   split_na_str = NA_character_,   split_name = \"multivars\",   child_labels = c(\"default\", \"visible\", \"hidden\"),   extra_args = list(),   indent_mod = 0L,   cindent_mod = 0L,   cvar = \"\",   cextra_args = list(),   label_pos = \"visible\",   split_fun = NULL,   page_prefix = NA_character_,   section_div = NA_character_ )"},{"path":"https://roche.github.io/rtables/main/reference/MultiVarSplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split between two or more different variables — MultiVarSplit","text":"vars character vector. Multiple variable names. split_label string. Label string associated table generated split. confused labels assigned child (based data type split tabulation). varlabels character vector. Labels vars varnames character vector. Names vars appear pathing. vars unique variable names. , variable names suffixes necessary enforce uniqueness. cfun list/function/NULL. tabulation function(s) creating content rows. Must accept x df first parameter. Must accept labelstr second argument. Can optionally accept optional arguments accepted analysis functions. See analyze. cformat format spec. Format content rows cna_str character. NA string use cformat content table. split_format FormatSpec. Default format associated split created. split_na_str character. NA string vector use split_format. split_name string. Name associiated split (pathing, etc) child_labels string. One \"default\", \"visible\", \"hidden\". display behavior  labels (ie label rows) children split. Defaults \"default\" flags label row visible child 0 content rows. extra_args list. Extra arguments passed tabulation function. Element position thte list corresponds children split. Named elements child-specific lists ignored match formal argument ttabulation function. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. cindent_mod numeric(1). indent modifier content tables generated split. cvar character(1). variable, , content function accept. Defaults NA. cextra_args list. Extra arguments passed content function tabulating row group summaries. label_pos character(1). Location variable label displayed, Accepts  hidden (default non-analyze row splits), visible, topleft, - analyze splits - default.  analyze calls, default indicates variable visible multiple variables analyzed level nesting. split_fun function/NULL. custom splitting function See custom_split_funs page_prefix character(1). Prefix, appended split value, forcing pagination children split/table section_div character(1). String repeated section divider group defined split instruciton, NA_character_ (default) section divider.","code":""},{"path":"https://roche.github.io/rtables/main/reference/MultiVarSplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split between two or more different variables — MultiVarSplit","text":"MultiVarSplit object.","code":""},{"path":"https://roche.github.io/rtables/main/reference/MultiVarSplit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split between two or more different variables — MultiVarSplit","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/VarLevelSplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Split on levels within a variable — VarLevelSplit-class","title":"Split on levels within a variable — VarLevelSplit-class","text":"Split levels within variable","code":""},{"path":"https://roche.github.io/rtables/main/reference/VarLevelSplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split on levels within a variable — VarLevelSplit-class","text":"","code":"VarLevelSplit(   var,   split_label,   labels_var = NULL,   cfun = NULL,   cformat = NULL,   cna_str = NA_character_,   split_fun = NULL,   split_format = NULL,   split_na_str = NA_character_,   valorder = NULL,   split_name = var,   child_labels = c(\"default\", \"visible\", \"hidden\"),   extra_args = list(),   indent_mod = 0L,   label_pos = c(\"topleft\", \"hidden\", \"visible\"),   cindent_mod = 0L,   cvar = \"\",   cextra_args = list(),   page_prefix = NA_character_,   section_div = NA_character_ )  VarLevWBaselineSplit(   var,   ref_group,   labels_var = var,   split_label,   split_fun = NULL,   label_fstr = \"%s - %s\",   cfun = NULL,   cformat = NULL,   cna_str = NA_character_,   cvar = \"\",   split_format = NULL,   split_na_str = NA_character_,   valorder = NULL,   split_name = var,   extra_args = list() )"},{"path":"https://roche.github.io/rtables/main/reference/VarLevelSplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split on levels within a variable — VarLevelSplit-class","text":"var string, variable name split_label string. Label string associated table generated split. confused labels assigned child (based data type split tabulation). labels_var string, name variable containing labels displayed values var cfun list/function/NULL. tabulation function(s) creating content rows. Must accept x df first parameter. Must accept labelstr second argument. Can optionally accept optional arguments accepted analysis functions. See analyze. cformat format spec. Format content rows cna_str character. NA string use cformat content table. split_fun function/NULL. custom splitting function See custom_split_funs split_format FormatSpec. Default format associated split created. split_na_str character. NA string vector use split_format. valorder character vector. Order split children appear resulting table. split_name string. Name associiated split (pathing, etc) child_labels string. One \"default\", \"visible\", \"hidden\". display behavior  labels (ie label rows) children split. Defaults \"default\" flags label row visible child 0 content rows. extra_args list. Extra arguments passed tabulation function. Element position thte list corresponds children split. Named elements child-specific lists ignored match formal argument ttabulation function. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. label_pos character(1). Location variable label displayed, Accepts  hidden (default non-analyze row splits), visible, topleft, - analyze splits - default.  analyze calls, default indicates variable visible multiple variables analyzed level nesting. cindent_mod numeric(1). indent modifier content tables generated split. cvar character(1). variable, , content function accept. Defaults NA. cextra_args list. Extra arguments passed content function tabulating row group summaries. page_prefix character(1). Prefix, appended split value, forcing pagination children split/table section_div character(1). String repeated section divider group defined split instruciton, NA_character_ (default) section divider. ref_group character. Value var taken ref_group/control compared . label_fstr string. sprintf style format string containing. non-comparison splits, can contain  one \"%s\" takes current split value generates row/column label. Comparison-based splits can contain two \"%s\".","code":""},{"path":"https://roche.github.io/rtables/main/reference/VarLevelSplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split on levels within a variable — VarLevelSplit-class","text":"VarLevelSplit object.","code":""},{"path":"https://roche.github.io/rtables/main/reference/VarLevelSplit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split on levels within a variable — VarLevelSplit-class","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/Viewer.html","id":null,"dir":"Reference","previous_headings":"","what":"Display an rtable object in the Viewer pane in RStudio or in a\nbrowser — Viewer","title":"Display an rtable object in the Viewer pane in RStudio or in a\nbrowser — Viewer","text":"table displayed using bootstrap styling tables.","code":""},{"path":"https://roche.github.io/rtables/main/reference/Viewer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display an rtable object in the Viewer pane in RStudio or in a\nbrowser — Viewer","text":"","code":"Viewer(x, y = NULL, row.names.bold = FALSE, ...)"},{"path":"https://roche.github.io/rtables/main/reference/Viewer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display an rtable object in the Viewer pane in RStudio or in a\nbrowser — Viewer","text":"x object class rtable shiny.tag (defined htmltools) y optional second argument type x row.names.bold row.names.bold boolean, make rownames bold ... arguments passed as_html","code":""},{"path":"https://roche.github.io/rtables/main/reference/Viewer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display an rtable object in the Viewer pane in RStudio or in a\nbrowser — Viewer","text":"meaningful. Called side effect opening browser viewer pane.","code":""},{"path":"https://roche.github.io/rtables/main/reference/Viewer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display an rtable object in the Viewer pane in RStudio or in a\nbrowser — Viewer","text":"","code":"if(interactive()) { sl5 <- factor(iris$Sepal.Length > 5, levels = c(TRUE, FALSE),    labels = c(\"S.L > 5\", \"S.L <= 5\"))  df <- cbind(iris, sl5 = sl5)  tbl <- basic_table() %>%    split_cols_by(\"sl5\") %>%    analyze(\"Sepal.Length\") %>%    build_table(df)  Viewer(tbl) Viewer(tbl, tbl)   tbl2 <-htmltools::tags$div(   class = \"table-responsive\",   as_html(tbl, class_table = \"table\") )  Viewer(tbl, tbl2)  }"},{"path":"https://roche.github.io/rtables/main/reference/add_colcounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the column population counts to the header — add_colcounts","title":"Add the column population counts to the header — add_colcounts","text":"Add data derived column counts.","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_colcounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the column population counts to the header — add_colcounts","text":"","code":"add_colcounts(lyt, format = \"(N=xx)\")"},{"path":"https://roche.github.io/rtables/main/reference/add_colcounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the column population counts to the header — add_colcounts","text":"lyt layout object pre-data used tabulation format FormatSpec. Format associated split. Formats can declared via strings (\"xx.x\") function. cases analyze calls, can character vectors lists functions.","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_colcounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add the column population counts to the header — add_colcounts","text":"PreDataTableLayouts object suitable passing layouting functions, build_table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_colcounts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add the column population counts to the header — add_colcounts","text":"often case column counts derived input data build_table representative population counts. example, events counted table header display number subjects total number events. case use col_count argument build_table control counts displayed table header.","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_colcounts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add the column population counts to the header — add_colcounts","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_colcounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add the column population counts to the header — add_colcounts","text":"","code":"l <- basic_table() %>% split_cols_by(\"ARM\") %>%     add_colcounts() %>%     split_rows_by(\"RACE\", split_fun = drop_split_levels) %>%     analyze(\"AGE\", afun = function(x) list(min = min(x), max = max(x))) l #> A Pre-data Table Layout #>  #> Column-Split Structure: #> ARM (lvls)  #>  #> Row-Split Structure: #> RACE (lvls) -> AGE (** analysis **)  #>   build_table(l, DM) #>                             A: Drug X   B: Placebo   C: Combination #>                              (N=121)     (N=106)        (N=129)     #> ——————————————————————————————————————————————————————————————————— #> ASIAN                                                               #>   min                          20           21             22       #>   max                          58           55             53       #> BLACK OR AFRICAN AMERICAN                                           #>   min                          23           21             24       #>   max                          60           42             51       #> WHITE                                                               #>   min                          30           25             28       #>   max                          47           55             47"},{"path":"https://roche.github.io/rtables/main/reference/add_combo_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Combination Levels to split — select_all_levels","title":"Add Combination Levels to split — select_all_levels","text":"Add Combination Levels split","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_combo_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Combination Levels to split — select_all_levels","text":"","code":"select_all_levels  add_combo_levels(combosdf, trim = FALSE, first = FALSE, keep_levels = NULL)"},{"path":"https://roche.github.io/rtables/main/reference/add_combo_levels.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Add Combination Levels to split — select_all_levels","text":"object class AllLevelsSentinel length 0.","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_combo_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Combination Levels to split — select_all_levels","text":"combosdf data.frame/tbl_df. Columns valname, label, levelcombo, exargs. levelcombo exargs list columns. Passing select_all_levels object value comblevels column indicates overall/-observations level created. trim logical(1). splits corresponding 0 observations kept tabulating. first logical(1). created split level placed first levels (TRUE) last (FALSE, default). keep_levels character NULL. non-NULL, levels retain across combination individual levels.","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_combo_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Combination Levels to split — select_all_levels","text":"closure suitable use splitting function (splfun) creating table layout","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_combo_levels.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add Combination Levels to split — select_all_levels","text":"Analysis summary functions order matters never used within tabulation framework.","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_combo_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Combination Levels to split — select_all_levels","text":"","code":"library(tibble) combodf <- tribble(     ~valname, ~label, ~levelcombo, ~exargs,     \"A_B\", \"Arms A+B\", c(\"A: Drug X\", \"B: Placebo\"), list(),     \"A_C\", \"Arms A+C\", c(\"A: Drug X\", \"C: Combination\"), list())  l <- basic_table() %>%     split_cols_by(\"ARM\", split_fun = add_combo_levels(combodf)) %>%     add_colcounts() %>%     analyze(\"AGE\")  build_table(l, DM) #>        A: Drug X   B: Placebo   C: Combination   Arms A+B   Arms A+C #>         (N=121)     (N=106)        (N=129)       (N=227)    (N=250)  #> ———————————————————————————————————————————————————————————————————— #> Mean     34.91       33.02          34.57         34.03      34.73    la <- basic_table() %>%     split_cols_by(\"ARM\",                   split_fun = add_combo_levels(combodf,                                                keep_levels = c(\"A_B\",                                                                \"A_C\"))) %>%     add_colcounts() %>%     analyze(\"AGE\")  build_table(la, DM) #>        Arms A+B   Arms A+C #>        (N=227)    (N=250)  #> —————————————————————————— #> Mean    34.03      34.73    smallerDM <- droplevels(subset(DM, SEX %in% c(\"M\", \"F\") &                         grepl(\"^(A|B)\", ARM))) l2 <- basic_table() %>%     split_cols_by(\"ARM\", split_fun = add_combo_levels(combodf[1,])) %>%     split_cols_by(\"SEX\",                   split_fun = add_overall_level(\"SEX_ALL\", \"All Genders\")) %>%     add_colcounts() %>%     analyze(\"AGE\")  l3 <-  basic_table() %>%     split_cols_by(\"ARM\", split_fun = add_combo_levels(combodf)) %>%     add_colcounts() %>%     split_rows_by(\"SEX\",                   split_fun = add_overall_level(\"SEX_ALL\", \"All Genders\")) %>%     summarize_row_groups() %>%     analyze(\"AGE\")  build_table(l3, smallerDM) #>                A: Drug X      B: Placebo      Arms A+B       Arms A+C   #>                 (N=121)        (N=106)        (N=227)        (N=121)    #> ——————————————————————————————————————————————————————————————————————— #> All Genders   121 (100.0%)   106 (100.0%)   227 (100.0%)   121 (100.0%) #>   Mean           34.91          33.02          34.03          34.91     #> F              70 (57.9%)     56 (52.8%)    126 (55.5%)     70 (57.9%)  #>   Mean           33.71          33.84          33.77          33.71     #> M              51 (42.1%)     50 (47.2%)    101 (44.5%)     51 (42.1%)  #>   Mean           36.55          32.10          34.35          36.55"},{"path":"https://roche.github.io/rtables/main/reference/add_existing_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an already calculated table to the layout — add_existing_table","title":"Add an already calculated table to the layout — add_existing_table","text":"Add already calculated table layout","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_existing_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an already calculated table to the layout — add_existing_table","text":"","code":"add_existing_table(lyt, tt, indent_mod = 0)"},{"path":"https://roche.github.io/rtables/main/reference/add_existing_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an already calculated table to the layout — add_existing_table","text":"lyt layout object pre-data used tabulation tt TableTree (related class). TableTree object representing populated table. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior.","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_existing_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an already calculated table to the layout — add_existing_table","text":"PreDataTableLayouts object suitable passing layouting functions, build_table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_existing_table.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add an already calculated table to the layout — add_existing_table","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_existing_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an already calculated table to the layout — add_existing_table","text":"","code":"tbl1 <- basic_table() %>%    split_cols_by(\"ARM\") %>%    analyze(\"AGE\", afun = mean, format = \"xx.xx\") %>%    build_table(DM)  tbl1 #>        A: Drug X   B: Placebo   C: Combination #> —————————————————————————————————————————————— #> mean     34.91       33.02          34.57       tbl2 <- basic_table() %>% split_cols_by(\"ARM\") %>%    analyze(\"AGE\", afun = sd, format = \"xx.xx\") %>%    add_existing_table(tbl1) %>%    build_table(DM)  tbl2 #>        A: Drug X   B: Placebo   C: Combination #> —————————————————————————————————————————————— #> sd       7.79         6.34           6.50      #> mean     34.91       33.02          34.57       table_structure(tbl2) #> [TableTree] root #>  [ElementaryTable] AGE (1 x 3) #>  [ElementaryTable] AGE (1 x 3)  row_paths_summary(tbl2) #> rowname    node_class    path            #> ———————————————————————————————————————— #> sd         DataRow       root, AGE, sd   #> mean       DataRow       root, AGE, mean"},{"path":"https://roche.github.io/rtables/main/reference/add_overall_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Overall Column — add_overall_col","title":"Add Overall Column — add_overall_col","text":"function add overall column top level splitting, within existing column splits. See add_overall_level recommended way add overall columns generally within existing splits.","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_overall_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Overall Column — add_overall_col","text":"","code":"add_overall_col(lyt, label)"},{"path":"https://roche.github.io/rtables/main/reference/add_overall_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Overall Column — add_overall_col","text":"lyt layout object pre-data used tabulation label character(1). label (confused name) object/structure.","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_overall_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Overall Column — add_overall_col","text":"PreDataTableLayouts object suitable passing layouting functions, build_table.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/add_overall_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Overall Column — add_overall_col","text":"","code":"l <- basic_table() %>%    split_cols_by(\"ARM\") %>%    add_overall_col(\"All Patients\") %>%    analyze(\"AGE\")  l #> A Pre-data Table Layout #>  #> Column-Split Structure: #> ARM (lvls)  #>  (all obs)  #>  #> Row-Split Structure: #> AGE (** analysis **)  #>   build_table(l, DM) #>        A: Drug X   B: Placebo   C: Combination   All Patients #> ————————————————————————————————————————————————————————————— #> Mean     34.91       33.02          34.57           34.22"},{"path":"https://roche.github.io/rtables/main/reference/add_overall_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an virtual 'overall' level to split — add_overall_level","title":"Add an virtual 'overall' level to split — add_overall_level","text":"Add virtual 'overall' level split","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_overall_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an virtual 'overall' level to split — add_overall_level","text":"","code":"add_overall_level(   valname = \"Overall\",   label = valname,   extra_args = list(),   first = TRUE,   trim = FALSE )"},{"path":"https://roche.github.io/rtables/main/reference/add_overall_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an virtual 'overall' level to split — add_overall_level","text":"valname character(1). 'Value' assigned implicit -observations split level. Defaults \"Overall\" label character(1). label (confused name) object/structure. extra_args list. Extra arguments passed tabulation function. Element position thte list corresponds children split. Named elements child-specific lists ignored match formal argument ttabulation function. first logical(1). implicit level appear first (TRUE) last FALSE. Defaults TRUE. trim logical(1). splits corresponding 0 observations kept tabulating.","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_overall_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an virtual 'overall' level to split — add_overall_level","text":"closure suitable use splitting function (splfun) creating table layout","code":""},{"path":"https://roche.github.io/rtables/main/reference/add_overall_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an virtual 'overall' level to split — add_overall_level","text":"","code":"l <- basic_table() %>%    split_cols_by(\"ARM\", split_fun = add_overall_level(\"All Patients\",                                                       first = FALSE)) %>%    analyze(\"AGE\")  build_table(l, DM) #>        A: Drug X   B: Placebo   C: Combination   All Patients #> ————————————————————————————————————————————————————————————— #> Mean     34.91       33.02          34.57           34.22       l <- basic_table() %>%    split_cols_by(\"ARM\") %>%    split_rows_by(\"RACE\",                  split_fun = add_overall_level(\"All Ethnicities\")) %>%    summarize_row_groups(label_fstr = \"%s (n)\") %>%    analyze(\"AGE\")  l #> A Pre-data Table Layout #>  #> Column-Split Structure: #> ARM (lvls)  #>  #> Row-Split Structure: #> RACE (lvls) -> AGE (** analysis **)  #>   build_table(l, DM) #>                                                  A: Drug X      B: Placebo    C: Combination #> ———————————————————————————————————————————————————————————————————————————————————————————— #> All Ethnicities (n)                             121 (100.0%)   106 (100.0%)    129 (100.0%)  #>   Mean                                             34.91          33.02           34.57      #> ASIAN (n)                                        79 (65.3%)     68 (64.2%)      84 (65.1%)   #>   Mean                                             34.20          32.68           34.63      #> BLACK OR AFRICAN AMERICAN (n)                    28 (23.1%)     24 (22.6%)      27 (20.9%)   #>   Mean                                             34.68          31.71           34.00      #> WHITE (n)                                        14 (11.6%)     14 (13.2%)      18 (14.0%)   #>   Mean                                             39.36          36.93           35.11      #> AMERICAN INDIAN OR ALASKA NATIVE (n)              0 (0.0%)       0 (0.0%)        0 (0.0%)    #>   Mean                                               NA             NA              NA       #> MULTIPLE (n)                                      0 (0.0%)       0 (0.0%)        0 (0.0%)    #>   Mean                                               NA             NA              NA       #> NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER (n)     0 (0.0%)       0 (0.0%)        0 (0.0%)    #>   Mean                                               NA             NA              NA       #> OTHER (n)                                         0 (0.0%)       0 (0.0%)        0 (0.0%)    #>   Mean                                               NA             NA              NA       #> UNKNOWN (n)                                       0 (0.0%)       0 (0.0%)        0 (0.0%)    #>   Mean                                               NA             NA              NA"},{"path":"https://roche.github.io/rtables/main/reference/analyze.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Rows Analyzing Variables Across Columns — analyze","title":"Generate Rows Analyzing Variables Across Columns — analyze","text":"Adding /analyzed variables/ table layout defines primary tabulation performed. adding calls analyze /analyze_colvars layout pipeline. adding splitting, tabulation occur current/next level nesting default.","code":""},{"path":"https://roche.github.io/rtables/main/reference/analyze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Rows Analyzing Variables Across Columns — analyze","text":"","code":"analyze(   lyt,   vars,   afun = simple_analysis,   var_labels = vars,   table_names = vars,   format = NULL,   na_str = NA_character_,   nested = TRUE,   inclNAs = FALSE,   extra_args = list(),   show_labels = c(\"default\", \"visible\", \"hidden\"),   indent_mod = 0L,   section_div = NA_character_ )"},{"path":"https://roche.github.io/rtables/main/reference/analyze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Rows Analyzing Variables Across Columns — analyze","text":"lyt layout object pre-data used tabulation vars character vector. Multiple variable names. afun function. Analysis function, must take x df first parameter. Can optionally take parameters populated tabulation framework. See Details analyze. var_labels character. Variable labels 1 variables table_names character. Names tables representing atomic analysis. Defaults var. format FormatSpec. Format associated split. Formats can declared via strings (\"xx.x\") function. cases analyze calls, can character vectors lists functions. na_str character(1). String displayed value x missing. Defaults \"NA\". nested boolean. layout instruction applied within existing layout structure possible (TRUE, default) new top-level element (`FALSE). Ignored nest split underneath analyses, allowed. inclNAs boolean. observations NA var variable(s) included performing analysis. Defaults FALSE extra_args list. Extra arguments passed tabulation function. Element position thte list corresponds children split. Named elements child-specific lists ignored match formal argument ttabulation function. show_labels character(1). variable labels corresponding variable(s) vars visible resulting table. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. section_div character(1). String repeated section divider group defined split instruciton, NA_character_ (default) section divider.","code":""},{"path":"https://roche.github.io/rtables/main/reference/analyze.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Rows Analyzing Variables Across Columns — analyze","text":"PreDataTableLayouts object suitable passing layouting functions, build_table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/analyze.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Rows Analyzing Variables Across Columns — analyze","text":"non-NULL format used specify formats generated rows, can character vector, function, list functions. repped number rows known tabulation process, overridden formats specified within rcell calls afun. analysis function (afun) take first parameter either x df. function accepts changes behavior tabulation performed. afun's first parameter x, receive corresponding subset vector data relevant column (var ) raw data used build table. afun's first parameter df, receive corresponding subset data.frame (.e. columns) raw data tabulated addition differentiation first argument, analysis function can optionally accept number parameters , present formals passed function tabulation machinery. follows: .N_col column-wise N (column count) full column tabulated within .N_total overall N (observation count, defined sum column counts) tabulation .N_row row-wise N (row group count) group observations analyzed (ie column-based subsetting) .df_row data.frame observations row group analyzed (ie column-based subsetting) .var variable analyzed .ref_group data.frame vector subset corresponding ref_group column including subsetting defined row-splitting. Optional required/meaningful ref_group column defined .ref_full data.frame vector subset corresponding ref_group column without subsetting defined row-splitting. Optional required/meaningful ref_group column defined .in_ref_col boolean indicates calculation done cells within reference column .spl_context data.frame, row gives information previous/'ancestor' split state. see ","code":""},{"path":"https://roche.github.io/rtables/main/reference/analyze.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate Rows Analyzing Variables Across Columns — analyze","text":"None arguments described Details section can overridden via extra_args calling make_afun. .N_col .N_total can overridden via col_counts argument build_table. Alternative values others must calculated within afun based combination extra arguments unmodified values provided tabulation framework.","code":""},{"path":"https://roche.github.io/rtables/main/reference/analyze.html","id":"-spl-context-details","dir":"Reference","previous_headings":"","what":".spl_context Details","title":"Generate Rows Analyzing Variables Across Columns — analyze","text":".spl_context data.frame gives information subsets data corresponding splits within-current analyze action nested. Taken together, correspond path resulting (set ) rows analysis function creating, although information slightly different form. split (correspond groups rows resulting table) represented via following columns: split name split (often variable split simple case) value string representation value split full_parent_df dataframe containing full data (ie across columns) corresponding path defined combination split value row rows row all_cols_n number observations  corresponding row grouping (union columns) (row-split analyze contexts ) <1 column column table structure list columns (named names(col_exprs(tab))) contain logical vectors corresponding subset row's full_parent_df corresponding column cur_col_subset List column containing logical vectors indicating subset row's full_parent_df column currently created analysis function cur_col_n integer column containing observation counts split note Within analysis functions accept .spl_context, all_cols_n cur_col_n columns dataframe contain 'true' observation counts corresponding row-group row-group x column subsets data. numbers , currently , reflect alternate column observation counts provided alt_counts_df, col_counts col_total arguments build_table","code":""},{"path":"https://roche.github.io/rtables/main/reference/analyze.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Rows Analyzing Variables Across Columns — analyze","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/analyze.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Rows Analyzing Variables Across Columns — analyze","text":"","code":"l <- basic_table() %>%     split_cols_by(\"ARM\") %>%     analyze(\"AGE\", afun = list_wrap_x(summary) , format = \"xx.xx\") l #> A Pre-data Table Layout #>  #> Column-Split Structure: #> ARM (lvls)  #>  #> Row-Split Structure: #> AGE (** analysis **)  #>  build_table(l, DM) #>           A: Drug X   B: Placebo   C: Combination #> ————————————————————————————————————————————————— #> Min.        20.00       21.00          22.00      #> 1st Qu.     29.00       29.00          30.00      #> Median      33.00       32.00          33.00      #> Mean        34.91       33.02          34.57      #> 3rd Qu.     39.00       37.00          38.00      #> Max.        60.00       55.00          53.00        l <- basic_table() %>%     split_cols_by(\"Species\") %>%     analyze(head(names(iris), -1), afun = function(x) {         list(             \"mean / sd\" = rcell(c(mean(x), sd(x)), format = \"xx.xx (xx.xx)\"),             \"range\" = rcell(diff(range(x)), format = \"xx.xx\")         )     }) l #> A Pre-data Table Layout #>  #> Column-Split Structure: #> Species (lvls)  #>  #> Row-Split Structure: #> Sepal.Length:Sepal.Width:Petal.Length:Petal.Width (** multivar analysis **)  #>  build_table(l, iris) #>                  setosa      versicolor     virginica  #> —————————————————————————————————————————————————————— #> Sepal.Length                                           #>   mean / sd    5.01 (0.35)   5.94 (0.52)   6.59 (0.64) #>   range           1.50          2.10          3.00     #> Sepal.Width                                            #>   mean / sd    3.43 (0.38)   2.77 (0.31)   2.97 (0.32) #>   range           2.10          1.40          1.60     #> Petal.Length                                           #>   mean / sd    1.46 (0.17)   4.26 (0.47)   5.55 (0.55) #>   range           0.90          2.10          2.40     #> Petal.Width                                            #>   mean / sd    0.25 (0.11)   1.33 (0.20)   2.03 (0.27) #>   range           0.50          0.80          1.10"},{"path":"https://roche.github.io/rtables/main/reference/analyze_colvars.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Rows Analyzing Different Variables Across Columns — analyze_colvars","title":"Generate Rows Analyzing Different Variables Across Columns — analyze_colvars","text":"Generate Rows Analyzing Different Variables Across Columns","code":""},{"path":"https://roche.github.io/rtables/main/reference/analyze_colvars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Rows Analyzing Different Variables Across Columns — analyze_colvars","text":"","code":"analyze_colvars(   lyt,   afun,   format = NULL,   nested = TRUE,   extra_args = list(),   indent_mod = 0L,   inclNAs = FALSE )"},{"path":"https://roche.github.io/rtables/main/reference/analyze_colvars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Rows Analyzing Different Variables Across Columns — analyze_colvars","text":"lyt layout object pre-data used tabulation afun function list. Function(s) used calculate values column.  list repped needed matched position columns tabulation. format FormatSpec. Format associated split. Formats can declared via strings (\"xx.x\") function. cases analyze calls, can character vectors lists functions. nested boolean. layout instruction applied within existing layout structure possible (TRUE, default) new top-level element (`FALSE). Ignored nest split underneath analyses, allowed. extra_args list. Extra arguments passed tabulation function. Element position thte list corresponds children split. Named elements child-specific lists ignored match formal argument ttabulation function. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. inclNAs boolean. observations NA var variable(s) included performing analysis. Defaults FALSE","code":""},{"path":"https://roche.github.io/rtables/main/reference/analyze_colvars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Rows Analyzing Different Variables Across Columns — analyze_colvars","text":"PreDataTableLayouts object suitable passing layouting functions, build_table.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/analyze_colvars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Rows Analyzing Different Variables Across Columns — analyze_colvars","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/analyze_colvars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Rows Analyzing Different Variables Across Columns — analyze_colvars","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union ANL <- DM %>% mutate(value = rnorm(n()), pctdiff = runif(n()))  ## toy example where we take the mean of the first variable and the ## count of >.5 for the second. colfuns <- list(function(x) rcell(mean(x), format = \"xx.x\"),                 function(x) rcell(sum(x > .5), format = \"xx\"))  l <- basic_table() %>%     split_cols_by(\"ARM\") %>%     split_cols_by_multivar(c(\"value\", \"pctdiff\")) %>%     split_rows_by(\"RACE\", split_label = \"ethnicity\",                   split_fun = drop_split_levels) %>%     summarize_row_groups() %>%     analyze_colvars(afun = colfuns)  l #> A Pre-data Table Layout #>  #> Column-Split Structure: #> ARM (lvls) -> value:pctdiff (vars)  #>  #> Row-Split Structure: #> RACE (lvls) -> NA (** col-var analysis **)  #>   build_table(l, ANL) #>                                    A: Drug X                B: Placebo              C: Combination      #>                               value       pctdiff       value       pctdiff       value       pctdiff   #> ——————————————————————————————————————————————————————————————————————————————————————————————————————— #> ASIAN                       79 (65.3%)   79 (65.3%)   68 (64.2%)   68 (64.2%)   84 (65.1%)   84 (65.1%) #>                                0.0           44          0.1           30          0.2           44     #> BLACK OR AFRICAN AMERICAN   28 (23.1%)   28 (23.1%)   24 (22.6%)   24 (22.6%)   27 (20.9%)   27 (20.9%) #>                                0.3           11          0.1           13          0.2           13     #> WHITE                       14 (11.6%)   14 (11.6%)   14 (13.2%)   14 (13.2%)   18 (14.0%)   18 (14.0%) #>                                -0.3          6           0.1           6           0.0           11       basic_table() %>% split_cols_by(\"ARM\") %>%     split_cols_by_multivar(c(\"value\", \"pctdiff\"),                            varlabels = c(\"Measurement\", \"Pct Diff\")) %>%     split_rows_by(\"RACE\", split_label = \"ethnicity\",                   split_fun = drop_split_levels) %>%     summarize_row_groups() %>%     analyze_colvars(afun = mean, format = \"xx.xx\") %>%     build_table(ANL) #>                                    A: Drug X                  B: Placebo               C: Combination      #>                             Measurement    Pct Diff    Measurement    Pct Diff    Measurement    Pct Diff  #> —————————————————————————————————————————————————————————————————————————————————————————————————————————— #> ASIAN                       79 (65.3%)    79 (65.3%)   68 (64.2%)    68 (64.2%)   84 (65.1%)    84 (65.1%) #>   mean                         0.04          0.51         0.08          0.44         0.17          0.53    #> BLACK OR AFRICAN AMERICAN   28 (23.1%)    28 (23.1%)   24 (22.6%)    24 (22.6%)   27 (20.9%)    27 (20.9%) #>   mean                         0.30          0.39         0.13          0.53         0.21          0.52    #> WHITE                       14 (11.6%)    14 (11.6%)   14 (13.2%)    14 (13.2%)   18 (14.0%)    18 (14.0%) #>   mean                         -0.33         0.50         0.09          0.47         0.03          0.55"},{"path":"https://roche.github.io/rtables/main/reference/append_topleft.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a description to the 'top-left' materials for the layout — append_topleft","title":"Append a description to the 'top-left' materials for the layout — append_topleft","text":"function adds newlines current set \"top-left materials\".","code":""},{"path":"https://roche.github.io/rtables/main/reference/append_topleft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a description to the 'top-left' materials for the layout — append_topleft","text":"","code":"append_topleft(lyt, newlines)"},{"path":"https://roche.github.io/rtables/main/reference/append_topleft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a description to the 'top-left' materials for the layout — append_topleft","text":"lyt layout object pre-data used tabulation newlines character. new line(s) added materials","code":""},{"path":"https://roche.github.io/rtables/main/reference/append_topleft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a description to the 'top-left' materials for the layout — append_topleft","text":"PreDataTableLayouts object suitable passing layouting functions, build_table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/append_topleft.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Append a description to the 'top-left' materials for the layout — append_topleft","text":"Adds newlines set strings representing 'top-left' materials declared layout (content displayed left column labels resulting tables printed). Top-left material strings stored displayed exactly , structure indenting applied either wheyn added displayed.","code":""},{"path":"https://roche.github.io/rtables/main/reference/append_topleft.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Append a description to the 'top-left' materials for the layout — append_topleft","text":"Currently, construction layout called makes difference, indepenedent actual splitting keywords. may change future. function experimental, name details behavior subject change future versions.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/append_topleft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append a description to the 'top-left' materials for the layout — append_topleft","text":"","code":"library(dplyr)  lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   split_cols_by(\"SEX\") %>%   split_rows_by(\"RACE\") %>%   append_topleft(\"Ethnicity\") %>%   analyze(\"AGE\") %>%   append_topleft(\"  Age\")  DM2 <- DM %>% mutate(RACE = factor(RACE), SEX = factor(SEX))  build_table(lyt, DM2) #> Ethnicity                     A: Drug X      B: Placebo      C: Combination   #>   Age                         F       M       F       M        F         M    #> ————————————————————————————————————————————————————————————————————————————— #> ASIAN                                                                         #>   Mean                      33.55   35.03   34.00   31.10    34.90     34.39  #> BLACK OR AFRICAN AMERICAN                                                     #>   Mean                      33.17   37.40   30.58   32.83    33.85     34.14  #> WHITE                                                                         #>   Mean                      35.88   44.00   38.57   35.29    36.50     34.00"},{"path":"https://roche.github.io/rtables/main/reference/as_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an rtable object to a shiny.tag html object — as_html","title":"Convert an rtable object to a shiny.tag html object — as_html","text":"returned html object can immediately used shiny rmarkdown.","code":""},{"path":"https://roche.github.io/rtables/main/reference/as_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an rtable object to a shiny.tag html object — as_html","text":"","code":"as_html(   x,   width = NULL,   class_table = \"table table-condensed table-hover\",   class_tr = NULL,   class_td = NULL,   class_th = NULL,   link_label = NULL )"},{"path":"https://roche.github.io/rtables/main/reference/as_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an rtable object to a shiny.tag html object — as_html","text":"x rtable object width width class_table class table tag class_tr class tr tag class_td class td tag class_th class th tag link_label link anchor label (including tab: prefix) table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/as_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an rtable object to a shiny.tag html object — as_html","text":"shiny.tag object representing x HTML.","code":""},{"path":"https://roche.github.io/rtables/main/reference/as_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an rtable object to a shiny.tag html object — as_html","text":"","code":"tbl <- rtable(   header = LETTERS[1:3],   format = \"xx\",   rrow(\"r1\", 1,2,3),   rrow(\"r2\", 4,3,2, indent = 1),   rrow(\"r3\", indent = 2) )  as_html(tbl) #> <div class=\"rtables-all-parts-block rtables-container\"> #>   <table class=\"table table-condensed table-hover\"> #>     <tr> #>       <th style=\"white-space:pre;\"><\/th> #>       <th class=\"text-center\">A<\/th> #>       <th class=\"text-center\">B<\/th> #>       <th class=\"text-center\">C<\/th> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\">r1<\/td> #>       <td class=\"text-center\">1<\/td> #>       <td class=\"text-center\">2<\/td> #>       <td class=\"text-center\">3<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\">r2<\/td> #>       <td class=\"text-center\">4<\/td> #>       <td class=\"text-center\">3<\/td> #>       <td class=\"text-center\">2<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\">r3<\/td> #>       <td class=\"text-center\"><\/td> #>       <td class=\"text-center\"><\/td> #>       <td class=\"text-center\"><\/td> #>     <\/tr> #>     <caption style=\"caption-side:top;\"><div class=\"rtables-titles-block rtables-container\"> #>         <div class=\"rtables-main-titles-block rtables-container\"> #>           <p class=\"rtables-main-title\"><\/p> #>         <\/div> #>         <div class=\"rtables-subtitles-block rtables-container\"><\/div> #>       <\/div> #>     <\/caption> #>   <\/table> #>   <div class=\"rtables-footers-block rtables-container\"><\/div> #> <\/div>  as_html(tbl, class_table = \"table\", class_tr = \"row\") #> <div class=\"rtables-all-parts-block rtables-container\"> #>   <table class=\"table\"> #>     <tr class=\"row\"> #>       <th style=\"white-space:pre;\"><\/th> #>       <th class=\"text-center\">A<\/th> #>       <th class=\"text-center\">B<\/th> #>       <th class=\"text-center\">C<\/th> #>     <\/tr> #>     <tr class=\"row\"> #>       <td class=\"row text-left\">r1<\/td> #>       <td class=\"row text-center\">1<\/td> #>       <td class=\"row text-center\">2<\/td> #>       <td class=\"row text-center\">3<\/td> #>     <\/tr> #>     <tr class=\"row\"> #>       <td class=\"row text-left\">r2<\/td> #>       <td class=\"row text-center\">4<\/td> #>       <td class=\"row text-center\">3<\/td> #>       <td class=\"row text-center\">2<\/td> #>     <\/tr> #>     <tr class=\"row\"> #>       <td class=\"row text-left\">r3<\/td> #>       <td class=\"row text-center\"><\/td> #>       <td class=\"row text-center\"><\/td> #>       <td class=\"row text-center\"><\/td> #>     <\/tr> #>     <caption style=\"caption-side:top;\"><div class=\"rtables-titles-block rtables-container\"> #>         <div class=\"rtables-main-titles-block rtables-container\"> #>           <p class=\"rtables-main-title\"><\/p> #>         <\/div> #>         <div class=\"rtables-subtitles-block rtables-container\"><\/div> #>       <\/div> #>     <\/caption> #>   <\/table> #>   <div class=\"rtables-footers-block rtables-container\"><\/div> #> <\/div>  as_html(tbl, class_td = \"aaa\") #> <div class=\"rtables-all-parts-block rtables-container\"> #>   <table class=\"table table-condensed table-hover\"> #>     <tr> #>       <th style=\"white-space:pre;\"><\/th> #>       <th class=\"text-center\">A<\/th> #>       <th class=\"text-center\">B<\/th> #>       <th class=\"text-center\">C<\/th> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\">r1<\/td> #>       <td class=\"text-center\">1<\/td> #>       <td class=\"text-center\">2<\/td> #>       <td class=\"text-center\">3<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\">r2<\/td> #>       <td class=\"text-center\">4<\/td> #>       <td class=\"text-center\">3<\/td> #>       <td class=\"text-center\">2<\/td> #>     <\/tr> #>     <tr> #>       <td class=\"text-left\">r3<\/td> #>       <td class=\"text-center\"><\/td> #>       <td class=\"text-center\"><\/td> #>       <td class=\"text-center\"><\/td> #>     <\/tr> #>     <caption style=\"caption-side:top;\"><div class=\"rtables-titles-block rtables-container\"> #>         <div class=\"rtables-main-titles-block rtables-container\"> #>           <p class=\"rtables-main-title\"><\/p> #>         <\/div> #>         <div class=\"rtables-subtitles-block rtables-container\"><\/div> #>       <\/div> #>     <\/caption> #>   <\/table> #>   <div class=\"rtables-footers-block rtables-container\"><\/div> #> <\/div>  if (FALSE) { Viewer(tbl) }"},{"path":"https://roche.github.io/rtables/main/reference/asvec.html","id":null,"dir":"Reference","previous_headings":"","what":"convert to a vector — asvec","title":"convert to a vector — asvec","text":"Convert rtables framework object vector, possible. unlikely useful realistic scenarios.","code":""},{"path":"https://roche.github.io/rtables/main/reference/asvec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert to a vector — asvec","text":"","code":"# S4 method for VTableTree as.vector(x, mode = \"any\")"},{"path":"https://roche.github.io/rtables/main/reference/asvec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert to a vector — asvec","text":"x . object converted vector mode character(1). Passed .vector","code":""},{"path":"https://roche.github.io/rtables/main/reference/asvec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert to a vector — asvec","text":"vector chosen mode (error raised one row present).","code":""},{"path":"https://roche.github.io/rtables/main/reference/asvec.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"convert to a vector — asvec","text":"works table single row row object.","code":""},{"path":"https://roche.github.io/rtables/main/reference/avarspl.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a subset tabulation/analysis — AnalyzeVarSplit","title":"Define a subset tabulation/analysis — AnalyzeVarSplit","text":"Define subset tabulation/analysis Define subset tabulation/analysis","code":""},{"path":"https://roche.github.io/rtables/main/reference/avarspl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a subset tabulation/analysis — AnalyzeVarSplit","text":"","code":"AnalyzeVarSplit(   var,   split_label = var,   afun,   defrowlab = \"\",   cfun = NULL,   cformat = NULL,   split_format = NULL,   split_na_str = NA_character_,   inclNAs = FALSE,   split_name = var,   extra_args = list(),   indent_mod = 0L,   label_pos = \"default\",   cvar = \"\" )  AnalyzeColVarSplit(   afun,   defrowlab = \"\",   cfun = NULL,   cformat = NULL,   split_format = NULL,   split_na_str = NA_character_,   inclNAs = FALSE,   split_name = \"\",   extra_args = list(),   indent_mod = 0L,   label_pos = \"default\",   cvar = \"\" )  AnalyzeMultiVars(   var,   split_label = \"\",   afun,   defrowlab = \"\",   cfun = NULL,   cformat = NULL,   split_format = NULL,   split_na_str = NA_character_,   inclNAs = FALSE,   .payload = NULL,   split_name = NULL,   extra_args = list(),   indent_mod = 0L,   child_labels = c(\"default\", \"topleft\", \"visible\", \"hidden\"),   child_names = var,   cvar = \"\",   section_div = NA_character_ )"},{"path":"https://roche.github.io/rtables/main/reference/avarspl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a subset tabulation/analysis — AnalyzeVarSplit","text":"var string, variable name split_label string. Label string associated table generated split. confused labels assigned child (based data type split tabulation). afun function. Analysis function, must take x df first parameter. Can optionally take parameters populated tabulation framework. See Details analyze. defrowlab character. Default row labels specified return value afun cfun list/function/NULL. tabulation function(s) creating content rows. Must accept x df first parameter. Must accept labelstr second argument. Can optionally accept optional arguments accepted analysis functions. See analyze. cformat format spec. Format content rows split_format FormatSpec. Default format associated split created. split_na_str character. NA string vector use split_format. inclNAs boolean. observations NA var variable(s) included performing analysis. Defaults FALSE split_name string. Name associiated split (pathing, etc) extra_args list. Extra arguments passed tabulation function. Element position thte list corresponds children split. Named elements child-specific lists ignored match formal argument ttabulation function. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. label_pos character(1). Location variable label displayed, Accepts  hidden (default non-analyze row splits), visible, topleft, - analyze splits - default.  analyze calls, default indicates variable visible multiple variables analyzed level nesting. cvar character(1). variable, , content function accept. Defaults NA. .payload Used internally, intended set end users. child_labels string. One \"default\", \"visible\", \"hidden\". display behavior  labels (ie label rows) children split. Defaults \"default\" flags label row visible child 0 content rows. child_names character. Names given sub splits contained compound split (typically AnalyzeMultiVars split object). section_div character(1). String repeated section divider group defined split instruciton, NA_character_ (default) section divider.","code":""},{"path":"https://roche.github.io/rtables/main/reference/avarspl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a subset tabulation/analysis — AnalyzeVarSplit","text":"AnalyzeVarSplit object. AnalyzeMultiVars split object.","code":""},{"path":"https://roche.github.io/rtables/main/reference/avarspl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Define a subset tabulation/analysis — AnalyzeVarSplit","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/basic_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout with 1 column and zero rows — basic_table","title":"Layout with 1 column and zero rows — basic_table","text":"Every layout must start basic table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/basic_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout with 1 column and zero rows — basic_table","text":"","code":"basic_table(   title = \"\",   subtitles = character(),   main_footer = character(),   prov_footer = character(),   show_colcounts = FALSE,   inset = 0L )"},{"path":"https://roche.github.io/rtables/main/reference/basic_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layout with 1 column and zero rows — basic_table","text":"title character(1). Main title. Ignored subtables. subtitles character. Subtitles. Ignored subtables. main_footer character. Main global (non-referential) footer materials. prov_footer character. Provenance-related global footer materials. Generally modified hand. show_colcounts logical(1). column counts displayed resulting table layout applied data inset numeric(1). Number spaces inset table header, table body, referential footnotes, main_footer, compared alignment title, subtitle, provenance footer. Defaults 0 (inset).","code":""},{"path":"https://roche.github.io/rtables/main/reference/basic_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layout with 1 column and zero rows — basic_table","text":"PreDataTableLayouts object suitable passing layouting functions, build_table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/basic_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layout with 1 column and zero rows — basic_table","text":"","code":"lyt <- basic_table() %>%   analyze(\"AGE\", afun = mean)  build_table(lyt, DM) #>            all obs      #> ——————————————————————— #> mean   34.2219101123596   lyt <- basic_table(title = \"Title of table\",                    subtitles = c(\"a number\", \"of subtitles\"),                    main_footer = \"test footer\",                    prov_footer = paste(\"test.R program, executed at\",                                        Sys.time())) %>%   split_cols_by(\"ARM\") %>%   analyze(\"AGE\", mean)  build_table(lyt, DM) #> Title of table #> a number #> of subtitles #>  #> ————————————————————————————————————————————————————————————— #>           A: Drug X          B: Placebo       C: Combination  #> ————————————————————————————————————————————————————————————— #> mean   34.9090909090909   33.0188679245283   34.5658914728682 #> ————————————————————————————————————————————————————————————— #>  #> test footer #>  #> test.R program, executed at 2022-11-14 21:21:31"},{"path":"https://roche.github.io/rtables/main/reference/brackets.html","id":null,"dir":"Reference","previous_headings":"","what":"retrieve and assign elements of a TableTree — [<-,VTableTree,ANY,ANY,list-method","title":"retrieve and assign elements of a TableTree — [<-,VTableTree,ANY,ANY,list-method","text":"objects imported packages. Follow links see documentation. base [, [<-","code":""},{"path":"https://roche.github.io/rtables/main/reference/brackets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"retrieve and assign elements of a TableTree — [<-,VTableTree,ANY,ANY,list-method","text":"","code":"# S4 method for VTableTree,ANY,ANY,list [(x, i, j, ...) <- value  # S4 method for VTableTree,ANY,ANY,CellValue [(x, i, j, ...) <- value  # S4 method for VTableTree,logical,logical [(x, i, j, ..., drop = FALSE)  # S4 method for VTableTree,logical,ANY [(x, i, j, ..., drop = FALSE)  # S4 method for VTableTree,logical,missing [(x, i, j, ..., drop = FALSE)  # S4 method for VTableTree,ANY,logical [(x, i, j, ..., drop = FALSE)  # S4 method for VTableTree,ANY,missing [(x, i, j, ..., drop = FALSE)  # S4 method for VTableTree,missing,ANY [(x, i, j, ..., drop = FALSE)  # S4 method for VTableTree,ANY,character [(x, i, j, ..., drop = FALSE)  # S4 method for VTableTree,character,ANY [(x, i, j, ..., drop = FALSE)  # S4 method for VTableTree,character,character [(x, i, j, ..., drop = FALSE)  # S4 method for VTableTree,missing,numeric [(x, i, j, ..., drop = FALSE)  # S4 method for VTableTree,numeric,numeric [(x, i, j, ..., drop = FALSE)  x[i, j, ...]  x[i, j, ...] <- value"},{"path":"https://roche.github.io/rtables/main/reference/brackets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"retrieve and assign elements of a TableTree — [<-,VTableTree,ANY,ANY,list-method","text":"x TableTree index j index ... Includes keep_topleft logical(1) ([ ) 'top-left' material table retained subsetting. Defaults NA, retains material rows included (ie subsetting column), drops otherwise. keep_titles logical(1) title non-referential footer information retained. Defaults FALSE reindex_refs logical(1). referential footnotes re-indexed resulting subset entire table. Defaults TRUE value Replacement value (list, TableRow, TableTree) drop logical(1). value cell returned one cell selected combination j. Defaults FALSE","code":""},{"path":"https://roche.github.io/rtables/main/reference/brackets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"retrieve and assign elements of a TableTree — [<-,VTableTree,ANY,ANY,list-method","text":"TableTree (ElementaryTable) object, unless single cell selected drop=TRUE, case (possibly multi-valued) fully stripped raw value selected cell.","code":""},{"path":"https://roche.github.io/rtables/main/reference/brackets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"retrieve and assign elements of a TableTree — [<-,VTableTree,ANY,ANY,list-method","text":"","code":"l <- basic_table() %>%    split_cols_by(\"ARM\") %>%    analyze(c(\"SEX\", \"AGE\"))  tbl <- build_table(l, DM)  tbl #>                      A: Drug X   B: Placebo   C: Combination #> ———————————————————————————————————————————————————————————— #> SEX                                                          #>   F                     70           56             61       #>   M                     51           50             68       #>   U                      0           0              0        #>   UNDIFFERENTIATED       0           0              0        #> AGE                                                          #>   Mean                 34.91       33.02          34.57       tbl[1, ] #>       A: Drug X   B: Placebo   C: Combination #> ————————————————————————————————————————————— #> SEX                                           tbl[1:2, 2] #>       B: Placebo #> ———————————————— #> SEX              #>   F       56      tbl[2, 1] #>     A: Drug X #> ————————————— #> F      70     tbl[2, 1, drop = TRUE] #> [1] 70  tbl[, 1] #>                      A: Drug X #> —————————————————————————————— #> SEX                            #>   F                     70     #>   M                     51     #>   U                      0     #>   UNDIFFERENTIATED       0     #> AGE                            #>   Mean                 34.91    tbl[-2, ] #>                      A: Drug X   B: Placebo   C: Combination #> ———————————————————————————————————————————————————————————— #> SEX                                                          #>   M                     51           50             68       #>   U                      0           0              0        #>   UNDIFFERENTIATED       0           0              0        #> AGE                                                          #>   Mean                 34.91       33.02          34.57      tbl[, -1] #>                      B: Placebo   C: Combination #> ———————————————————————————————————————————————— #> SEX                                              #>   F                      56             61       #>   M                      50             68       #>   U                      0              0        #>   UNDIFFERENTIATED       0              0        #> AGE                                              #>   Mean                 33.02          34.57       tbl[2, 1] <- rcell(999) tbl[2, ] <- list(rrow(\"FFF\", 888, 666, 777)) tbl[3, ] <- list(-111, -222, -333) tbl #>                      A: Drug X   B: Placebo   C: Combination #> ———————————————————————————————————————————————————————————— #> SEX                                                          #>   FFF                   888         666            777       #>   M                    -111         -222           -333      #>   U                      0           0              0        #>   UNDIFFERENTIATED       0           0              0        #> AGE                                                          #>   Mean                 34.91       33.02          34.57"},{"path":"https://roche.github.io/rtables/main/reference/build_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table from a layout and data — build_table","title":"Create a table from a layout and data — build_table","text":"Layouts used describe table pre-data. build_table used create table using layout dataset.","code":""},{"path":"https://roche.github.io/rtables/main/reference/build_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table from a layout and data — build_table","text":"","code":"build_table(   lyt,   df,   alt_counts_df = NULL,   col_counts = NULL,   col_total = if (is.null(alt_counts_df)) nrow(df) else nrow(alt_counts_df),   topleft = NULL,   hsep = default_hsep(),   ... )"},{"path":"https://roche.github.io/rtables/main/reference/build_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table from a layout and data — build_table","text":"lyt layout object pre-data used tabulation df dataset (data.frame tibble) alt_counts_df dataset (data.frame tibble). Alternative full data rtables framework use () calculating column counts. col_counts numeric (NULL). Deprecated. non-null, column counts override calculated automatically tabulation. Must specify \"counts\" resulting columns non-NULL. NA elements replaced automatically calculated counts. col_total integer(1). total observations across columns. Defaults nrow(df). topleft character. Override values \"top left\" material displayed printing. hsep character(1). Set character(s) repeated separator header body table rendered text. Defaults connected horrizontal line (unicode 2014) locals use UTF charset, - elsewhere (per session warning). ... currently ignored.","code":""},{"path":"https://roche.github.io/rtables/main/reference/build_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table from a layout and data — build_table","text":"TableTree ElementaryTable object representing table created performing tabulations declared lyt data df.","code":""},{"path":"https://roche.github.io/rtables/main/reference/build_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a table from a layout and data — build_table","text":"alt_counts_df specified, column counts calculated applying exact column subsetting expressions determined applying column splitting main data (df) alt_counts_df counting observations resulting subset. particular, means case splitting based cuts data, dynamic cuts calculated based df simply re-used count calculation.","code":""},{"path":"https://roche.github.io/rtables/main/reference/build_table.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a table from a layout and data — build_table","text":"overriding column counts totals care must taken , e.g., length() nrow() called within tabulation functions, give overridden counts. Writing/using tabulation functions accept .N_col .N_total rely column counts (even implicitly) way ensure overriden counts fully respected.","code":""},{"path":"https://roche.github.io/rtables/main/reference/build_table.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a table from a layout and data — build_table","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/build_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a table from a layout and data — build_table","text":"","code":"l <- basic_table() %>%   split_cols_by(\"Species\") %>%   analyze(\"Sepal.Length\", afun = function(x) {   list(     \"mean (sd)\" = rcell(c(mean(x), sd(x)), format = \"xx.xx (xx.xx)\"),     \"range\" = diff(range(x))   ) })  l #> A Pre-data Table Layout #>  #> Column-Split Structure: #> Species (lvls)  #>  #> Row-Split Structure: #> Sepal.Length (** analysis **)  #>   build_table(l, iris) #>               setosa      versicolor     virginica  #> ——————————————————————————————————————————————————— #> mean (sd)   5.01 (0.35)   5.94 (0.52)   6.59 (0.64) #> range           1.5           2.1            3       # analyze multiple variables l <- basic_table() %>%   split_cols_by(\"Species\") %>%   analyze(c(\"Sepal.Length\", \"Petal.Width\"), afun = function(x) {   list(     \"mean (sd)\" = rcell(c(mean(x), sd(x)), format = \"xx.xx (xx.xx)\"),     \"range\" = diff(range(x))   ) })  build_table(l, iris) #>                  setosa      versicolor     virginica  #> —————————————————————————————————————————————————————— #> Sepal.Length                                           #>   mean (sd)    5.01 (0.35)   5.94 (0.52)   6.59 (0.64) #>   range            1.5           2.1            3      #> Petal.Width                                            #>   mean (sd)    0.25 (0.11)   1.33 (0.20)   2.03 (0.27) #>   range            0.5           0.8           1.1      # an example more relevant for clinical trials l <- basic_table() %>%     split_cols_by(\"ARM\") %>%     analyze(\"AGE\", afun = function(x) {       setNames(as.list(fivenum(x)), c(\"minimum\", \"lower-hinge\", \"median\",                                       \"upper-hinge\", \"maximum\"))     })  build_table(l, DM) #>               A: Drug X   B: Placebo   C: Combination #> ————————————————————————————————————————————————————— #> minimum          20           21             22       #> lower-hinge      29           29             30       #> median           33           32             33       #> upper-hinge      39           37             38       #> maximum          60           55             53        build_table(l, subset(DM, AGE > 40)) #>               A: Drug X   B: Placebo   C: Combination #> ————————————————————————————————————————————————————— #> minimum          41           41             41       #> lower-hinge      43           42             43       #> median           45          45.5            45       #> upper-hinge      49           48             47       #> maximum          60           55             53        # with column counts l2 <- l %>%   add_colcounts() build_table(l2, DM) #>               A: Drug X   B: Placebo   C: Combination #>                (N=121)     (N=106)        (N=129)     #> ————————————————————————————————————————————————————— #> minimum          20           21             22       #> lower-hinge      29           29             30       #> median           33           32             33       #> upper-hinge      39           37             38       #> maximum          60           55             53         # with column counts calculated based on different data miniDM <- DM[sample(1:NROW(DM), 100),] build_table(l2, DM, alt_counts_df = miniDM) #>               A: Drug X   B: Placebo   C: Combination #>                (N=34)       (N=27)         (N=39)     #> ————————————————————————————————————————————————————— #> minimum          20           21             22       #> lower-hinge      29           29             30       #> median           33           32             33       #> upper-hinge      39           37             38       #> maximum          60           55             53        build_table(l, DM, col_counts = 1:3) #>               A: Drug X   B: Placebo   C: Combination #>                 (N=1)       (N=2)          (N=3)      #> ————————————————————————————————————————————————————— #> minimum          20           21             22       #> lower-hinge      29           29             30       #> median           33           32             33       #> upper-hinge      39           37             38       #> maximum          60           55             53"},{"path":"https://roche.github.io/rtables/main/reference/cbind_rtables.html","id":null,"dir":"Reference","previous_headings":"","what":"cbind two rtables — cbind_rtables","title":"cbind two rtables — cbind_rtables","text":"cbind two rtables","code":""},{"path":"https://roche.github.io/rtables/main/reference/cbind_rtables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cbind two rtables — cbind_rtables","text":"","code":"cbind_rtables(x, ...)"},{"path":"https://roche.github.io/rtables/main/reference/cbind_rtables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cbind two rtables — cbind_rtables","text":"x table row object ... 1 objects class x","code":""},{"path":"https://roche.github.io/rtables/main/reference/cbind_rtables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cbind two rtables — cbind_rtables","text":"formal table object.","code":""},{"path":"https://roche.github.io/rtables/main/reference/cbind_rtables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cbind two rtables — cbind_rtables","text":"","code":"x <- rtable(c(\"A\", \"B\"), rrow(\"row 1\", 1,2), rrow(\"row 2\", 3, 4))  y <- rtable(\"C\", rrow(\"row 1\", 5), rrow(\"row 2\", 6))  z <- rtable(\"D\", rrow(\"row 1\", 9), rrow(\"row 2\", 10))  t1 <- cbind_rtables(x, y) t1 #>         A   B   C #> ————————————————— #> row 1   1   2   5 #> row 2   3   4   6  t2 <- cbind_rtables(x, y, z) t2 #>         A   B   C   D  #> —————————————————————— #> row 1   1   2   5   9  #> row 2   3   4   6   10  col_paths_summary(t1) #> label    path      #> —————————————————— #> A        manual, A #> B        manual, B #> C        manual, C col_paths_summary(t2) #> label    path      #> —————————————————— #> A        manual, A #> B        manual, B #> C        manual, C #> D        manual, D"},{"path":"https://roche.github.io/rtables/main/reference/cell_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve cell values by row and column path — cell_values","title":"Retrieve cell values by row and column path — cell_values","text":"Retrieve cell values row column path","code":""},{"path":"https://roche.github.io/rtables/main/reference/cell_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve cell values by row and column path — cell_values","text":"","code":"cell_values(tt, rowpath = NULL, colpath = NULL, omit_labrows = TRUE)  # S4 method for VTableTree cell_values(tt, rowpath = NULL, colpath = NULL, omit_labrows = TRUE)  # S4 method for TableRow cell_values(tt, rowpath = NULL, colpath = NULL, omit_labrows = TRUE)  # S4 method for LabelRow cell_values(tt, rowpath = NULL, colpath = NULL, omit_labrows = TRUE)  value_at(tt, rowpath = NULL, colpath = NULL)  # S4 method for VTableTree value_at(tt, rowpath = NULL, colpath = NULL)  # S4 method for TableRow value_at(tt, rowpath = NULL, colpath = NULL)  # S4 method for LabelRow value_at(tt, rowpath = NULL, colpath = NULL)"},{"path":"https://roche.github.io/rtables/main/reference/cell_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve cell values by row and column path — cell_values","text":"tt TableTree (related class). TableTree object representing populated table. rowpath character. Path row-split space desired row(s). Can include \"@content\". colpath character. Path column-split space desired column(s). Can include \"*\". omit_labrows logical(1). label rows underneath rowpath omitted (TRUE, default), return empty lists cell \"values\" (FALSE).","code":""},{"path":"https://roche.github.io/rtables/main/reference/cell_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve cell values by row and column path — cell_values","text":"cell_values, list (regardless type value cells hold). rowpath defines path single row, cell_values returns list cell values row, otherwise list lists, one row captured underneath rowpath. occurs subsetting colpath occured. value_at \"unwrapped\" value single cell, error, combination rowpath colpath define location single cell tt.","code":""},{"path":"https://roche.github.io/rtables/main/reference/cell_values.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieve cell values by row and column path — cell_values","text":"cell_values return single cell's value wrapped list. Use value_at recieve \"bare\" cell value.","code":""},{"path":"https://roche.github.io/rtables/main/reference/cell_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve cell values by row and column path — cell_values","text":"","code":"l <- basic_table() %>% split_cols_by(\"ARM\") %>%    split_cols_by(\"SEX\") %>%    split_rows_by(\"RACE\") %>%    summarize_row_groups() %>%    split_rows_by(\"STRATA1\") %>%    analyze(\"AGE\")  library(dplyr) ## for mutate tbl <- build_table(l, DM %>%     mutate(SEX = droplevels(SEX), RACE = droplevels(RACE)))  row_paths_summary(tbl) #> rowname                      node_class    path                                                                 #> ——————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> ASIAN                        ContentRow    RACE, ASIAN, @content, ASIAN                                         #>   A                          LabelRow      RACE, ASIAN, STRATA1, A                                              #>     Mean                     DataRow       RACE, ASIAN, STRATA1, A, AGE, Mean                                   #>   B                          LabelRow      RACE, ASIAN, STRATA1, B                                              #>     Mean                     DataRow       RACE, ASIAN, STRATA1, B, AGE, Mean                                   #>   C                          LabelRow      RACE, ASIAN, STRATA1, C                                              #>     Mean                     DataRow       RACE, ASIAN, STRATA1, C, AGE, Mean                                   #> BLACK OR AFRICAN AMERICAN    ContentRow    RACE, BLACK OR AFRICAN AMERICAN, @content, BLACK OR AFRICAN AMERICAN #>   A                          LabelRow      RACE, BLACK OR AFRICAN AMERICAN, STRATA1, A                          #>     Mean                     DataRow       RACE, BLACK OR AFRICAN AMERICAN, STRATA1, A, AGE, Mean               #>   B                          LabelRow      RACE, BLACK OR AFRICAN AMERICAN, STRATA1, B                          #>     Mean                     DataRow       RACE, BLACK OR AFRICAN AMERICAN, STRATA1, B, AGE, Mean               #>   C                          LabelRow      RACE, BLACK OR AFRICAN AMERICAN, STRATA1, C                          #>     Mean                     DataRow       RACE, BLACK OR AFRICAN AMERICAN, STRATA1, C, AGE, Mean               #> WHITE                        ContentRow    RACE, WHITE, @content, WHITE                                         #>   A                          LabelRow      RACE, WHITE, STRATA1, A                                              #>     Mean                     DataRow       RACE, WHITE, STRATA1, A, AGE, Mean                                   #>   B                          LabelRow      RACE, WHITE, STRATA1, B                                              #>     Mean                     DataRow       RACE, WHITE, STRATA1, B, AGE, Mean                                   #>   C                          LabelRow      RACE, WHITE, STRATA1, C                                              #>     Mean                     DataRow       RACE, WHITE, STRATA1, C, AGE, Mean                                   col_paths_summary(tbl) #> label             path                        #> ————————————————————————————————————————————— #> A: Drug X         ARM, A: Drug X              #>   F               ARM, A: Drug X, SEX, F      #>   M               ARM, A: Drug X, SEX, M      #> B: Placebo        ARM, B: Placebo             #>   F               ARM, B: Placebo, SEX, F     #>   M               ARM, B: Placebo, SEX, M     #> C: Combination    ARM, C: Combination         #>   F               ARM, C: Combination, SEX, F #>   M               ARM, C: Combination, SEX, M  cell_values(tbl, c(\"RACE\", \"ASIAN\", \"STRATA1\", \"B\"),             c(\"ARM\", \"A: Drug X\", \"SEX\", \"F\")) #> $`A: Drug X.F` #> [1] 33.75 #>   # it's also possible to access multiple values by being less specific cell_values(tbl, c(\"RACE\", \"ASIAN\", \"STRATA1\"),             c(\"ARM\", \"A: Drug X\", \"SEX\", \"F\")) #> $A.AGE.Mean #> $A.AGE.Mean$`A: Drug X.F` #> [1] 30.4 #>  #>  #> $B.AGE.Mean #> $B.AGE.Mean$`A: Drug X.F` #> [1] 33.75 #>  #>  #> $C.AGE.Mean #> $C.AGE.Mean$`A: Drug X.F` #> [1] 36.92308 #>  #>  cell_values(tbl, c(\"RACE\", \"ASIAN\"), c(\"ARM\", \"A: Drug X\", \"SEX\", \"M\")) #> $ASIAN #> $ASIAN$`A: Drug X.M` #> [1] 35.0000000  0.6862745 #>  #>  #> $STRATA1.A.AGE.Mean #> $STRATA1.A.AGE.Mean$`A: Drug X.M` #> [1] 34.41667 #>  #>  #> $STRATA1.B.AGE.Mean #> $STRATA1.B.AGE.Mean$`A: Drug X.M` #> [1] 34.875 #>  #>  #> $STRATA1.C.AGE.Mean #> $STRATA1.C.AGE.Mean$`A: Drug X.M` #> [1] 35.6 #>  #>    ## any arm, male columns from the ASIAN content (ie summary) row cell_values(tbl, c(\"RACE\", \"ASIAN\", \"@content\"),             c(\"ARM\", \"B: Placebo\", \"SEX\", \"M\")) #> $`B: Placebo.M` #> [1] 31.00  0.62 #>  cell_values(tbl, c(\"RACE\", \"ASIAN\", \"@content\"),             c(\"ARM\", \"*\", \"SEX\", \"M\")) #> $`A: Drug X.M` #> [1] 35.0000000  0.6862745 #>  #> $`B: Placebo.M` #> [1] 31.00  0.62 #>  #> $`C: Combination.M` #> [1] 44.0000000  0.6470588 #>   ## all columns cell_values(tbl,  c(\"RACE\", \"ASIAN\", \"STRATA1\", \"B\")) #> $`A: Drug X.F` #> [1] 33.75 #>  #> $`A: Drug X.M` #> [1] 34.875 #>  #> $`B: Placebo.F` #> [1] 32.46154 #>  #> $`B: Placebo.M` #> [1] 30.9375 #>  #> $`C: Combination.F` #> [1] 33.3 #>  #> $`C: Combination.M` #> [1] 35.91667 #>   ## all columns for the Combination arm cell_values(tbl,  c(\"RACE\", \"ASIAN\", \"STRATA1\", \"B\"),             c(\"ARM\", \"C: Combination\")) #> $`C: Combination.F` #> [1] 33.3 #>  #> $`C: Combination.M` #> [1] 35.91667 #>   cvlist <- cell_values(tbl, c(\"RACE\", \"ASIAN\", \"STRATA1\", \"B\", \"AGE\", \"Mean\"),                       c(\"ARM\", \"B: Placebo\", \"SEX\", \"M\")) cvnolist <- value_at(tbl,  c(\"RACE\", \"ASIAN\", \"STRATA1\", \"B\", \"AGE\", \"Mean\"),                      c(\"ARM\", \"B: Placebo\", \"SEX\", \"M\")) stopifnot(identical(cvlist[[1]], cvnolist))"},{"path":"https://roche.github.io/rtables/main/reference/cinfo.html","id":null,"dir":"Reference","previous_headings":"","what":"InstantiatedColumnInfo — InstantiatedColumnInfo-class","title":"InstantiatedColumnInfo — InstantiatedColumnInfo-class","text":"InstantiatedColumnInfo","code":""},{"path":"https://roche.github.io/rtables/main/reference/cinfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"InstantiatedColumnInfo — InstantiatedColumnInfo-class","text":"","code":"InstantiatedColumnInfo(   treelyt = LayoutColTree(),   csubs = list(expression(TRUE)),   extras = list(list()),   cnts = NA_integer_,   total_cnt = NA_integer_,   dispcounts = FALSE,   countformat = \"(N=xx)\",   count_na_str = \"\",   topleft = character() )"},{"path":"https://roche.github.io/rtables/main/reference/cinfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"InstantiatedColumnInfo — InstantiatedColumnInfo-class","text":"treelyt LayoutColTree. csubs list. List subsetting expressions extras list. Extra arguments associated columns cnts integer. Counts. total_cnt integer(1). Total observations represented across columns. dispcounts logical(1). counts displayed header info associated table printed. countformat character(1). Format counts thtey displayed count_na_str character. NA string used formatting counts. Defaults \"\". topleft character. Override values \"top left\" material displayed printing.","code":""},{"path":"https://roche.github.io/rtables/main/reference/cinfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"InstantiatedColumnInfo — InstantiatedColumnInfo-class","text":"InstantiateadColumnInfo object.","code":""},{"path":"https://roche.github.io/rtables/main/reference/clear_imods.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear All Indent Mods from a Table — clear_indent_mods","title":"Clear All Indent Mods from a Table — clear_indent_mods","text":"Clear Indent Mods Table","code":""},{"path":"https://roche.github.io/rtables/main/reference/clear_imods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear All Indent Mods from a Table — clear_indent_mods","text":"","code":"clear_indent_mods(tt)  # S4 method for VTableTree clear_indent_mods(tt)  # S4 method for TableRow clear_indent_mods(tt)"},{"path":"https://roche.github.io/rtables/main/reference/clear_imods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear All Indent Mods from a Table — clear_indent_mods","text":"tt TableTree (related class). TableTree object representing populated table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/clear_imods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear All Indent Mods from a Table — clear_indent_mods","text":"class tt, indent mods set zero.","code":""},{"path":"https://roche.github.io/rtables/main/reference/clear_imods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear All Indent Mods from a Table — clear_indent_mods","text":"","code":"t1 <- basic_table() %>%  summarize_row_groups(\"STUDYID\",label_fstr = \"overall summary\") %>%  split_rows_by(\"AEBODSYS\",  child_labels = \"visible\") %>%  summarize_row_groups(\"STUDYID\", label = \"subgroup summary\") %>%  analyze(\"AGE\", indent_mod = -1L) %>%  build_table(ex_adae) t1 #>                           all obs    #> ———————————————————————————————————— #> overall summary        1934 (100.0%) #>   cl A.1                             #>     subgroup summary    422 (21.8%)  #>     Mean                   34.70     #>   cl B.1                             #>     subgroup summary    178 (9.2%)   #>     Mean                   35.86     #>   cl B.2                             #>     subgroup summary    410 (21.2%)  #>     Mean                   35.42     #>   cl C.1                             #>     subgroup summary    182 (9.4%)   #>     Mean                   33.83     #>   cl C.2                             #>     subgroup summary    166 (8.6%)   #>     Mean                   33.89     #>   cl D.1                             #>     subgroup summary    368 (19.0%)  #>     Mean                   34.39     #>   cl D.2                             #>     subgroup summary    208 (10.8%)  #>     Mean                   34.83     clear_indent_mods(t1) #>                           all obs    #> ———————————————————————————————————— #> overall summary        1934 (100.0%) #>   cl A.1                             #>     subgroup summary    422 (21.8%)  #>       Mean                 34.70     #>   cl B.1                             #>     subgroup summary    178 (9.2%)   #>       Mean                 35.86     #>   cl B.2                             #>     subgroup summary    410 (21.2%)  #>       Mean                 35.42     #>   cl C.1                             #>     subgroup summary    182 (9.4%)   #>       Mean                 33.83     #>   cl C.2                             #>     subgroup summary    166 (8.6%)   #>       Mean                 33.89     #>   cl D.1                             #>     subgroup summary    368 (19.0%)  #>       Mean                 34.39     #>   cl D.2                             #>     subgroup summary    208 (10.8%)  #>       Mean                 34.83"},{"path":"https://roche.github.io/rtables/main/reference/col_accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Column information/structure accessors — clayout","title":"Column information/structure accessors — clayout","text":"Column information/structure accessors","code":""},{"path":"https://roche.github.io/rtables/main/reference/col_accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column information/structure accessors — clayout","text":"","code":"clayout(obj)  # S4 method for VTableNodeInfo clayout(obj)  # S4 method for PreDataTableLayouts clayout(obj)  # S4 method for ANY clayout(obj)  clayout(object) <- value  # S4 method for PreDataTableLayouts clayout(object) <- value  col_info(obj)  # S4 method for VTableNodeInfo col_info(obj)  col_info(obj) <- value  # S4 method for TableRow col_info(obj) <- value  # S4 method for ElementaryTable col_info(obj) <- value  # S4 method for TableTree col_info(obj) <- value  coltree(obj, df = NULL, rtpos = TreePos())  # S4 method for InstantiatedColumnInfo coltree(obj, df = NULL, rtpos = TreePos())  # S4 method for PreDataTableLayouts coltree(obj, df = NULL, rtpos = TreePos())  # S4 method for PreDataColLayout coltree(obj, df = NULL, rtpos = TreePos())  # S4 method for LayoutColTree coltree(obj, df = NULL, rtpos = TreePos())  # S4 method for VTableTree coltree(obj, df = NULL, rtpos = TreePos())  # S4 method for TableRow coltree(obj, df = NULL, rtpos = TreePos())  col_exprs(obj, df = NULL)  # S4 method for PreDataTableLayouts col_exprs(obj, df = NULL)  # S4 method for PreDataColLayout col_exprs(obj, df = NULL)  # S4 method for InstantiatedColumnInfo col_exprs(obj, df = NULL)  col_counts(obj, path = NULL)  # S4 method for InstantiatedColumnInfo col_counts(obj, path = NULL)  # S4 method for VTableNodeInfo col_counts(obj, path = NULL)  col_counts(obj, path = NULL) <- value  # S4 method for InstantiatedColumnInfo col_counts(obj, path = NULL) <- value  # S4 method for VTableNodeInfo col_counts(obj, path = NULL) <- value  col_total(obj)  # S4 method for InstantiatedColumnInfo col_total(obj)  # S4 method for VTableNodeInfo col_total(obj)  col_total(obj) <- value  # S4 method for InstantiatedColumnInfo col_total(obj) <- value  # S4 method for VTableNodeInfo col_total(obj) <- value"},{"path":"https://roche.github.io/rtables/main/reference/col_accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column information/structure accessors — clayout","text":"obj . object accessor access modify object object modify -place value new value df data.frame/NULL. Data use column information generated  Pre-Data layout object rtpos TreePos. Root position. path character NULL. col_counts getter setter . Path (column structure).","code":""},{"path":"https://roche.github.io/rtables/main/reference/col_accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Column information/structure accessors — clayout","text":"LayoutColTree object. Various column information, depending accessor used.","code":""},{"path":"https://roche.github.io/rtables/main/reference/collect_leaves.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect leaves of a table tree — collect_leaves","title":"Collect leaves of a table tree — collect_leaves","text":"Collect leaves table tree","code":""},{"path":"https://roche.github.io/rtables/main/reference/collect_leaves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect leaves of a table tree — collect_leaves","text":"","code":"collect_leaves(tt, incl.cont = TRUE, add.labrows = FALSE)"},{"path":"https://roche.github.io/rtables/main/reference/collect_leaves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect leaves of a table tree — collect_leaves","text":"tt TableTree (related class). TableTree object representing populated table. incl.cont logical. Include rows content tables within tree. Defaults TRUE add.labrows logical. Include label rows. Defaults FALSE","code":""},{"path":"https://roche.github.io/rtables/main/reference/collect_leaves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect leaves of a table tree — collect_leaves","text":"list TableRow objects rows table","code":""},{"path":"https://roche.github.io/rtables/main/reference/compare_rtables.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two rtables — compare_rtables","title":"Compare two rtables — compare_rtables","text":"Prints matrix . means cell matches, X means cell cells match, + cell (row) missing, - cell (row) . structure set TRUE, C indicates columnar structure mismatch, R indicates row-structure mismatch, S indicates mismatch row column structure.","code":""},{"path":"https://roche.github.io/rtables/main/reference/compare_rtables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two rtables — compare_rtables","text":"","code":"compare_rtables(   object,   expected,   tol = 0.1,   comp.attr = TRUE,   structure = FALSE )"},{"path":"https://roche.github.io/rtables/main/reference/compare_rtables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two rtables — compare_rtables","text":"object rtable test expected rtable expected tol numerical tolorance comp.attr boolean. Compare format cells. attributes silently ignored. structure boolean. structure (form column row paths cells) compared. Currently defaults FALSE, subject change future versions.","code":""},{"path":"https://roche.github.io/rtables/main/reference/compare_rtables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two rtables — compare_rtables","text":"matrix class \"rtables_diff\" representing differences object expected described .","code":""},{"path":"https://roche.github.io/rtables/main/reference/compare_rtables.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compare two rtables — compare_rtables","text":"current form compare_rtables take structure account, row cell position.","code":""},{"path":"https://roche.github.io/rtables/main/reference/compare_rtables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two rtables — compare_rtables","text":"","code":"t1 <- rtable(header = c(\"A\", \"B\"), format = \"xx\", rrow(\"row 1\", 1, 2)) t2 <- rtable(header = c(\"A\", \"B\", \"C\"), format = \"xx\", rrow(\"row 1\", 1, 2, 3))  compare_rtables(object = t1, expected = t2) #>   1   2   3   #> 1 \".\" \".\" \"-\" #> attr(,\"info\") #> [1] \"column names are not the same\" #> attr(,\"class\") #> [1] \"rtables_diff\" \"matrix\"       \"array\"         if(interactive()){ Viewer(t1, t2) }   expected <- rtable(     header = c(\"ARM A\\nN=100\", \"ARM B\\nN=200\"),     format = \"xx\",     rrow(\"row 1\", 10, 15),     rrow(),     rrow(\"section title\"),     rrow(\"row colspan\", rcell(c(.345543, .4432423), colspan = 2, format = \"(xx.xx, xx.xx)\"))  )  expected #>                 ARM A    ARM B  #>                 N=100    N=200  #> ——————————————————————————————— #> row 1             10       15   #>                                 #> section title                   #> row colspan      (0.35, 0.44)     object <- rtable(     header = c(\"ARM A\\nN=100\", \"ARM B\\nN=200\"),     format = \"xx\",     rrow(\"row 1\", 10, 15),     rrow(\"section title\"),     rrow(\"row colspan\", rcell(c(.345543, .4432423), colspan = 2, format = \"(xx.xx, xx.xx)\"))  )  compare_rtables(object, expected, comp.attr = FALSE) #>   1   2   #> 1 \".\" \".\" #> 2 \".\" \".\" #> 3 \"X\" \"X\" #> 4 \"-\" \"-\" #> attr(,\"info\") #> [1] \"cell attributes have not been compared\" #> [2] \"row labels are not the same\"            #> attr(,\"class\") #> [1] \"rtables_diff\" \"matrix\"       \"array\"          object <- rtable(     header = c(\"ARM A\\nN=100\", \"ARM B\\nN=200\"),     format = \"xx\",     rrow(\"row 1\", 10, 15),     rrow(),     rrow(\"section title\")  )   compare_rtables(object, expected) #>   1   2   #> 1 \".\" \".\" #> 2 \".\" \".\" #> 3 \".\" \".\" #> 4 \"-\" \"-\" #> attr(,\"info\") #> [1] \"row labels are not the same\" #> attr(,\"class\") #> [1] \"rtables_diff\" \"matrix\"       \"array\"          object <- rtable(     header = c(\"ARM A\\nN=100\", \"ARM B\\nN=200\"),     format = \"xx\",     rrow(\"row 1\", 14, 15.03),     rrow(),     rrow(\"section title\"),     rrow(\"row colspan\", rcell(c(.345543, .4432423), colspan = 2, format = \"(xx.xx, xx.xx)\"))  )   compare_rtables(object, expected) #>      [,1] [,2] #> [1,] \"X\"  \".\"  #> [2,] \".\"  \".\"  #> [3,] \".\"  \".\"  #> [4,] \"X\"  \"X\"  #> attr(,\"class\") #> [1] \"rtables_diff\" \"matrix\"       \"array\"          object <- rtable(     header = c(\"ARM A\\nN=100\", \"ARM B\\nN=200\"),     format = \"xx\",     rrow(\"row 1\", 10, 15),     rrow(),     rrow(\"section title\"),     rrow(\"row colspan\", rcell(c(.345543, .4432423), colspan = 2, format = \"(xx.x, xx.x)\"))  )   compare_rtables(object, expected) #>      [,1] [,2] #> [1,] \".\"  \".\"  #> [2,] \".\"  \".\"  #> [3,] \".\"  \".\"  #> [4,] \"X\"  \"X\"  #> attr(,\"class\") #> [1] \"rtables_diff\" \"matrix\"       \"array\""},{"path":"https://roche.github.io/rtables/main/reference/compat_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Compatability Arg Conventions — compat_args","title":"Compatability Arg Conventions — compat_args","text":"Compatability Arg Conventions","code":""},{"path":"https://roche.github.io/rtables/main/reference/compat_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compatability Arg Conventions — compat_args","text":"","code":"compat_args(   .lst,   FUN,   col_by,   row_by,   row.name,   format,   indent,   col_wise_args,   label,   inset )"},{"path":"https://roche.github.io/rtables/main/reference/compat_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compatability Arg Conventions — compat_args","text":".lst list. already-collected list arguments tot used instead elements .... Arguments passed via ... ignored specified. FUN function. Tabulation fucntion. passed subsets x defined combination col_by row_by returns corresponding cell value col_by (factor data.frame factor length nrow(x) defines levels col_by define column. row_by rows x take per row resulting table row.name NULL FUN argument deparsed used row.name rrow format FUN return formatted rcell format applied indent deprecated. col_wise_args named list containing collections (e.g. vectors lists) data elements column resulting table. data elements passed named argument FUN corresponding element name outer list. Hence, length order collection must match levels col_by. See examples. label character(1). label (confused name) object/structure. inset integer(1). table inset row table constructed. See table_inset.","code":""},{"path":"https://roche.github.io/rtables/main/reference/compat_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compatability Arg Conventions — compat_args","text":"NULL (argument template dummy function)","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/constr_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor Arg Conventions — constr_args","title":"Constructor Arg Conventions — constr_args","text":"Constructor Arg Conventions","code":""},{"path":"https://roche.github.io/rtables/main/reference/constr_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor Arg Conventions — constr_args","text":"","code":"constr_args(   kids,   cont,   lev,   iscontent,   cinfo,   labelrow,   vals,   cspan,   label_pos,   cindent_mod,   cvar,   label,   cextra_args,   child_names,   title,   subtitles,   main_footer,   prov_footer,   footnotes,   page_title,   page_prefix,   section_div,   trailing_sep,   split_na_str,   cna_str,   inset,   table_inset )"},{"path":"https://roche.github.io/rtables/main/reference/constr_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor Arg Conventions — constr_args","text":"kids list. List direct children. cont ElementaryTable. Content table. lev integer. Nesting level (roughly, indentation level practical terms). iscontent logical. TableTree/ElementaryTable constructed content table another TableTree. cinfo InstantiatedColumnInfo (NULL). Column structure object created. labelrow LabelRow. LabelRow object assign Table. Consructed label default specified. vals list. cell values row cspan integer. Column span. 1 indicates spanning. label_pos character(1). Location variable label displayed, Accepts  hidden (default non-analyze row splits), visible, topleft, - analyze splits - default.  analyze calls, default indicates variable visible multiple variables analyzed level nesting. cindent_mod numeric(1). indent modifier content tables generated split. cvar character(1). variable, , content function accept. Defaults NA. label character(1). label (confused name) object/structure. cextra_args list. Extra arguments passed content function tabulating row group summaries. child_names character. Names given sub splits contained compound split (typically AnalyzeMultiVars split object). title character(1). Main title. Ignored subtables. subtitles character. Subtitles. Ignored subtables. main_footer character. Main global (non-referential) footer materials. prov_footer character. Provenance-related global footer materials. Generally modified hand. footnotes list NULL. Referential footnotes applied current level page_title character. Page specific title(s). page_prefix character(1). Prefix, appended split value, forcing pagination children split/table section_div character(1). String repeated section divider group defined split instruciton, NA_character_ (default) section divider. trailing_sep character(1). String used section divider printing last row contained (sub)-table, unless row also last table row printed overall, NA_character_ none (default). generated via layouting, correspond section_div split table represents single facet. split_na_str character. NA string vector use split_format. cna_str character. NA string use cformat content table. inset numeric(1). Number spaces inset table header, table body, referential footnotes, main_footer, compared alignment title, subtitle, provenance footer. Defaults 0 (inset). table_inset numeric(1). Number spaces inset table header, table body, referential footnotes, main_footer, compared alignment title, subtitle, provenance footer. Defaults 0 (inset).","code":""},{"path":"https://roche.github.io/rtables/main/reference/constr_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor Arg Conventions — constr_args","text":"NULL (argument template dummy function)","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/content_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve or set Content Table from a TableTree — content_table","title":"Retrieve or set Content Table from a TableTree — content_table","text":"Returns content table obj TableTree object, NULL otherwise","code":""},{"path":"https://roche.github.io/rtables/main/reference/content_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve or set Content Table from a TableTree — content_table","text":"","code":"content_table(obj)  content_table(obj) <- value"},{"path":"https://roche.github.io/rtables/main/reference/content_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve or set Content Table from a TableTree — content_table","text":"obj TableTree. TableTree value ElementaryTable. new content table obj.","code":""},{"path":"https://roche.github.io/rtables/main/reference/content_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve or set Content Table from a TableTree — content_table","text":"ElementaryTable containing (top level) content rows obj ( NULL obj formal table object).","code":""},{"path":"https://roche.github.io/rtables/main/reference/custom_split_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Split Functions — custom_split_funs","title":"Custom Split Functions — custom_split_funs","text":"Split functions provide work-horse rtables's generalized partitioning. functions accept (sub)set incoming data, split object, return 'splits' data.","code":""},{"path":"https://roche.github.io/rtables/main/reference/custom_split_funs.html","id":"custom-splitting-function-details","dir":"Reference","previous_headings":"","what":"Custom Splitting Function Details","title":"Custom Split Functions — custom_split_funs","text":"User-defined custom split functions can perform type computation incoming data provided meed contract generating 'splits' incoming data 'based ' split object. Split functions functions accept: df data.frame incoming data split spl Split object. largely internal detail custom functions need worry ,  obj_name(spl), example, give name split appear paths resulting table vals pre-calculated values. given non-null values, values returned match . NULL cases can likely ignored labels pre-calculated value labels. values trim TRUE, resulting splits empty removed (Optional) .spl_context data.frame describing previously performed splits collectively arrived df function must output named list following elements: values vector values corresponding splits df datasplit list data.frames representing groupings actual observations df. labels character vector giving string label value listed values element (Optional) extras present, extra arguments passed summary analysis functions whenever executed corresponding element datasplit subset thereof One way generate custom splitting functions wrap existing split functions modify either incoming data called, outputs.","code":""},{"path":"https://roche.github.io/rtables/main/reference/cutsplits.html","id":null,"dir":"Reference","previous_headings":"","what":"Splits for cutting by values of a numeric variable — VarStaticCutSplit-class","title":"Splits for cutting by values of a numeric variable — VarStaticCutSplit-class","text":"Splits cutting values numeric variable Create static cut static cumulative cut split","code":""},{"path":"https://roche.github.io/rtables/main/reference/cutsplits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Splits for cutting by values of a numeric variable — VarStaticCutSplit-class","text":"","code":"make_static_cut_split(   var,   split_label,   cuts,   cutlabels = NULL,   cfun = NULL,   cformat = NULL,   cna_str = NA_character_,   split_format = NULL,   split_na_str = NA_character_,   split_name = var,   child_labels = c(\"default\", \"visible\", \"hidden\"),   extra_args = list(),   indent_mod = 0L,   cindent_mod = 0L,   cvar = \"\",   cextra_args = list(),   label_pos = \"visible\",   cumulative = FALSE,   page_prefix = NA_character_,   section_div = NA_character_ )  VarDynCutSplit(   var,   split_label,   cutfun,   cutlabelfun = function(x) NULL,   cfun = NULL,   cformat = NULL,   cna_str = NA_character_,   split_format = NULL,   split_na_str = NA_character_,   split_name = var,   child_labels = c(\"default\", \"visible\", \"hidden\"),   extra_args = list(),   cumulative = FALSE,   indent_mod = 0L,   cindent_mod = 0L,   cvar = \"\",   cextra_args = list(),   label_pos = \"visible\",   page_prefix = NA_character_,   section_div = NA_character_ )"},{"path":"https://roche.github.io/rtables/main/reference/cutsplits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Splits for cutting by values of a numeric variable — VarStaticCutSplit-class","text":"var string, variable name split_label string. Label string associated table generated split. confused labels assigned child (based data type split tabulation). cuts numeric. Cuts use cutlabels character (NULL). Labels cuts cfun list/function/NULL. tabulation function(s) creating content rows. Must accept x df first parameter. Must accept labelstr second argument. Can optionally accept optional arguments accepted analysis functions. See analyze. cformat format spec. Format content rows cna_str character. NA string use cformat content table. split_format FormatSpec. Default format associated split created. split_na_str character. NA string vector use split_format. split_name string. Name associiated split (pathing, etc) child_labels string. One \"default\", \"visible\", \"hidden\". display behavior  labels (ie label rows) children split. Defaults \"default\" flags label row visible child 0 content rows. extra_args list. Extra arguments passed tabulation function. Element position thte list corresponds children split. Named elements child-specific lists ignored match formal argument ttabulation function. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. cindent_mod numeric(1). indent modifier content tables generated split. cvar character(1). variable, , content function accept. Defaults NA. cextra_args list. Extra arguments passed content function tabulating row group summaries. label_pos character(1). Location variable label displayed, Accepts  hidden (default non-analyze row splits), visible, topleft, - analyze splits - default.  analyze calls, default indicates variable visible multiple variables analyzed level nesting. cumulative logical. cuts treated cumulative. Defaults FALSE page_prefix character(1). Prefix, appended split value, forcing pagination children split/table section_div character(1). String repeated section divider group defined split instruciton, NA_character_ (default) section divider. cutfun function. Function accepts full vector var values returns cut points used (via cut) splitting data tabulation cutlabelfun function. Function returns either labels cuts NULL passed return value cutfun","code":""},{"path":"https://roche.github.io/rtables/main/reference/cutsplits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Splits for cutting by values of a numeric variable — VarStaticCutSplit-class","text":"VarStaticCutSplit, CumulativeCutSplit object make_static_cut_split, VarDynCutSplit object VarDynCutSplit()","code":""},{"path":"https://roche.github.io/rtables/main/reference/df_to_tt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ElementaryTable from data.frame — df_to_tt","title":"Create ElementaryTable from data.frame — df_to_tt","text":"Create ElementaryTable data.frame","code":""},{"path":"https://roche.github.io/rtables/main/reference/df_to_tt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ElementaryTable from data.frame — df_to_tt","text":"","code":"df_to_tt(df)"},{"path":"https://roche.github.io/rtables/main/reference/df_to_tt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ElementaryTable from data.frame — df_to_tt","text":"df data.frame.","code":""},{"path":"https://roche.github.io/rtables/main/reference/df_to_tt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ElementaryTable from data.frame — df_to_tt","text":"ElementaryTable object unnested columns corresponding names(df) row labels corresponding row.names(df)","code":""},{"path":"https://roche.github.io/rtables/main/reference/df_to_tt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ElementaryTable from data.frame — df_to_tt","text":"","code":"df_to_tt(mtcars) #>                       mpg    cyl   disp    hp    drat    wt     qsec    vs   am   gear   carb #> ————————————————————————————————————————————————————————————————————————————————————————————— #> Mazda RX4              21     6     160    110   3.9    2.62    16.46   0    1     4      4   #> Mazda RX4 Wag          21     6     160    110   3.9    2.875   17.02   0    1     4      4   #> Datsun 710            22.8    4     108    93    3.85   2.32    18.61   1    1     4      1   #> Hornet 4 Drive        21.4    6     258    110   3.08   3.215   19.44   1    0     3      1   #> Hornet Sportabout     18.7    8     360    175   3.15   3.44    17.02   0    0     3      2   #> Valiant               18.1    6     225    105   2.76   3.46    20.22   1    0     3      1   #> Duster 360            14.3    8     360    245   3.21   3.57    15.84   0    0     3      4   #> Merc 240D             24.4    4    146.7   62    3.69   3.19     20     1    0     4      2   #> Merc 230              22.8    4    140.8   95    3.92   3.15    22.9    1    0     4      2   #> Merc 280              19.2    6    167.6   123   3.92   3.44    18.3    1    0     4      4   #> Merc 280C             17.8    6    167.6   123   3.92   3.44    18.9    1    0     4      4   #> Merc 450SE            16.4    8    275.8   180   3.07   4.07    17.4    0    0     3      3   #> Merc 450SL            17.3    8    275.8   180   3.07   3.73    17.6    0    0     3      3   #> Merc 450SLC           15.2    8    275.8   180   3.07   3.78     18     0    0     3      3   #> Cadillac Fleetwood    10.4    8     472    205   2.93   5.25    17.98   0    0     3      4   #> Lincoln Continental   10.4    8     460    215    3     5.424   17.82   0    0     3      4   #> Chrysler Imperial     14.7    8     440    230   3.23   5.345   17.42   0    0     3      4   #> Fiat 128              32.4    4    78.7    66    4.08    2.2    19.47   1    1     4      1   #> Honda Civic           30.4    4    75.7    52    4.93   1.615   18.52   1    1     4      2   #> Toyota Corolla        33.9    4    71.1    65    4.22   1.835   19.9    1    1     4      1   #> Toyota Corona         21.5    4    120.1   97    3.7    2.465   20.01   1    0     3      1   #> Dodge Challenger      15.5    8     318    150   2.76   3.52    16.87   0    0     3      2   #> AMC Javelin           15.2    8     304    150   3.15   3.435   17.3    0    0     3      2   #> Camaro Z28            13.3    8     350    245   3.73   3.84    15.41   0    0     3      4   #> Pontiac Firebird      19.2    8     400    175   3.08   3.845   17.05   0    0     3      2   #> Fiat X1-9             27.3    4     79     66    4.08   1.935   18.9    1    1     4      1   #> Porsche 914-2          26     4    120.3   91    4.43   2.14    16.7    0    1     5      2   #> Lotus Europa          30.4    4    95.1    113   3.77   1.513   16.9    1    1     5      2   #> Ford Pantera L        15.8    8     351    264   4.22   3.17    14.5    0    1     5      4   #> Ferrari Dino          19.7    6     145    175   3.62   2.77    15.5    0    1     5      6   #> Maserati Bora          15     8     301    335   3.54   3.57    14.6    0    1     5      8   #> Volvo 142E            21.4    4     121    109   4.11   2.78    18.6    1    1     4      2"},{"path":"https://roche.github.io/rtables/main/reference/dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Table Dimensions — nrow,VTableTree-method","title":"Table Dimensions — nrow,VTableTree-method","text":"Table Dimensions","code":""},{"path":"https://roche.github.io/rtables/main/reference/dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Dimensions — nrow,VTableTree-method","text":"","code":"# S4 method for VTableTree nrow(x)  # S4 method for VTableNodeInfo ncol(x)  # S4 method for VTableNodeInfo dim(x)"},{"path":"https://roche.github.io/rtables/main/reference/dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table Dimensions — nrow,VTableTree-method","text":"x TableTree ElementaryTable object","code":""},{"path":"https://roche.github.io/rtables/main/reference/dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table Dimensions — nrow,VTableTree-method","text":"number rows (nrow), columns (ncol) (dim) object.","code":""},{"path":"https://roche.github.io/rtables/main/reference/dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table Dimensions — nrow,VTableTree-method","text":"","code":"tbl <- basic_table() %>%   split_cols_by(\"ARM\") %>%   analyze(c(\"SEX\", \"AGE\")) %>%   build_table(ex_adsl)  dim(tbl) #> [1] 7 3 nrow(tbl) #> [1] 7 ncol(tbl) #> [1] 3  NROW(tbl) #> [1] 7 NCOL(tbl) #> [1] 3"},{"path":"https://roche.github.io/rtables/main/reference/do_base_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Basic Split (For Use In Custom Split Functions) — do_base_split","title":"Apply Basic Split (For Use In Custom Split Functions) — do_base_split","text":"function intended use inside custom split functions. applies current split custom splitting function default splits can manipulated.","code":""},{"path":"https://roche.github.io/rtables/main/reference/do_base_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Basic Split (For Use In Custom Split Functions) — do_base_split","text":"","code":"do_base_split(spl, df, vals = NULL, labels = NULL, trim = FALSE)"},{"path":"https://roche.github.io/rtables/main/reference/do_base_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Basic Split (For Use In Custom Split Functions) — do_base_split","text":"spl Split object defining partitioning analysis/tabulation data. df dataset (data.frame tibble) vals . Already calculated/known values split. Generally left NULL. labels character. Labels associated vals. NULL vals , whic almost always case. trim logical(1). groups corresponding empty data subsets removed. Defaults FALSE.","code":""},{"path":"https://roche.github.io/rtables/main/reference/do_base_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Basic Split (For Use In Custom Split Functions) — do_base_split","text":"result split applied custom split function, see custom_split_funs","code":""},{"path":"https://roche.github.io/rtables/main/reference/do_base_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Basic Split (For Use In Custom Split Functions) — do_base_split","text":"","code":"uneven_splfun <-function(df, spl, vals = NULL, labels = NULL, trim = FALSE) {     ret <- do_base_split(spl, df, vals, labels, trim)     if(NROW(df) == 0)         ret <- lapply(ret, function(x) x[1])     ret }  lyt <- basic_table() %>%     split_cols_by(\"ARM\") %>%     split_cols_by_multivar(c(\"USUBJID\", \"AESEQ\", \"BMRKR1\"),                            varlabels = c(\"N\", \"E\", \"BMR1\"),                            split_fun = uneven_splfun) %>%     analyze_colvars(list(USUBJID = function(x, ...) length(unique(x)),                          AESEQ = max,                          BMRKR1 = mean))  build_table(lyt, subset(ex_adae, as.numeric(ARM) <= 2)) #>             A: Drug X                    B: Placebo            C: Combination #>     N    E          BMR1          N    E          BMR1               N        #> ————————————————————————————————————————————————————————————————————————————— #>    122   10   6.09356345928374   123   10   5.86496605625578         0"},{"path":"https://roche.github.io/rtables/main/reference/export_as_pdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Export as PDF — export_as_pdf","title":"Export as PDF — export_as_pdf","text":"PDF output based ASCII output created toString","code":""},{"path":"https://roche.github.io/rtables/main/reference/export_as_pdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export as PDF — export_as_pdf","text":"","code":"export_as_pdf(   tt,   file,   page_type = \"letter\",   landscape = FALSE,   pg_width = page_dim(page_type)[if (landscape) 2 else 1],   pg_height = page_dim(page_type)[if (landscape) 1 else 2],   width = NULL,   height = NULL,   margins = c(4, 4, 4, 4),   font_family = \"Courier\",   fontsize = 8,   font_size = fontsize,   paginate = TRUE,   lpp = NULL,   cpp = NULL,   hsep = \"-\",   indent_size = 2,   tf_wrap = TRUE,   max_width = NULL,   colwidths = propose_column_widths(matrix_form(tt, TRUE)),   ... )"},{"path":"https://roche.github.io/rtables/main/reference/export_as_pdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export as PDF — export_as_pdf","text":"tt TableTree (related class). TableTree object representing populated table. file file write, must .pdf extension page_type character(1).   Name     page  type.   See `page_types`.   Ignored  `pg_width`  `pg_height` set directly. landscape logical(1).  dimensions `page_type` inverted  landscape?  Defaults  `FALSE`, ignored `pg_width` `pg_height` set directly. pg_width numeric(1). Page width inches. pg_height numeric(1). Page height inches. width Deprecated,  please  use   pg_width   specify page_type.  width  graphics  region inches height Deprecated,  please  use  pg_height   specify page_type. height  graphics  region inches margins numeric(4). number lines/characters margin bottom, left, top, right sides page. font_family character(1). Name font family. error thrown family named monospaced. Defaults Courier. fontsize Deprecated,  please use  font_size.  size text (points) font_size numeric(1). Fontsize, defaults 12. paginate logical(1). tt paginated writing file. Defaults TRUE sort page dimension specified. lpp numeric. Maximum lines per page including (re)printed header context rows cpp numeric(1) NULL. Width (characters) pages horizontal pagination. NULL (default) indicates horizontal pagination done. hsep character(1). Set character(s) repeated separator header body table rendered text. Defaults connected horrizontal line (unicode 2014) locals use UTF charset, - elsewhere (per session warning). indent_size numeric(1). Number spaces use per indent level. Defaults 2 tf_wrap logical(1).  texts  title, subtitle, footnotes wrapped? max_width integer(1), character(1) NULL. Width title   footer   (including   footnotes)  materials     word-wrapped . NULL,  set current print width  session (`getOption(\"width\")`). set `\"auto\"`, width table (plus table inset) used. Ignored completely `tf_wrap` `FALSE`. colwidths numeric vector. Column widths use vertical pagination. ... arguments passed paginate_table","code":""},{"path":"https://roche.github.io/rtables/main/reference/export_as_pdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export as PDF — export_as_pdf","text":"default, pagination performed, default cpp lpp defined specified page dimensions margins. User-specified lpp cpp values override , used caution. Title footer materials also word-wrapped default (unlike printed terminal), cpp, defined , default max_width.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/export_as_pdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export as PDF — export_as_pdf","text":"","code":"lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   analyze(c(\"AGE\", \"BMRKR2\", \"COUNTRY\"))  tbl <- build_table(lyt, ex_adsl)  if (FALSE) { tf <- tempfile(fileext = \".pdf\") export_as_pdf(tbl, file = tf, pg_height = 4) tf <- tempfile(fileext = \".pdf\") export_as_pdf(tbl, file = tf, lpp = 8) }"},{"path":"https://roche.github.io/rtables/main/reference/export_as_rtf.html","id":null,"dir":"Reference","previous_headings":"","what":"Export table to RTF — export_as_rtf","title":"Export table to RTF — export_as_rtf","text":"Experimental export RTF format.","code":""},{"path":"https://roche.github.io/rtables/main/reference/export_as_rtf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export table to RTF — export_as_rtf","text":"","code":"export_as_rtf(   tt,   file = NULL,   colwidths = propose_column_widths(matrix_form(tt, TRUE)),   page_type = \"letter\",   pg_width = page_dim(page_type)[if (landscape) 2 else 1],   pg_height = page_dim(page_type)[if (landscape) 1 else 2],   landscape = FALSE,   margins = c(bottom = 4, left = 4, top = 4, right = 4),   font_size = 8,   font_family = \"Courier\",   ... )"},{"path":"https://roche.github.io/rtables/main/reference/export_as_rtf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export table to RTF — export_as_rtf","text":"tt TableTree (related class). TableTree object representing populated table. file character(1). File write. colwidths numeric vector. Column widths use vertical pagination. page_type character(1).   Name     page  type.   See `page_types`.   Ignored  `pg_width`  `pg_height` set directly. pg_width numeric(1). Page width inches. pg_height numeric(1). Page height inches. landscape logical(1).  dimensions `page_type` inverted  landscape?  Defaults  `FALSE`, ignored `pg_width` `pg_height` set directly. margins numeric vector interpreted way     par(mar) base graphics. font_size numeric(1). Fontsize, defaults 12. font_family character(1). Name font family. error thrown family named monospaced. Defaults Courier. ... Passed directly paginate_table","code":""},{"path":"https://roche.github.io/rtables/main/reference/export_as_rtf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export table to RTF — export_as_rtf","text":"RTF export occurs via following steps table paginated page size (Verticay horizontally) separate page converted MatrixPrintForm RTF-encoded text Separate rtfs text chunks combined written single RTF file Conversion MatrixPrintForm objects RTF done via formatters::mpf_to_rtf().","code":""},{"path":"https://roche.github.io/rtables/main/reference/export_as_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Export as plain text with page break symbol — export_as_txt","title":"Export as plain text with page break symbol — export_as_txt","text":"Export plain text page break symbol","code":""},{"path":"https://roche.github.io/rtables/main/reference/export_as_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export as plain text with page break symbol — export_as_txt","text":"","code":"export_as_txt(   tt,   file = NULL,   page_type = NULL,   landscape = FALSE,   pg_width = page_dim(page_type)[if (landscape) 2 else 1],   pg_height = page_dim(page_type)[if (landscape) 1 else 2],   font_family = \"Courier\",   font_size = 8,   paginate = .need_pag(page_type, pg_width, pg_height, lpp, cpp),   cpp = NULL,   lpp = NULL,   ...,   page_break = \"\\\\s\\\\n\",   hsep = default_hsep(),   indent_size = 2,   tf_wrap = paginate,   max_width = cpp,   colwidths = propose_column_widths(matrix_form(tt, TRUE)) )"},{"path":"https://roche.github.io/rtables/main/reference/export_as_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export as plain text with page break symbol — export_as_txt","text":"tt TableTree (related class). TableTree object representing populated table. file character(1). File write. page_type character(1).   Name     page  type.   See `page_types`.   Ignored  `pg_width`  `pg_height` set directly. landscape logical(1).  dimensions `page_type` inverted  landscape?  Defaults  `FALSE`, ignored `pg_width` `pg_height` set directly. pg_width numeric(1). Page width inches. pg_height numeric(1). Page height inches. font_family character(1). Name font family. error thrown family named monospaced. Defaults Courier. font_size numeric(1). Fontsize, defaults 12. paginate logical(1). tt paginated writing file. Defaults TRUE sort page dimension specified. cpp numeric(1) NULL. Width (characters) pages horizontal pagination. NULL (default) indicates horizontal pagination done. lpp numeric. Maximum lines per page including (re)printed header context rows ... Passed directly paginate_table page_break character(1). Page break symbol (defaults outputting \"\\s\"). hsep character(1). Set character(s) repeated separator header body table rendered text. Defaults connected horrizontal line (unicode 2014) locals use UTF charset, - elsewhere (per session warning). indent_size numeric(1). Number spaces use per indent level. Defaults 2 tf_wrap logical(1).  texts  title, subtitle, footnotes wrapped? max_width integer(1), character(1) NULL. Width title   footer   (including   footnotes)  materials     word-wrapped . NULL,  set current print width  session (`getOption(\"width\")`). set `\"auto\"`, width table (plus table inset) used. Ignored completely `tf_wrap` `FALSE`. colwidths numeric vector. Column widths use vertical pagination.","code":""},{"path":"https://roche.github.io/rtables/main/reference/export_as_txt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export as plain text with page break symbol — export_as_txt","text":"file (function called side effect writing file.","code":""},{"path":"https://roche.github.io/rtables/main/reference/export_as_txt.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Export as plain text with page break symbol — export_as_txt","text":"specified, font_size used determine pagination based page dimensions. written file populated raw ASCII text, concept font size.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/export_as_txt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export as plain text with page break symbol — export_as_txt","text":"","code":"lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   analyze(c(\"AGE\", \"BMRKR2\", \"COUNTRY\"))  tbl <- build_table(lyt, ex_adsl)  cat(export_as_txt(tbl, file = NULL, paginate = TRUE, lpp = 8)) #>            A: Drug X   B: Placebo   C: Combination #> —————————————————————————————————————————————————— #> AGE                                                #>   Mean       33.77       35.43          35.43      #> BMRKR2                                             #>   LOW         50           45             40       #>   MEDIUM      37           56             42       #>   HIGH        47           33             50       #> \\s\\n           A: Drug X   B: Placebo   C: Combination #> —————————————————————————————————————————————————— #> COUNTRY                                            #>   CHN         74           81             64       #>   USA         10           13             17       #>   BRA         13           7              10       #>   PAK         12           9              10       #>   NGA          8           7              11       #> \\s\\n           A: Drug X   B: Placebo   C: Combination #> —————————————————————————————————————————————————— #> COUNTRY                                            #>   RUS          5           8              6        #>   JPN          5           4              9        #>   GBR          4           3              2        #>   CAN          3           2              3        #>   CHE          0           0              0         if (FALSE) { tf <- tempfile(fileext = \".txt\") export_as_txt(tbl, file = tf) system2(\"cat\", tf) }"},{"path":"https://roche.github.io/rtables/main/reference/format_rcell.html","id":null,"dir":"Reference","previous_headings":"","what":"Format rcell — format_rcell","title":"Format rcell — format_rcell","text":"wrapper around formatters::format_value use CellValue objects","code":""},{"path":"https://roche.github.io/rtables/main/reference/format_rcell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format rcell — format_rcell","text":"","code":"format_rcell(   x,   format,   output = c(\"ascii\", \"html\"),   na_str = obj_na_str(x) %||% \"NA\",   pr_row_format = NULL,   pr_row_na_str = NULL,   shell = FALSE )"},{"path":"https://roche.github.io/rtables/main/reference/format_rcell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format rcell — format_rcell","text":"x object class CellValue, raw value. format character(1) function. format label (string) formatter function apply x. output character(1). Output type. na_str character(1). String displayed value x missing. Defaults \"NA\". pr_row_format list default format coming general row. pr_row_na_str list default \"NA\" string coming general row. shell logical(1). formats returned instead values formats applied. Defaults FALSE.","code":""},{"path":"https://roche.github.io/rtables/main/reference/format_rcell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format rcell — format_rcell","text":"formatted text representing cell","code":""},{"path":"https://roche.github.io/rtables/main/reference/format_rcell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format rcell — format_rcell","text":"","code":"cll <- CellValue(pi, format = \"xx.xxx\") format_rcell(cll) #> [1] \"3.142\"  # Cell values precedes the row values cll <- CellValue(pi, format = \"xx.xxx\") format_rcell(cll, pr_row_format = \"xx.x\") #> [1] \"3.142\"  # Similarly for NA values  cll <- CellValue(NA, format = \"xx.xxx\", format_na_str = \"This is THE NA\") format_rcell(cll, pr_row_na_str = \"This is NA\") #> [1] \"This is THE NA\""},{"path":"https://roche.github.io/rtables/main/reference/formatters_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for generics in the formatters package — obj_name,VNodeInfo-method","title":"Methods for generics in the formatters package — obj_name,VNodeInfo-method","text":"See formatters documentation descriptions generics.","code":""},{"path":"https://roche.github.io/rtables/main/reference/formatters_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for generics in the formatters package — obj_name,VNodeInfo-method","text":"","code":"# S4 method for VNodeInfo obj_name(obj)  # S4 method for Split obj_name(obj)  # S4 method for VNodeInfo obj_name(obj) <- value  # S4 method for Split obj_name(obj) <- value  # S4 method for Split obj_label(obj)  # S4 method for TableRow obj_label(obj)  # S4 method for VTableTree obj_label(obj)  # S4 method for ValueWrapper obj_label(obj)  # S4 method for Split obj_label(obj) <- value  # S4 method for TableRow obj_label(obj) <- value  # S4 method for ValueWrapper obj_label(obj) <- value  # S4 method for VTableTree obj_label(obj) <- value  # S4 method for VTableNodeInfo obj_format(obj)  # S4 method for CellValue obj_format(obj)  # S4 method for Split obj_format(obj)  # S4 method for VTableNodeInfo obj_format(obj) <- value  # S4 method for Split obj_format(obj) <- value  # S4 method for CellValue obj_format(obj) <- value  # S4 method for Split obj_na_str(obj)  # S4 method for VTitleFooter main_title(obj)  # S4 method for VTitleFooter main_title(obj) <- value  # S4 method for VTitleFooter subtitles(obj)  # S4 method for VTitleFooter subtitles(obj) <- value  # S4 method for VTitleFooter main_footer(obj)  # S4 method for VTitleFooter main_footer(obj) <- value  # S4 method for VTitleFooter prov_footer(obj)  # S4 method for VTitleFooter prov_footer(obj) <- value  # S4 method for VTableNodeInfo table_inset(obj)  # S4 method for PreDataTableLayouts table_inset(obj)  # S4 method for VTableNodeInfo table_inset(obj) <- value  # S4 method for PreDataTableLayouts table_inset(obj) <- value  # S4 method for InstantiatedColumnInfo table_inset(obj) <- value  # S4 method for TableRow nlines(x, colwidths = NULL, max_width = NULL)  # S4 method for LabelRow nlines(x, colwidths = NULL, max_width = NULL)  # S4 method for RefFootnote nlines(x, colwidths = NULL, max_width = NULL)  # S4 method for InstantiatedColumnInfo nlines(x, colwidths = NULL, max_width = NULL)  # S4 method for VTableTree make_row_df(   tt,   colwidths = NULL,   visible_only = TRUE,   rownum = 0,   indent = 0L,   path = character(),   incontent = FALSE,   repr_ext = 0L,   repr_inds = integer(),   sibpos = NA_integer_,   nsibs = NA_integer_,   max_width = NULL )  # S4 method for TableRow make_row_df(   tt,   colwidths = NULL,   visible_only = TRUE,   rownum = 0,   indent = 0L,   path = \"root\",   incontent = FALSE,   repr_ext = 0L,   repr_inds = integer(),   sibpos = NA_integer_,   nsibs = NA_integer_,   max_width = NULL )  # S4 method for LabelRow make_row_df(   tt,   colwidths = NULL,   visible_only = TRUE,   rownum = 0,   indent = 0L,   path = \"root\",   incontent = FALSE,   repr_ext = 0L,   repr_inds = integer(),   sibpos = NA_integer_,   nsibs = NA_integer_,   max_width = NULL )"},{"path":"https://roche.github.io/rtables/main/reference/formatters_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for generics in the formatters package — obj_name,VNodeInfo-method","text":"obj . object accessor access modify value new value x object colwidths numeric vector. Column widths use vertical pagination. max_width numeric(1). Width strings wrapped determining many lines require. tt TableTree (related class). TableTree object representing populated table. visible_only logical(1). visible aspects table structure reflected summary. Defaults TRUE. May supported methods. rownum numeric(1). Internal detail set manually. indent integer(1). Internal detail set manually. path character. vector path position within structure tabletree. element represents subsequent choice amongst children previous choice. incontent logical(1). Internal detail set manually. repr_ext integer(1). Internal detail set manually. repr_inds integer. Internal detail set manually. sibpos integer(1). Internal detail set manually. nsibs integer(1). Internal detail set manually.","code":""},{"path":"https://roche.github.io/rtables/main/reference/formatters_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for generics in the formatters package — obj_name,VNodeInfo-method","text":"getters, current value component accessed obj, setters, modified copy obj new value.","code":""},{"path":"https://roche.github.io/rtables/main/reference/formatters_methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for generics in the formatters package — obj_name,VNodeInfo-method","text":" visible_only  TRUE ( default),     methods  return  data.frame  exactly one  row per     visible  row  table-like  object.   useful      reasoning  table  print,  reflect     full pathing space structure (though paths     given work ).  supported,   visible_only   FALSE,  every structural element table (row-space) reflected  returned data.frame,  meaning  full pathing-space  represented rows  layout summary represent printed rows table displayed. arguments beyond tt visible_only present `make_row_df` methods can call `make_row_df` recursively retain information, set top-level call","code":""},{"path":"https://roche.github.io/rtables/main/reference/formatters_methods.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Methods for generics in the formatters package — obj_name,VNodeInfo-method","text":"technically present root tree node excluded summary returne dby make_row_df make_col_df, simply row/column structure tt thus useful pathing pagination.","code":""},{"path":"https://roche.github.io/rtables/main/reference/gen_args.html","id":null,"dir":"Reference","previous_headings":"","what":"General Argument Conventions — gen_args","title":"General Argument Conventions — gen_args","text":"General Argument Conventions","code":""},{"path":"https://roche.github.io/rtables/main/reference/gen_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General Argument Conventions — gen_args","text":"","code":"gen_args(   df,   alt_counts_df,   spl,   pos,   tt,   tr,   verbose,   colwidths,   obj,   x,   value,   object,   path,   label,   label_pos,   cvar,   topleft,   page_prefix,   hsep,   indent_size,   section_div,   na_str,   inset,   table_inset,   ... )"},{"path":"https://roche.github.io/rtables/main/reference/gen_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General Argument Conventions — gen_args","text":"df dataset (data.frame tibble) alt_counts_df dataset (data.frame tibble). Alternative full data rtables framework use () calculating column counts. spl Split object defining partitioning analysis/tabulation data. pos numeric.  top-level set nested splits new layout feature added . Defaults current tt TableTree (related class). TableTree object representing populated table. tr TableRow (related class). TableRow object representing single row within populated table. verbose logical(1). extra debugging messages shown. Defaults FALSE. colwidths numeric vector. Column widths use vertical pagination. obj . object accessor access modify x object value new value object object modify -place path character. vector path position within structure tabletree. element represents subsequent choice amongst children previous choice. label character(1). label (confused name) object/structure. label_pos character(1). Location variable label displayed, Accepts  hidden (default non-analyze row splits), visible, topleft, - analyze splits - default.  analyze calls, default indicates variable visible multiple variables analyzed level nesting. cvar character(1). variable, , content function accept. Defaults NA. topleft character. Override values \"top left\" material displayed printing. page_prefix character(1). Prefix, appended split value, forcing pagination children split/table hsep character(1). Set character(s) repeated separator header body table rendered text. Defaults connected horrizontal line (unicode 2014) locals use UTF charset, - elsewhere (per session warning). indent_size numeric(1). Number spaces use per indent level. Defaults 2 section_div character(1). String repeated section divider group defined split instruciton, NA_character_ (default) section divider. na_str character(1). String displayed value x missing. Defaults \"NA\". inset numeric(1). Number spaces inset table header, table body, referential footnotes, main_footer, compared alignment title, subtitle, provenance footer. Defaults 0 (inset). table_inset numeric(1). Number spaces inset table header, table body, referential footnotes, main_footer, compared alignment title, subtitle, provenance footer. Defaults 0 (inset). ... Passed methods tabulation functions.","code":""},{"path":"https://roche.github.io/rtables/main/reference/gen_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General Argument Conventions — gen_args","text":"NULL (argument template dummy function)","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/gfc.html","id":null,"dir":"Reference","previous_headings":"","what":"get formatted cells — get_formatted_cells","title":"get formatted cells — get_formatted_cells","text":"get formatted cells","code":""},{"path":"https://roche.github.io/rtables/main/reference/gfc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get formatted cells — get_formatted_cells","text":"","code":"get_formatted_cells(obj, shell = FALSE)  # S4 method for TableTree get_formatted_cells(obj, shell = FALSE)  # S4 method for ElementaryTable get_formatted_cells(obj, shell = FALSE)  # S4 method for TableRow get_formatted_cells(obj, shell = FALSE)  # S4 method for LabelRow get_formatted_cells(obj, shell = FALSE)  get_cell_aligns(obj)  # S4 method for TableTree get_cell_aligns(obj)  # S4 method for ElementaryTable get_cell_aligns(obj)  # S4 method for TableRow get_cell_aligns(obj)  # S4 method for LabelRow get_cell_aligns(obj)"},{"path":"https://roche.github.io/rtables/main/reference/gfc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get formatted cells — get_formatted_cells","text":"obj . object accessor access modify shell logical(1). formats returned instead values formats applied. Defaults FALSE.","code":""},{"path":"https://roche.github.io/rtables/main/reference/gfc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get formatted cells — get_formatted_cells","text":"formatted print-strings (body) cells obj.","code":""},{"path":"https://roche.github.io/rtables/main/reference/gfc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get formatted cells — get_formatted_cells","text":"","code":"library(dplyr)  iris2 <- iris %>%   group_by(Species) %>%   mutate(group = as.factor(rep_len(c(\"a\", \"b\"), length.out = n()))) %>%   ungroup()  tbl <- basic_table() %>%   split_cols_by(\"Species\") %>%   split_cols_by(\"group\") %>%   analyze(c(\"Sepal.Length\", \"Petal.Width\"), afun = list_wrap_x(summary) , format = \"xx.xx\") %>%   build_table(iris2)  get_formatted_cells(tbl) #>       [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   #>  [1,] \"\"     \"\"     \"\"     \"\"     \"\"     \"\"     #>  [2,] \"4.40\" \"4.30\" \"5.00\" \"4.90\" \"4.90\" \"5.60\" #>  [3,] \"4.80\" \"4.80\" \"5.60\" \"5.60\" \"6.20\" \"6.30\" #>  [4,] \"5.00\" \"5.00\" \"5.90\" \"5.90\" \"6.50\" \"6.50\" #>  [5,] \"5.02\" \"4.99\" \"5.99\" \"5.88\" \"6.50\" \"6.67\" #>  [6,] \"5.30\" \"5.10\" \"6.40\" \"6.10\" \"6.70\" \"7.20\" #>  [7,] \"5.80\" \"5.70\" \"7.00\" \"6.70\" \"7.70\" \"7.90\" #>  [8,] \"\"     \"\"     \"\"     \"\"     \"\"     \"\"     #>  [9,] \"0.10\" \"0.10\" \"1.00\" \"1.00\" \"1.40\" \"1.50\" #> [10,] \"0.20\" \"0.20\" \"1.20\" \"1.20\" \"1.90\" \"1.80\" #> [11,] \"0.20\" \"0.20\" \"1.30\" \"1.30\" \"2.10\" \"2.00\" #> [12,] \"0.23\" \"0.26\" \"1.35\" \"1.30\" \"2.08\" \"1.98\" #> [13,] \"0.20\" \"0.30\" \"1.50\" \"1.40\" \"2.30\" \"2.20\" #> [14,] \"0.40\" \"0.60\" \"1.80\" \"1.70\" \"2.50\" \"2.50\""},{"path":"https://roche.github.io/rtables/main/reference/head_tail.html","id":null,"dir":"Reference","previous_headings":"","what":"Head and tail methods — head","title":"Head and tail methods — head","text":"Head tail methods","code":""},{"path":"https://roche.github.io/rtables/main/reference/head_tail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Head and tail methods — head","text":"","code":"head(x, ...)  # S4 method for VTableTree head(   x,   n = 6,   ...,   keep_topleft = TRUE,   keep_titles = TRUE,   reindex_refs = FALSE )  tail(x, ...)  # S4 method for VTableTree tail(   x,   n = 6,   ...,   keep_topleft = TRUE,   keep_titles = TRUE,   reindex_refs = FALSE )"},{"path":"https://roche.github.io/rtables/main/reference/head_tail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Head and tail methods — head","text":"x object ... arguments passed methods. n integer vector length dim(x) (1,     non-dimensioned objects). Values specify indices     selected corresponding dimension (along length)     object. positive value n[] includes first/last     n[] indices dimension, negative value     excludes last/first abs(n[]), including remaining     indices. NA non-specified values (length(n) <       length(dim(x))) select indices dimension. Must     contain least one non-missing value. keep_topleft logical(1). TRUE (default), top_left material table carried subset. keep_titles logical(1).  TRUE (default), title footer material table carried subset. reindex_refs logical(1). Defaults FALSE. TRUE, referential footnotes reindexed subset.","code":""},{"path":"https://roche.github.io/rtables/main/reference/horizontal_sep.html","id":null,"dir":"Reference","previous_headings":"","what":"Access or recursively set header-body separator for tables — horizontal_sep","title":"Access or recursively set header-body separator for tables — horizontal_sep","text":"Access recursively set header-body separator tables","code":""},{"path":"https://roche.github.io/rtables/main/reference/horizontal_sep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access or recursively set header-body separator for tables — horizontal_sep","text":"","code":"horizontal_sep(obj)  # S4 method for VTableTree horizontal_sep(obj)  horizontal_sep(obj) <- value  # S4 method for VTableTree horizontal_sep(obj) <- value  # S4 method for TableRow horizontal_sep(obj) <- value"},{"path":"https://roche.github.io/rtables/main/reference/horizontal_sep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access or recursively set header-body separator for tables — horizontal_sep","text":"obj . object accessor access modify value character(1). String use new header/body separator.","code":""},{"path":"https://roche.github.io/rtables/main/reference/horizontal_sep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access or recursively set header-body separator for tables — horizontal_sep","text":"horizontal_sep string acting header separator. horizontal_sep<-, obj, new header separator applied recursively subtables.","code":""},{"path":"https://roche.github.io/rtables/main/reference/in_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Create multiple rows in analysis or summary functions — in_rows","title":"Create multiple rows in analysis or summary functions — in_rows","text":"define cells get placed multiple rows afun","code":""},{"path":"https://roche.github.io/rtables/main/reference/in_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create multiple rows in analysis or summary functions — in_rows","text":"","code":"in_rows(   ...,   .list = NULL,   .names = NULL,   .labels = NULL,   .formats = NULL,   .indent_mods = NULL,   .cell_footnotes = list(NULL),   .row_footnotes = list(NULL),   .aligns = NULL,   .format_na_strs = NULL )"},{"path":"https://roche.github.io/rtables/main/reference/in_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create multiple rows in analysis or summary functions — in_rows","text":"... single row defining expressions .list list. list cell content, usually rcells, .list concatenated ... .names character NULL. Names returned list/structure. .labels character NULL. labels defined rows .formats character NULL. Formats values .indent_mods integer NULL. Indent modificatons defined rows. .cell_footnotes list. Referential footnote messages associated name cells .row_footnotes list. Referential footnotes messages associated name rows .aligns character NULL. Alignments cells. Standard NULL \"center\". See rtables_aligns currently supported alignments. .format_na_strs character NULL. NA strings cells","code":""},{"path":"https://roche.github.io/rtables/main/reference/in_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create multiple rows in analysis or summary functions — in_rows","text":"RowsVerticalSection object (NULL). details object considered internal implementation detail.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/in_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create multiple rows in analysis or summary functions — in_rows","text":"","code":"in_rows(1, 2, 3, .names = c(\"a\", \"b\", \"c\")) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1        a              1          0         a #> 2        b              2          0         b #> 3        c              3          0         c in_rows(1, 2, 3, .labels = c(\"a\", \"b\", \"c\")) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1        a              1          0         a #> 2        b              2          0         b #> 3        c              3          0         c in_rows(1, 2, 3, .names = c(\"a\", \"b\", \"c\"), .labels = c(\"AAA\", \"BBB\", \"CCC\")) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1        a              1          0       AAA #> 2        b              2          0       BBB #> 3        c              3          0       CCC  in_rows(.list = list(a = 1, b = 2, c = 3)) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1        a              1          0         a #> 2        b              2          0         b #> 3        c              3          0         c in_rows(1, 2, .list = list(3), .names = c(\"a\", \"b\", \"c\")) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1        a              1          0         a #> 2        b              2          0         b #> 3        c              3          0         c  basic_table() %>%   split_cols_by(\"ARM\") %>%   analyze(\"AGE\", afun = function(x) {     in_rows(        \"Mean (sd)\" = rcell(c(mean(x), sd(x)), format = \"xx.xx (xx.xx)\"),        \"Range\" = rcell(range(x), format = \"xx.xx - xx.xx\")     )   }) %>%   build_table(ex_adsl) #>               A: Drug X      B: Placebo     C: Combination #> —————————————————————————————————————————————————————————— #> Mean (sd)   33.77 (6.55)    35.43 (7.90)     35.43 (7.72)  #> Range       21.00 - 50.00   21.00 - 62.00   20.00 - 69.00"},{"path":"https://roche.github.io/rtables/main/reference/indent.html","id":null,"dir":"Reference","previous_headings":"","what":"Change indentation of all rrows in an rtable — indent","title":"Change indentation of all rrows in an rtable — indent","text":"Change indentation rrows rtable","code":""},{"path":"https://roche.github.io/rtables/main/reference/indent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change indentation of all rrows in an rtable — indent","text":"","code":"indent(x, by = 1)"},{"path":"https://roche.github.io/rtables/main/reference/indent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change indentation of all rrows in an rtable — indent","text":"x rtable object integer increase indentation rows. Can negative. final indentation smaller 0 indentation set 0.","code":""},{"path":"https://roche.github.io/rtables/main/reference/indent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change indentation of all rrows in an rtable — indent","text":"x indent modifier incremented .","code":""},{"path":"https://roche.github.io/rtables/main/reference/indent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change indentation of all rrows in an rtable — indent","text":"","code":"is_setosa <- iris$Species == \"setosa\" mtbl <- rtable(   header = rheader(     rrow(row.name = NULL, rcell(\"Sepal.Length\", colspan = 2), rcell(\"Petal.Length\", colspan=2)),     rrow(NULL, \"mean\", \"median\", \"mean\", \"median\")   ),   rrow(     row.name = \"All Species\",     mean(iris$Sepal.Length), median(iris$Sepal.Length),     mean(iris$Petal.Length), median(iris$Petal.Length),     format = \"xx.xx\"   ),   rrow(     row.name = \"Setosa\",     mean(iris$Sepal.Length[is_setosa]), median(iris$Sepal.Length[is_setosa]),     mean(iris$Petal.Length[is_setosa]), median(iris$Petal.Length[is_setosa]),     format = \"xx.xx\"   ) ) indent(mtbl) #>                  Sepal.Length      Petal.Length   #>                 mean    median    mean    median  #> ————————————————————————————————————————————————— #>   All Species   5.84     5.80     3.76     4.35   #>   Setosa        5.01     5.00     1.46     1.50   indent(mtbl, 2) #>                    Sepal.Length      Petal.Length   #>                   mean    median    mean    median  #> ——————————————————————————————————————————————————— #>     All Species   5.84     5.80     3.76     4.35   #>     Setosa        5.01     5.00     1.46     1.50"},{"path":"https://roche.github.io/rtables/main/reference/indent_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Indent Strings — indent_string","title":"Indent Strings — indent_string","text":"Used rtables indent row names ASCII output.","code":""},{"path":"https://roche.github.io/rtables/main/reference/indent_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indent Strings — indent_string","text":"","code":"indent_string(x, indent = 0, incr = 2, including_newline = TRUE)"},{"path":"https://roche.github.io/rtables/main/reference/indent_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indent Strings — indent_string","text":"x character vector indent vector length length(x) non-negative integers incr non-negative integer: number spaces per indent level including_newline boolean: newlines also indented","code":""},{"path":"https://roche.github.io/rtables/main/reference/indent_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indent Strings — indent_string","text":"x indented left-padding codeindent*incr white-spaces.","code":""},{"path":"https://roche.github.io/rtables/main/reference/indent_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indent Strings — indent_string","text":"","code":"indent_string(\"a\", 0) #> [1] \"a\" indent_string(\"a\", 1) #> [1] \"  a\" indent_string(letters[1:3], 0:2) #> [1] \"a\"     \"  b\"   \"    c\" indent_string(paste0(letters[1:3], \"\\n\", LETTERS[1:3]), 0:2) #> [1] \"a\\nA\"         \"  b\\n  B\"     \"    c\\n    C\""},{"path":"https://roche.github.io/rtables/main/reference/insert_row_at_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert Row at Path — insert_row_at_path","title":"Insert Row at Path — insert_row_at_path","text":"Insert row existing table directly directly existing data (.e., non-content non-label) row, specified path.","code":""},{"path":"https://roche.github.io/rtables/main/reference/insert_row_at_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert Row at Path — insert_row_at_path","text":"","code":"insert_row_at_path(tt, path, value, after = FALSE)  # S4 method for VTableTree,DataRow insert_row_at_path(tt, path, value, after = FALSE)  # S4 method for VTableTree,ANY insert_row_at_path(tt, path, value)"},{"path":"https://roche.github.io/rtables/main/reference/insert_row_at_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert Row at Path — insert_row_at_path","text":"tt TableTree (related class). TableTree object representing populated table. path character. vector path position within structure tabletree. element represents subsequent choice amongst children previous choice. value new value logical(1). value added row directly (FALSE, default) (TRUE) row specified path.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/insert_row_at_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert Row at Path — insert_row_at_path","text":"","code":"lyt <- basic_table() %>%   split_rows_by(\"COUNTRY\", split_fun = keep_split_levels(c(\"CHN\", \"USA\"))) %>%   analyze(\"AGE\")  tab <- build_table(lyt, DM)  tab2 <- insert_row_at_path(tab, c(\"COUNTRY\", \"CHN\", \"AGE\", \"Mean\"),                           rrow(\"new row\", 555)) tab2 #>             all obs #> ——————————————————— #> CHN                 #>   new row     555   #>   Mean       34.64  #> USA                 #>   Mean       35.30  tab2 <- insert_row_at_path(tab2, c(\"COUNTRY\", \"CHN\", \"AGE\", \"Mean\"),                           rrow(\"new row redux\", 888),                           after = TRUE) tab2 #>                   all obs #> ————————————————————————— #> CHN                       #>   new row           555   #>   Mean             34.64  #>   new row redux     888   #> USA                       #>   Mean             35.30"},{"path":"https://roche.github.io/rtables/main/reference/insert_rrow.html","id":null,"dir":"Reference","previous_headings":"","what":"[DEPRECATED] insert rrows at (before) a specific location — insert_rrow","title":"[DEPRECATED] insert rrows at (before) a specific location — insert_rrow","text":"function deprecated removed future release rtables. Please use insert_row_at_path label_at_path instead.","code":""},{"path":"https://roche.github.io/rtables/main/reference/insert_rrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"[DEPRECATED] insert rrows at (before) a specific location — insert_rrow","text":"","code":"insert_rrow(tbl, rrow, at = 1, ascontent = FALSE)"},{"path":"https://roche.github.io/rtables/main/reference/insert_rrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"[DEPRECATED] insert rrows at (before) a specific location — insert_rrow","text":"tbl rtable rrow rrow append rtable position put rrow, defaults beginning (ie 1) ascontent logical. Currently ignored.","code":""},{"path":"https://roche.github.io/rtables/main/reference/insert_rrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"[DEPRECATED] insert rrows at (before) a specific location — insert_rrow","text":"TableTree specific class tbl","code":""},{"path":"https://roche.github.io/rtables/main/reference/insert_rrow.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"[DEPRECATED] insert rrows at (before) a specific location — insert_rrow","text":"Label rows (ie row data values, row.name) can inserted positions already contain label row non-trivial nested row structure tbl","code":""},{"path":"https://roche.github.io/rtables/main/reference/insert_rrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"[DEPRECATED] insert rrows at (before) a specific location — insert_rrow","text":"","code":"o <- options(warn = 0) tbl <- basic_table() %>%     split_cols_by(\"Species\") %>%     analyze(\"Sepal.Length\") %>%     build_table(iris)  insert_rrow(tbl, rrow(\"Hello World\")) #> Warning: 'insert_rrow' is deprecated. #> Use 'insert_row_at_path or label_at_path(tab)<-' instead. #> See help(\"Deprecated\") #>               setosa   versicolor   virginica #> ————————————————————————————————————————————— #> Hello World                                   #> Mean           5.01       5.94        6.59    insert_rrow(tbl, rrow(\"Hello World\"), at = 2) #> Warning: 'insert_rrow' is deprecated. #> Use 'insert_row_at_path or label_at_path(tab)<-' instead. #> See help(\"Deprecated\") #>               setosa   versicolor   virginica #> ————————————————————————————————————————————— #> Mean           5.01       5.94        6.59    #> Hello World                                    tbl2 <- basic_table() %>%     split_cols_by(\"Species\") %>%     split_rows_by(\"Species\") %>%     analyze(\"Sepal.Length\") %>%     build_table(iris)  insert_rrow(tbl2, rrow(\"Hello World\")) #> Warning: 'insert_rrow' is deprecated. #> Use 'insert_row_at_path or label_at_path(tab)<-' instead. #> See help(\"Deprecated\") #>               setosa   versicolor   virginica #> ————————————————————————————————————————————— #> Hello World                                   #> setosa                                        #>   Mean         5.01        NA          NA     #> versicolor                                    #>   Mean          NA        5.94         NA     #> virginica                                     #>   Mean          NA         NA         6.59    insert_rrow(tbl2, rrow(\"Hello World\"), at = 2) #> Warning: 'insert_rrow' is deprecated. #> Use 'insert_row_at_path or label_at_path(tab)<-' instead. #> See help(\"Deprecated\") #>                 setosa   versicolor   virginica #> ——————————————————————————————————————————————— #> setosa                                          #>   Hello World                                   #>     Mean         5.01        NA          NA     #> versicolor                                      #>   Mean            NA        5.94         NA     #> virginica                                       #>   Mean            NA         NA         6.59    insert_rrow(tbl2, rrow(\"Hello World\"), at = 4) #> Warning: 'insert_rrow' is deprecated. #> Use 'insert_row_at_path or label_at_path(tab)<-' instead. #> See help(\"Deprecated\") #>                 setosa   versicolor   virginica #> ——————————————————————————————————————————————— #> setosa                                          #>   Mean           5.01        NA          NA     #> versicolor                                      #>   Hello World                                   #>     Mean          NA        5.94         NA     #> virginica                                       #>   Mean            NA         NA         6.59     insert_rrow(tbl2, rrow(\"new row\", 5, 6, 7)) #> Warning: 'insert_rrow' is deprecated. #> Use 'insert_row_at_path or label_at_path(tab)<-' instead. #> See help(\"Deprecated\") #>              setosa   versicolor   virginica #> ———————————————————————————————————————————— #> new row        5          6            7     #> setosa                                       #>   Mean        5.01        NA          NA     #> versicolor                                   #>   Mean         NA        5.94         NA     #> virginica                                    #>   Mean         NA         NA         6.59     insert_rrow(tbl2, rrow(\"new row\", 5, 6, 7), at = 3) #> Warning: 'insert_rrow' is deprecated. #> Use 'insert_row_at_path or label_at_path(tab)<-' instead. #> See help(\"Deprecated\") #>              setosa   versicolor   virginica #> ———————————————————————————————————————————— #> setosa                                       #>   Mean        5.01        NA          NA     #>   new row      5          6            7     #> versicolor                                   #>   Mean         NA        5.94         NA     #> virginica                                    #>   Mean         NA         NA         6.59     options(o)"},{"path":"https://roche.github.io/rtables/main/reference/int_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"combine SplitVector objects — internal_methods","title":"combine SplitVector objects — internal_methods","text":"internal methods documented satisfy R CMD check. End users pay attention documentation.","code":""},{"path":"https://roche.github.io/rtables/main/reference/int_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"combine SplitVector objects — internal_methods","text":"","code":"# S4 method for SplitVector c(x, ...)  split_rows(lyt = NULL, spl, pos, cmpnd_fun = AnalyzeMultiVars)  # S4 method for `NULL` split_rows(lyt = NULL, spl, pos, cmpnd_fun = AnalyzeMultiVars)  # S4 method for PreDataRowLayout split_rows(lyt = NULL, spl, pos, cmpnd_fun = AnalyzeMultiVars)  # S4 method for SplitVector split_rows(lyt = NULL, spl, pos, cmpnd_fun = AnalyzeMultiVars)  # S4 method for PreDataTableLayouts split_rows(lyt, spl, pos)  # S4 method for ANY split_rows(lyt, spl, pos)  cmpnd_last_rowsplit(lyt, spl, constructor)  # S4 method for `NULL` cmpnd_last_rowsplit(lyt, spl, constructor)  # S4 method for PreDataRowLayout cmpnd_last_rowsplit(lyt, spl, constructor)  # S4 method for SplitVector cmpnd_last_rowsplit(lyt, spl, constructor)  # S4 method for PreDataTableLayouts cmpnd_last_rowsplit(lyt, spl, constructor)  # S4 method for ANY cmpnd_last_rowsplit(lyt, spl, constructor)  split_cols(lyt = NULL, spl, pos)  # S4 method for `NULL` split_cols(lyt = NULL, spl, pos)  # S4 method for PreDataColLayout split_cols(lyt = NULL, spl, pos)  # S4 method for SplitVector split_cols(lyt = NULL, spl, pos)  # S4 method for PreDataTableLayouts split_cols(lyt = NULL, spl, pos)  # S4 method for ANY split_cols(lyt = NULL, spl, pos)  .add_row_summary(   lyt,   label,   cfun,   child_labels = c(\"default\", \"visible\", \"hidden\"),   cformat = NULL,   cna_str = \"-\",   indent_mod = 0L,   cvar = \"\",   extra_args = list() )  # S4 method for PreDataTableLayouts .add_row_summary(   lyt,   label,   cfun,   child_labels = c(\"default\", \"visible\", \"hidden\"),   cformat = NULL,   cna_str = \"-\",   indent_mod = 0L,   cvar = \"\",   extra_args = list() )  # S4 method for PreDataRowLayout .add_row_summary(   lyt,   label,   cfun,   child_labels = c(\"default\", \"visible\", \"hidden\"),   cformat = NULL,   cna_str = \"-\",   indent_mod = 0L,   cvar = \"\",   extra_args = list() )  # S4 method for SplitVector .add_row_summary(   lyt,   label,   cfun,   child_labels = c(\"default\", \"visible\", \"hidden\"),   cformat = NULL,   cna_str = \"-\",   indent_mod = 0L,   cvar = \"\",   extra_args = list() )  # S4 method for Split .add_row_summary(   lyt,   label,   cfun,   child_labels = c(\"default\", \"visible\", \"hidden\"),   cformat = NULL,   cna_str = \"-\",   indent_mod = 0L,   cvar = \"\",   extra_args = list() )  fix_dyncuts(spl, df)  # S4 method for Split fix_dyncuts(spl, df)  # S4 method for VarDynCutSplit fix_dyncuts(spl, df)  # S4 method for VTableTree fix_dyncuts(spl, df)  # S4 method for PreDataRowLayout fix_dyncuts(spl, df)  # S4 method for PreDataColLayout fix_dyncuts(spl, df)  # S4 method for SplitVector fix_dyncuts(spl, df)  # S4 method for PreDataTableLayouts fix_dyncuts(spl, df)  summarize_rows_inner(obj, depth = 0, indent = 0)  # S4 method for TableTree summarize_rows_inner(obj, depth = 0, indent = 0)  # S4 method for ElementaryTable summarize_rows_inner(obj, depth = 0, indent = 0)  # S4 method for TableRow summarize_rows_inner(obj, depth = 0, indent = 0)  # S4 method for LabelRow summarize_rows_inner(obj, depth = 0, indent = 0)  table_structure_inner(obj, depth = 0, indent = 0, print_indent = 0)  # S4 method for VTableTree str(object, ...)  # S4 method for TableTree table_structure_inner(obj, depth = 0, indent = 0, print_indent = 0)  # S4 method for ElementaryTable table_structure_inner(obj, depth = 0, indent = 0, print_indent = 0)  # S4 method for TableRow table_structure_inner(obj, depth = 0, indent = 0, print_indent = 0)  # S4 method for LabelRow table_structure_inner(obj, depth = 0, indent = 0, print_indent = 0)  # S4 method for TableRow nrow(x)  # S4 method for TableRow ncol(x)  # S4 method for LabelRow ncol(x)  # S4 method for InstantiatedColumnInfo ncol(x)  # S4 method for VTree tree_children(x)  # S4 method for VTableTree tree_children(x)  # S4 method for ANY tree_children(x)  # S4 method for VTree tree_children(x) <- value  # S4 method for VTableTree tree_children(x) <- value  # S4 method for TableTree content_table(obj)  # S4 method for ANY content_table(obj)  # S4 method for TableTree,ElementaryTable content_table(obj) <- value  next_rpos(obj, nested = TRUE, for_analyze = FALSE)  # S4 method for PreDataTableLayouts next_rpos(obj, nested = TRUE, for_analyze = FALSE)  # S4 method for PreDataRowLayout next_rpos(obj, nested = TRUE, for_analyze = FALSE)  # S4 method for ANY next_rpos(obj, nested)  next_cpos(obj, nested = TRUE)  # S4 method for PreDataTableLayouts next_cpos(obj, nested = TRUE)  # S4 method for PreDataColLayout next_cpos(obj, nested = TRUE)  # S4 method for ANY next_cpos(obj, nested = TRUE)  last_rowsplit(obj)  # S4 method for `NULL` last_rowsplit(obj)  # S4 method for SplitVector last_rowsplit(obj)  # S4 method for PreDataRowLayout last_rowsplit(obj)  # S4 method for PreDataTableLayouts last_rowsplit(obj)  rlayout(obj)  # S4 method for PreDataTableLayouts rlayout(obj)  # S4 method for ANY rlayout(obj)  rlayout(object) <- value  # S4 method for PreDataTableLayouts rlayout(object) <- value  tree_pos(obj)  # S4 method for VLayoutNode tree_pos(obj)  pos_subset(obj)  # S4 method for TreePos pos_subset(obj)  # S4 method for VLayoutNode pos_subset(obj)  pos_splits(obj)  # S4 method for TreePos pos_splits(obj)  # S4 method for VLayoutNode pos_splits(obj)  pos_splvals(obj)  # S4 method for TreePos pos_splvals(obj)  # S4 method for VLayoutNode pos_splvals(obj)  pos_splval_labels(obj)  # S4 method for TreePos pos_splval_labels(obj)  spl_payload(obj)  # S4 method for Split spl_payload(obj)  spl_payload(obj) <- value  # S4 method for Split spl_payload(obj) <- value  spl_label_var(obj)  # S4 method for VarLevelSplit spl_label_var(obj)  # S4 method for Split spl_label_var(obj)  tt_labelrow(obj)  # S4 method for VTableTree tt_labelrow(obj)  tt_labelrow(obj) <- value  # S4 method for VTableTree,LabelRow tt_labelrow(obj) <- value  labelrow_visible(obj)  # S4 method for VTableTree labelrow_visible(obj)  # S4 method for LabelRow labelrow_visible(obj)  # S4 method for VAnalyzeSplit labelrow_visible(obj)  labelrow_visible(obj) <- value  # S4 method for VTableTree labelrow_visible(obj) <- value  # S4 method for LabelRow labelrow_visible(obj) <- value  # S4 method for VAnalyzeSplit labelrow_visible(obj) <- value  label_kids(spl)  # S4 method for Split label_kids(spl)  label_kids(spl) <- value  # S4 method for Split,character label_kids(spl) <- value  # S4 method for Split,logical label_kids(spl) <- value  vis_label(spl)  # S4 method for Split vis_label(spl)  label_position(spl)  # S4 method for Split label_position(spl)  # S4 method for VAnalyzeSplit label_position(spl)  label_position(spl) <- value  # S4 method for Split label_position(spl) <- value  content_fun(obj)  # S4 method for Split content_fun(obj)  content_fun(object) <- value  # S4 method for Split content_fun(object) <- value  analysis_fun(obj)  # S4 method for AnalyzeVarSplit analysis_fun(obj)  # S4 method for AnalyzeColVarSplit analysis_fun(obj)  split_fun(obj)  # S4 method for CustomizableSplit split_fun(obj)  # S4 method for Split split_fun(obj)  split_fun(obj) <- value  # S4 method for CustomizableSplit split_fun(obj) <- value  # S4 method for Split split_fun(obj) <- value  content_extra_args(obj)  # S4 method for Split content_extra_args(obj)  content_extra_args(object) <- value  # S4 method for Split content_extra_args(object) <- value  content_var(obj)  # S4 method for Split content_var(obj)  content_var(object) <- value  # S4 method for Split content_var(object) <- value  avar_inclNAs(obj)  # S4 method for VAnalyzeSplit avar_inclNAs(obj)  avar_inclNAs(obj) <- value  # S4 method for VAnalyzeSplit avar_inclNAs(obj) <- value  spl_labelvar(obj)  # S4 method for VarLevelSplit spl_labelvar(obj)  spl_child_order(obj)  # S4 method for VarLevelSplit spl_child_order(obj)  spl_child_order(obj) <- value  # S4 method for VarLevelSplit spl_child_order(obj) <- value  # S4 method for ManualSplit spl_child_order(obj)  # S4 method for MultiVarSplit spl_child_order(obj)  # S4 method for AllSplit spl_child_order(obj)  # S4 method for VarStaticCutSplit spl_child_order(obj)  root_spl(obj)  # S4 method for PreDataAxisLayout root_spl(obj)  root_spl(obj) <- value  # S4 method for PreDataAxisLayout root_spl(obj) <- value  spanned_values(obj)  # S4 method for TableRow spanned_values(obj)  # S4 method for LabelRow spanned_values(obj)  spanned_cells(obj)  # S4 method for TableRow spanned_cells(obj)  # S4 method for LabelRow spanned_cells(obj)  spanned_values(obj) <- value  # S4 method for TableRow spanned_values(obj) <- value  # S4 method for LabelRow spanned_values(obj) <- value  obj_na_str(obj)  obj_na_str(obj) <- value  # S4 method for CellValue obj_na_str(obj) <- value  # S4 method for VTableNodeInfo obj_na_str(obj) <- value  # S4 method for Split obj_na_str(obj) <- value  # S4 method for VTableNodeInfo obj_na_str(obj)  # S4 method for ANY obj_na_str(obj)  set_format_recursive(obj, format, na_str, override = FALSE)  # S4 method for TableRow set_format_recursive(obj, format, na_str, override = FALSE)  # S4 method for LabelRow set_format_recursive(obj, format, override = FALSE)  content_format(obj)  # S4 method for Split content_format(obj)  content_format(obj) <- value  # S4 method for Split content_format(obj) <- value  content_na_str(obj)  # S4 method for Split content_na_str(obj)  content_na_str(obj) <- value  # S4 method for Split content_na_str(obj) <- value  # S4 method for TableTree collect_leaves(tt, incl.cont = TRUE, add.labrows = FALSE)  # S4 method for ElementaryTable collect_leaves(tt, incl.cont = TRUE, add.labrows = FALSE)  # S4 method for VTree collect_leaves(tt, incl.cont = TRUE, add.labrows = FALSE)  # S4 method for VLeaf collect_leaves(tt, incl.cont = TRUE, add.labrows = FALSE)  # S4 method for `NULL` collect_leaves(tt, incl.cont = TRUE, add.labrows = FALSE)  # S4 method for ANY collect_leaves(tt, incl.cont = TRUE, add.labrows = FALSE)  row_cspans(obj)  # S4 method for TableRow row_cspans(obj)  # S4 method for LabelRow row_cspans(obj)  row_cspans(obj) <- value  # S4 method for TableRow row_cspans(obj) <- value  # S4 method for LabelRow row_cspans(obj) <- value  cell_cspan(obj)  # S4 method for CellValue cell_cspan(obj)  cell_cspan(obj) <- value  # S4 method for CellValue cell_cspan(obj) <- value  cell_align(obj)  # S4 method for CellValue cell_align(obj)  cell_align(obj) <- value  # S4 method for CellValue cell_align(obj) <- value  tt_level(obj)  # S4 method for VNodeInfo tt_level(obj)  tt_level(obj) <- value  # S4 method for VNodeInfo tt_level(obj) <- value  # S4 method for VTableTree tt_level(obj) <- value  indent_mod(obj)  # S4 method for Split indent_mod(obj)  # S4 method for VTableNodeInfo indent_mod(obj)  # S4 method for ANY indent_mod(obj)  # S4 method for RowsVerticalSection indent_mod(obj)  indent_mod(obj) <- value  # S4 method for Split indent_mod(obj) <- value  # S4 method for VTableNodeInfo indent_mod(obj) <- value  # S4 method for CellValue indent_mod(obj) <- value  # S4 method for RowsVerticalSection indent_mod(obj) <- value  content_indent_mod(obj)  # S4 method for Split content_indent_mod(obj)  # S4 method for VTableNodeInfo content_indent_mod(obj)  content_indent_mod(obj) <- value  # S4 method for Split content_indent_mod(obj) <- value  # S4 method for VTableNodeInfo content_indent_mod(obj) <- value  rawvalues(obj)  # S4 method for ValueWrapper rawvalues(obj)  # S4 method for LevelComboSplitValue rawvalues(obj)  # S4 method for list rawvalues(obj)  # S4 method for ANY rawvalues(obj)  # S4 method for CellValue rawvalues(obj)  # S4 method for TreePos rawvalues(obj)  # S4 method for RowsVerticalSection rawvalues(obj)  value_names(obj)  # S4 method for ANY value_names(obj)  # S4 method for TreePos value_names(obj)  # S4 method for list value_names(obj)  # S4 method for ValueWrapper value_names(obj)  # S4 method for LevelComboSplitValue value_names(obj)  # S4 method for RowsVerticalSection value_names(obj)  value_labels(obj)  # S4 method for ANY value_labels(obj)  # S4 method for TreePos value_labels(obj)  # S4 method for list value_labels(obj)  # S4 method for RowsVerticalSection value_labels(obj)  # S4 method for ValueWrapper value_labels(obj)  # S4 method for LevelComboSplitValue value_labels(obj)  # S4 method for MultiVarSplit value_labels(obj)  spl_varlabels(obj)  # S4 method for MultiVarSplit spl_varlabels(obj)  spl_varlabels(object) <- value  # S4 method for MultiVarSplit spl_varlabels(object) <- value  splv_extra(obj)  # S4 method for SplitValue splv_extra(obj)  splv_extra(obj) <- value  # S4 method for SplitValue splv_extra(obj) <- value  split_exargs(obj)  # S4 method for Split split_exargs(obj)  split_exargs(obj) <- value  # S4 method for Split split_exargs(obj) <- value  col_extra_args(obj, df = NULL)  # S4 method for InstantiatedColumnInfo col_extra_args(obj, df = NULL)  # S4 method for PreDataTableLayouts col_extra_args(obj, df = NULL)  # S4 method for PreDataColLayout col_extra_args(obj, df = NULL)  # S4 method for LayoutColTree col_extra_args(obj, df = NULL)  # S4 method for LayoutColLeaf col_extra_args(obj, df = NULL)  disp_ccounts(obj)  # S4 method for VTableTree disp_ccounts(obj)  # S4 method for InstantiatedColumnInfo disp_ccounts(obj)  # S4 method for PreDataTableLayouts disp_ccounts(obj)  # S4 method for PreDataColLayout disp_ccounts(obj)  disp_ccounts(obj) <- value  # S4 method for VTableTree disp_ccounts(obj) <- value  # S4 method for InstantiatedColumnInfo disp_ccounts(obj) <- value  # S4 method for PreDataColLayout disp_ccounts(obj) <- value  # S4 method for LayoutColTree disp_ccounts(obj) <- value  # S4 method for PreDataTableLayouts disp_ccounts(obj) <- value  colcount_format(obj)  # S4 method for InstantiatedColumnInfo colcount_format(obj)  # S4 method for VTableNodeInfo colcount_format(obj)  # S4 method for PreDataColLayout colcount_format(obj)  # S4 method for PreDataTableLayouts colcount_format(obj)  colcount_format(obj) <- value  # S4 method for InstantiatedColumnInfo colcount_format(obj) <- value  # S4 method for VTableNodeInfo colcount_format(obj) <- value  # S4 method for PreDataColLayout colcount_format(obj) <- value  # S4 method for PreDataTableLayouts colcount_format(obj) <- value  # S4 method for TableRow as.vector(x, mode = \"any\")  # S4 method for ElementaryTable as.vector(x, mode = \"any\")  spl_cuts(obj)  # S4 method for VarStaticCutSplit spl_cuts(obj)  spl_cutlabels(obj)  # S4 method for VarStaticCutSplit spl_cutlabels(obj)  spl_cutfun(obj)  # S4 method for VarDynCutSplit spl_cutfun(obj)  spl_cutlabelfun(obj)  # S4 method for VarDynCutSplit spl_cutlabelfun(obj)  spl_is_cmlcuts(obj)  # S4 method for VarDynCutSplit spl_is_cmlcuts(obj)  spl_varnames(obj)  # S4 method for MultiVarSplit spl_varnames(obj)  spl_varnames(object) <- value  # S4 method for MultiVarSplit spl_varnames(object) <- value  # S4 method for TableRow row_footnotes(obj)  # S4 method for RowsVerticalSection row_footnotes(obj)  # S4 method for TableRow row_footnotes(obj) <- value  # S4 method for VTableTree row_footnotes(obj)  # S4 method for CellValue cell_footnotes(obj)  # S4 method for TableRow cell_footnotes(obj)  # S4 method for LabelRow cell_footnotes(obj)  # S4 method for VTableTree cell_footnotes(obj)  # S4 method for CellValue cell_footnotes(obj) <- value  # S4 method for DataRow cell_footnotes(obj) <- value  # S4 method for ContentRow cell_footnotes(obj) <- value  # S4 method for LayoutColTree col_fnotes_here(obj)  # S4 method for LayoutColLeaf col_fnotes_here(obj)  # S4 method for LayoutColTree col_fnotes_here(obj) <- value  # S4 method for LayoutColLeaf col_fnotes_here(obj) <- value  # S4 method for RefFootnote ref_index(obj)  # S4 method for RefFootnote ref_index(obj) <- value  # S4 method for RefFootnote ref_msg(obj)  # S4 method for VTableTree,character fnotes_at_path(obj, rowpath = NULL, colpath = NULL, reset_idx = TRUE) <- value  # S4 method for VTableTree,`NULL` fnotes_at_path(obj, rowpath = NULL, colpath = NULL, reset_idx = TRUE) <- value  # S4 method for VTableNodeInfo,missing rbind2(x, y)  # S4 method for VTableTree tt_at_path(tt, path, ...)  # S4 method for VTableTree,ANY,VTableTree tt_at_path(tt, path, ...) <- value  # S4 method for VTableTree,ANY,`NULL` tt_at_path(tt, path, ...) <- value  # S4 method for VTableTree,ANY,TableRow tt_at_path(tt, path, ...) <- value  # S4 method for VTableTree print(x, ...)  # S4 method for VTableTree show(object)"},{"path":"https://roche.github.io/rtables/main/reference/int_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"combine SplitVector objects — internal_methods","text":"x object. ... Splits SplitVector objects lyt layout object pre-data used tabulation spl Split. split. pos numeric(1). Intended internal use. cmpnd_fun function. Intended internal use. constructor function. label character(1). label (confused name) object/structure. cfun list/function/NULL. tabulation function(s) creating content rows. Must accept x df first parameter. Must accept labelstr second argument. Can optionally accept optional arguments accepted analysis functions. See analyze. child_labels string. One \"default\", \"visible\", \"hidden\". display behavior  labels (ie label rows) children split. Defaults \"default\" flags label row visible child 0 content rows. cformat format spec. Format content rows cna_str character. NA string use cformat content table. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. cvar character(1). variable, , content function accept. Defaults NA. extra_args list. Extra arguments passed tabulation function. Element position thte list corresponds children split. Named elements child-specific lists ignored match formal argument ttabulation function. df dataset (data.frame tibble) obj object. depth depth tree indent indent print_indent indent print object object modify -place value new value nested boolean. layout instruction applied within existing layout structure possible (TRUE, default) new top-level element (`FALSE). Ignored nest split underneath analyses, allowed. for_analyze logical(1). format FormatSpec. Format associated split. Formats can declared via strings (\"xx.x\") function. cases analyze calls, can character vectors lists functions. na_str character(1). String displayed value x missing. Defaults \"NA\". override logical(1). tt TableTree (related class). TableTree object representing populated table. incl.cont logical. Include rows content tables within tree. Defaults TRUE add.labrows logical. Include label rows. Defaults FALSE mode character(1). Passed .vector rowpath character NULL. Path within row structure. NULL indicates footnote go column rather cell. colpath character NULL. Path within column structure. NULL indicates footnote go row rather cell reset_idx logical(1). numbering referential footnotes immediately recalculated. Defaults TRUE. y Second element rbound via rbind2 path character. vector path position within structure tabletree. element represents subsequent choice amongst children previous choice.","code":""},{"path":"https://roche.github.io/rtables/main/reference/int_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"combine SplitVector objects — internal_methods","text":"Various, considered implementation details.","code":""},{"path":"https://roche.github.io/rtables/main/reference/int_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"combine SplitVector objects — internal_methods","text":"","code":"library(dplyr)  iris2 <- iris %>%   group_by(Species) %>%   mutate(group = as.factor(rep_len(c(\"a\", \"b\"), length.out = n()))) %>%   ungroup()  l <- basic_table() %>%   split_cols_by(\"Species\") %>%   split_cols_by(\"group\") %>%   analyze(c(\"Sepal.Length\", \"Petal.Width\"), afun = list_wrap_x(summary),           format = \"xx.xx\")  tbl <- build_table(l, iris2) indent_mod(tbl) #> [1] 0 indent_mod(tbl) <- 1L tbl #>                    setosa       versicolor      virginica   #>                   a      b       a       b       a      b   #> ——————————————————————————————————————————————————————————— #>   Sepal.Length                                              #>     Min.         4.40   4.30   5.00    4.90    4.90    5.60 #>     1st Qu.      4.80   4.80   5.60    5.60    6.20    6.30 #>     Median       5.00   5.00   5.90    5.90    6.50    6.50 #>     Mean         5.02   4.99   5.99    5.88    6.50    6.67 #>     3rd Qu.      5.30   5.10   6.40    6.10    6.70    7.20 #>     Max.         5.80   5.70   7.00    6.70    7.70    7.90 #>   Petal.Width                                               #>     Min.         0.10   0.10   1.00    1.00    1.40    1.50 #>     1st Qu.      0.20   0.20   1.20    1.20    1.90    1.80 #>     Median       0.20   0.20   1.30    1.30    2.10    2.00 #>     Mean         0.23   0.26   1.35    1.30    2.08    1.98 #>     3rd Qu.      0.20   0.30   1.50    1.40    2.30    2.20 #>     Max.         0.40   0.60   1.80    1.70    2.50    2.50"},{"path":"https://roche.github.io/rtables/main/reference/is_rtable.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a valid rtable — is_rtable","title":"Check if an object is a valid rtable — is_rtable","text":"Check object valid rtable","code":""},{"path":"https://roche.github.io/rtables/main/reference/is_rtable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a valid rtable — is_rtable","text":"","code":"is_rtable(x)"},{"path":"https://roche.github.io/rtables/main/reference/is_rtable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a valid rtable — is_rtable","text":"x object","code":""},{"path":"https://roche.github.io/rtables/main/reference/is_rtable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a valid rtable — is_rtable","text":"TRUE x formal Table object, FALSE otherwise.","code":""},{"path":"https://roche.github.io/rtables/main/reference/is_rtable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is a valid rtable — is_rtable","text":"","code":"is_rtable(build_table(basic_table(), iris)) #> [1] TRUE"},{"path":"https://roche.github.io/rtables/main/reference/label_at_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Label at Path — label_at_path","title":"Label at Path — label_at_path","text":"Gets sets label path","code":""},{"path":"https://roche.github.io/rtables/main/reference/label_at_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label at Path — label_at_path","text":"","code":"label_at_path(tt, path)  label_at_path(tt, path) <- value"},{"path":"https://roche.github.io/rtables/main/reference/label_at_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label at Path — label_at_path","text":"tt TableTree (related class). TableTree object representing populated table. path character. vector path position within structure tabletree. element represents subsequent choice amongst children previous choice. value new value","code":""},{"path":"https://roche.github.io/rtables/main/reference/label_at_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Label at Path — label_at_path","text":"path resolves single row, label row retrieved set. , instead, path resolves subtable, text row-label associated path retrieved set. subtable case, label text set non-NA value, labelrow set visible, even . Similarly, label row text subtable set NA, label row bet set non-visible, row appear table printed.","code":""},{"path":"https://roche.github.io/rtables/main/reference/label_at_path.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Label at Path — label_at_path","text":"changing row labels content rows, important path way row. Paths ending \"@content\" exhibit behavior want, thus error. See row_paths help determining full paths content rows.","code":""},{"path":"https://roche.github.io/rtables/main/reference/label_at_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label at Path — label_at_path","text":"","code":"lyt <- basic_table() %>%   split_rows_by(\"COUNTRY\", split_fun = keep_split_levels(c(\"CHN\", \"USA\"))) %>%   analyze(\"AGE\")  tab <- build_table(lyt, DM)  label_at_path(tab, c(\"COUNTRY\", \"CHN\")) #> [1] \"CHN\"  label_at_path(tab, c(\"COUNTRY\", \"USA\")) <- \"United States\" tab #>                 all obs #> ——————————————————————— #> CHN                     #>   Mean           34.64  #> United States           #>   Mean           35.30"},{"path":"https://roche.github.io/rtables/main/reference/length-CellValue-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of a Cell value — length,CellValue-method","title":"Length of a Cell value — length,CellValue-method","text":"Length Cell value","code":""},{"path":"https://roche.github.io/rtables/main/reference/length-CellValue-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of a Cell value — length,CellValue-method","text":"","code":"# S4 method for CellValue length(x)"},{"path":"https://roche.github.io/rtables/main/reference/length-CellValue-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of a Cell value — length,CellValue-method","text":"x x.","code":""},{"path":"https://roche.github.io/rtables/main/reference/length-CellValue-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of a Cell value — length,CellValue-method","text":"Always returns 1L","code":""},{"path":"https://roche.github.io/rtables/main/reference/list_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a function that coerces the return values of f to a list — list_wrap_x","title":"Returns a function that coerces the return values of f to a list — list_wrap_x","text":"Returns function coerces return values f list","code":""},{"path":"https://roche.github.io/rtables/main/reference/list_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a function that coerces the return values of f to a list — list_wrap_x","text":"","code":"list_wrap_x(f)  list_wrap_df(f)"},{"path":"https://roche.github.io/rtables/main/reference/list_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a function that coerces the return values of f to a list — list_wrap_x","text":"f function wrap.","code":""},{"path":"https://roche.github.io/rtables/main/reference/list_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a function that coerces the return values of f to a list — list_wrap_x","text":"function calls f converts result list CellValue objects.","code":""},{"path":"https://roche.github.io/rtables/main/reference/list_wrap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns a function that coerces the return values of f to a list — list_wrap_x","text":"list_wrap_x generates wrapper takes x first argument, list_wrap_df generates otherwise identical wrapper function whose first argument named df. provide using functions tabulation analyze, functions take df first argument passed full subset dataframe, accept anything else notably including x passed relevant subset variable analyzed.","code":""},{"path":"https://roche.github.io/rtables/main/reference/list_wrap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns a function that coerces the return values of f to a list — list_wrap_x","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/list_wrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a function that coerces the return values of f to a list — list_wrap_x","text":"","code":"summary(iris$Sepal.Length) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   4.300   5.100   5.800   5.843   6.400   7.900   f <- list_wrap_x(summary) f(x = iris$Sepal.Length) #> $Min. #> [1] 4.3 #>  #> $`1st Qu.` #> [1] 5.1 #>  #> $Median #> [1] 5.8 #>  #> $Mean #> [1] 5.843333 #>  #> $`3rd Qu.` #> [1] 6.4 #>  #> $Max. #> [1] 7.9 #>   f2 <- list_wrap_df(summary) f2(df = iris$Sepal.Length) #> $Min. #> [1] 4.3 #>  #> $`1st Qu.` #> [1] 5.1 #>  #> $Median #> [1] 5.8 #>  #> $Mean #> [1] 5.843333 #>  #> $`3rd Qu.` #> [1] 6.4 #>  #> $Max. #> [1] 7.9 #>"},{"path":"https://roche.github.io/rtables/main/reference/lyt_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Layouting Function Arg Conventions — lyt_args","title":"Layouting Function Arg Conventions — lyt_args","text":"Layouting Function Arg Conventions","code":""},{"path":"https://roche.github.io/rtables/main/reference/lyt_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layouting Function Arg Conventions — lyt_args","text":"","code":"lyt_args(   lyt,   var,   vars,   label,   labels_var,   varlabels,   varnames,   split_format,   split_na_str,   nested,   format,   cfun,   cformat,   cna_str,   split_fun,   split_name,   split_label,   afun,   inclNAs,   valorder,   ref_group,   compfun,   label_fstr,   child_labels,   extra_args,   name,   cuts,   cutlabels,   cutfun,   cutlabelfun,   cumulative,   indent_mod,   show_labels,   label_pos,   var_labels,   cvar,   table_names,   topleft,   align,   page_by,   page_prefix,   format_na_str,   section_div,   na_str )"},{"path":"https://roche.github.io/rtables/main/reference/lyt_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layouting Function Arg Conventions — lyt_args","text":"lyt layout object pre-data used tabulation var string, variable name vars character vector. Multiple variable names. label character(1). label (confused name) object/structure. labels_var string, name variable containing labels displayed values var varlabels character vector. Labels vars varnames character vector. Names vars appear pathing. vars unique variable names. , variable names suffixes necessary enforce uniqueness. split_format FormatSpec. Default format associated split created. split_na_str character. NA string vector use split_format. nested boolean. layout instruction applied within existing layout structure possible (TRUE, default) new top-level element (`FALSE). Ignored nest split underneath analyses, allowed. format FormatSpec. Format associated split. Formats can declared via strings (\"xx.x\") function. cases analyze calls, can character vectors lists functions. cfun list/function/NULL. tabulation function(s) creating content rows. Must accept x df first parameter. Must accept labelstr second argument. Can optionally accept optional arguments accepted analysis functions. See analyze. cformat format spec. Format content rows cna_str character. NA string use cformat content table. split_fun function/NULL. custom splitting function See custom_split_funs split_name string. Name associiated split (pathing, etc) split_label string. Label string associated table generated split. confused labels assigned child (based data type split tabulation). afun function. Analysis function, must take x df first parameter. Can optionally take parameters populated tabulation framework. See Details analyze. inclNAs boolean. observations NA var variable(s) included performing analysis. Defaults FALSE valorder character vector. Order split children appear resulting table. ref_group character. Value var taken ref_group/control compared . compfun function/string. comparison function accepts analysis function outputs two different partitions returns single value. Defaults subraction. string, taken name function. label_fstr string. sprintf style format string containing. non-comparison splits, can contain  one \"%s\" takes current split value generates row/column label. Comparison-based splits can contain two \"%s\". child_labels string. One \"default\", \"visible\", \"hidden\". display behavior  labels (ie label rows) children split. Defaults \"default\" flags label row visible child 0 content rows. extra_args list. Extra arguments passed tabulation function. Element position thte list corresponds children split. Named elements child-specific lists ignored match formal argument ttabulation function. name character(1). Name split/table/row created. Defaults corresponding label, required . cuts numeric. Cuts use cutlabels character (NULL). Labels cuts cutfun function. Function accepts full vector var values returns cut points used (via cut) splitting data tabulation cutlabelfun function. Function returns either labels cuts NULL passed return value cutfun cumulative logical. cuts treated cumulative. Defaults FALSE indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. show_labels character(1). variable labels corresponding variable(s) vars visible resulting table. label_pos character(1). Location variable label displayed, Accepts  hidden (default non-analyze row splits), visible, topleft, - analyze splits - default.  analyze calls, default indicates variable visible multiple variables analyzed level nesting. var_labels character. Variable labels 1 variables cvar character(1). variable, , content function accept. Defaults NA. table_names character. Names tables representing atomic analysis. Defaults var. topleft character. Override values \"top left\" material displayed printing. align character(1) NULL. Alignment value rendered . defaults \"center\" NULL used. See rtables_aligns currently supported alignments. page_by logical(1). pagination forced different children resulting form split. page_prefix character(1). Prefix, appended split value, forcing pagination children split/table format_na_str character(1). String displayed formatted cell's value(s) NA. section_div character(1). String repeated section divider group defined split instruciton, NA_character_ (default) section divider. na_str character(1). String displayed value x missing. Defaults \"NA\".","code":""},{"path":"https://roche.github.io/rtables/main/reference/lyt_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layouting Function Arg Conventions — lyt_args","text":"NULL (argument template dummy function)","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/make_afun.html","id":null,"dir":"Reference","previous_headings":"","what":"Create custom analysis function wrapping existing function — make_afun","title":"Create custom analysis function wrapping existing function — make_afun","text":"Create custom analysis function wrapping existing function","code":""},{"path":"https://roche.github.io/rtables/main/reference/make_afun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create custom analysis function wrapping existing function — make_afun","text":"","code":"make_afun(   fun,   .stats = NULL,   .formats = NULL,   .labels = NULL,   .indent_mods = NULL,   .ungroup_stats = NULL,   .format_na_strs = NULL,   ...,   .null_ref_cells = \".in_ref_col\" %in% names(formals(fun)) )"},{"path":"https://roche.github.io/rtables/main/reference/make_afun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create custom analysis function wrapping existing function — make_afun","text":"fun function. function wrapped new customized analysis fun. return named list. .stats character. Names elements keep fun's full output. .formats . vector/list formats override defaults applied fun. .labels character. Vector labels override defaults returned fun .indent_mods integer. Named vector indent modifiers generated rows. .ungroup_stats character. Vector names, must match elements .stats .format_na_strs . vector/list na strings override defaults applied fun. ... dots. Additional arguments fun effectively become new defaults. can still overriden extra args within split. .null_ref_cells logical(1). cells reference column NULL-ed returned analysis function. Defaults TRUE fun accepts .in_ref_col formal argument. Note argument occurs ... must fully specified  name set.","code":""},{"path":"https://roche.github.io/rtables/main/reference/make_afun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create custom analysis function wrapping existing function — make_afun","text":"function suitable use analyze element selection, reformatting, relabeling performed automatically.","code":""},{"path":"https://roche.github.io/rtables/main/reference/make_afun.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create custom analysis function wrapping existing function — make_afun","text":"setting .ungroup_stats non-null changes structure  value(s) returned fun, rather just labeling (.labels), formatting (.formats), selecting amongst (.stats) . means subsequent make_afun calls customize output can must operate new structure, original structure returned fun. See final pair examples .","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/make_afun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create custom analysis function wrapping existing function — make_afun","text":"","code":"s_summary <- function(x) {   stopifnot(is.numeric(x))    list(     n = sum(!is.na(x)),     mean_sd = c(mean = mean(x), sd = sd(x)),     min_max = range(x)   ) }  s_summary(iris$Sepal.Length) #> $n #> [1] 150 #>  #> $mean_sd #>      mean        sd  #> 5.8433333 0.8280661  #>  #> $min_max #> [1] 4.3 7.9 #>   a_summary <- make_afun(   fun = s_summary,   .formats = c(n = \"xx\", mean_sd = \"xx.xx (xx.xx)\", min_max = \"xx.xx - xx.xx\"),   .labels = c(n = \"n\", mean_sd = \"Mean (sd)\", min_max = \"min - max\") )  a_summary(x = iris$Sepal.Length) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1        n            150          0         n #> 2  mean_sd    5.84 (0.83)          0 Mean (sd) #> 3  min_max    4.30 - 7.90          0 min - max  a_summary2 <- make_afun(a_summary, .stats = c(\"n\", \"mean_sd\"))  a_summary2(x = iris$Sepal.Length) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1        n            150          0         n #> 2  mean_sd    5.84 (0.83)          0 Mean (sd)  a_summary3 <- make_afun(a_summary, .formats = c(mean_sd = \"(xx.xxx, xx.xxx)\"))    s_foo <- function(df, .N_col, a = 1, b = 2) {    list(       nrow_df = nrow(df),       .N_col = .N_col,       a = a,       b = b    ) }  s_foo(iris, 40) #> $nrow_df #> [1] 150 #>  #> $.N_col #> [1] 40 #>  #> $a #> [1] 1 #>  #> $b #> [1] 2 #>   a_foo <- make_afun(s_foo, b = 4,  .formats = c(nrow_df = \"xx.xx\", \".N_col\" = \"xx.\", a = \"xx\", b = \"xx.x\"),  .labels = c(nrow_df = \"Nrow df\",              \".N_col\" = \"n in cols\", a = \"a value\", b = \"b value\"),  .indent_mods = c(nrow_df = 2L, a = 1L) )  a_foo(iris, .N_col = 40) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1  nrow_df         150.00          2   Nrow df #> 2   .N_col             40          0 n in cols #> 3        a              1          1   a value #> 4        b            4.0          0   b value a_foo2 <- make_afun(a_foo, .labels = c(nrow_df = \"Number of Rows\")) a_foo2(iris, .N_col = 40) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod      row_label #> 1  nrow_df         150.00          2 Number of Rows #> 2   .N_col             40          0      n in cols #> 3        a              1          1        a value #> 4        b            4.0          0        b value  #grouping and further customization s_grp <- function(df, .N_col, a = 1, b = 2) {    list(       nrow_df = nrow(df),       .N_col = .N_col,       letters = list(a = a,                      b = b)    ) } a_grp <- make_afun(s_grp, b = 3,                    .labels = c(nrow_df = \"row count\",                                .N_col = \"count in column\"),                    .formats = c(nrow_df = \"xx.\", .N_col = \"xx.\"),                    .indent_mod = c(letters = 1L),                    .ungroup_stats =\"letters\") a_grp(iris, 40) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod       row_label #> 1  nrow_df            150          0       row count #> 2   .N_col             40          0 count in column #> 3        a              1          1               a #> 4        b              3          1               b a_aftergrp <- make_afun(a_grp, .stats = c(\"nrow_df\", \"b\"),                         .formats = c(b = \"xx.\")) a_aftergrp(iris, 40) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1  nrow_df            150          0 row count #> 2        b              3          0         b  s_ref <- function(x, .in_ref_col, .ref_group) {    list(          mean_diff = mean(x) - mean(.ref_group)        ) }  a_ref <- make_afun(s_ref,                    .labels = c( mean_diff = \"Mean Difference from Ref\")) a_ref(iris$Sepal.Length, .in_ref_col = TRUE, 1:10) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>    row_name formatted_cell indent_mod                row_label #> 1 mean_diff                         0 Mean Difference from Ref a_ref(iris$Sepal.Length, .in_ref_col = FALSE, 1:10) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>    row_name    formatted_cell indent_mod                row_label #> 1 mean_diff 0.343333333333334          0 Mean Difference from Ref"},{"path":"https://roche.github.io/rtables/main/reference/make_col_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Column Layout Summary — make_col_df","title":"Column Layout Summary — make_col_df","text":"Generate structural summary columns rtables table return data.frame.","code":""},{"path":"https://roche.github.io/rtables/main/reference/make_col_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column Layout Summary — make_col_df","text":"","code":"make_col_df(tt, colwidths = NULL, visible_only = TRUE)"},{"path":"https://roche.github.io/rtables/main/reference/make_col_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column Layout Summary — make_col_df","text":"tt . Object representing table-like object summarized. colwidths numeric. Internal detail set manually. visible_only logical(1). visible aspects table structure reflected summary. Defaults TRUE. May supported methods.","code":""},{"path":"https://roche.github.io/rtables/main/reference/make_col_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Column Layout Summary — make_col_df","text":"Used Pagination","code":""},{"path":"https://roche.github.io/rtables/main/reference/make_col_row_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Return List with Table Row/Col Paths — row_paths","title":"Return List with Table Row/Col Paths — row_paths","text":"Return List Table Row/Col Paths","code":""},{"path":"https://roche.github.io/rtables/main/reference/make_col_row_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return List with Table Row/Col Paths — row_paths","text":"","code":"row_paths(x)  col_paths(x)"},{"path":"https://roche.github.io/rtables/main/reference/make_col_row_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return List with Table Row/Col Paths — row_paths","text":"x rtable object","code":""},{"path":"https://roche.github.io/rtables/main/reference/make_col_row_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return List with Table Row/Col Paths — row_paths","text":"list paths row/column within x","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/make_col_row_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return List with Table Row/Col Paths — row_paths","text":"","code":"tbl <- basic_table() %>%   split_cols_by(\"ARM\") %>%   analyze(c(\"SEX\", \"AGE\")) %>%   build_table(ex_adsl)  tbl #>                      A: Drug X   B: Placebo   C: Combination #> ———————————————————————————————————————————————————————————— #> SEX                                                          #>   F                     79           77             66       #>   M                     51           55             60       #>   U                      3           2              4        #>   UNDIFFERENTIATED       1           0              2        #> AGE                                                          #>   Mean                 33.77       35.43          35.43       row_paths(tbl) #> [[1]] #> [1] \"ma_SEX_AGE\" \"SEX\"        #>  #> [[2]] #> [1] \"ma_SEX_AGE\" \"SEX\"        \"F\"          #>  #> [[3]] #> [1] \"ma_SEX_AGE\" \"SEX\"        \"M\"          #>  #> [[4]] #> [1] \"ma_SEX_AGE\" \"SEX\"        \"U\"          #>  #> [[5]] #> [1] \"ma_SEX_AGE\"       \"SEX\"              \"UNDIFFERENTIATED\" #>  #> [[6]] #> [1] \"ma_SEX_AGE\" \"AGE\"        #>  #> [[7]] #> [1] \"ma_SEX_AGE\" \"AGE\"        \"Mean\"       #>  col_paths(tbl) #> [[1]] #> [1] \"ARM\"       \"A: Drug X\" #>  #> [[2]] #> [1] \"ARM\"        \"B: Placebo\" #>  #> [[3]] #> [1] \"ARM\"            \"C: Combination\" #>   cell_values(tbl, c(\"AGE\", \"Mean\"),  c(\"ARM\", \"B: Placebo\")) #> $`B: Placebo` #> [1] 35.43284 #>"},{"path":"https://roche.github.io/rtables/main/reference/manual_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Manual column declaration — manual_cols","title":"Manual column declaration — manual_cols","text":"Manual column declaration","code":""},{"path":"https://roche.github.io/rtables/main/reference/manual_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manual column declaration — manual_cols","text":"","code":"manual_cols(..., .lst = list(...))"},{"path":"https://roche.github.io/rtables/main/reference/manual_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manual column declaration — manual_cols","text":"... One vectors levels appear column splace. one set levels given, values second nested within value first, . .lst list sets levels, default populated via list(...).","code":""},{"path":"https://roche.github.io/rtables/main/reference/manual_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manual column declaration — manual_cols","text":"InstantiatedColumnInfo object, suitable use declaring column structure manually constructed table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/manual_cols.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Manual column declaration — manual_cols","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/manual_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manual column declaration — manual_cols","text":"","code":"# simple one level column space rows = lapply(1:5, function(i) {    DataRow(rep(i, times  = 3))}) tab = TableTree(kids = rows, cinfo = manual_cols(split = c(\"a\", \"b\", \"c\"))) tab #>    a   b   c #> ———————————— #>    1   1   1 #>    2   2   2 #>    3   3   3 #>    4   4   4 #>    5   5   5  # manually declared nesting tab2 = TableTree(kids = list(DataRow(as.list(1:4))),                  cinfo = manual_cols(Arm = c(\"Arm A\", \"Arm B\"),                                      Gender = c(\"M\", \"F\")))  tab2 #>     Arm A      Arm B   #>     M    F     M    F  #> —————————————————————— #>     1    2     3    4"},{"path":"https://roche.github.io/rtables/main/reference/matrix_form-VTableTree-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform rtable to a list of matrices which can be used for outputting — matrix_form,VTableTree-method","title":"Transform rtable to a list of matrices which can be used for outputting — matrix_form,VTableTree-method","text":"Although rtables represented tree data structure outputting table ASCII HTML useful map rtable state formatted cells matrix form.","code":""},{"path":"https://roche.github.io/rtables/main/reference/matrix_form-VTableTree-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform rtable to a list of matrices which can be used for outputting — matrix_form,VTableTree-method","text":"","code":"# S4 method for VTableTree matrix_form(obj, indent_rownames = FALSE, indent_size = 2)"},{"path":"https://roche.github.io/rtables/main/reference/matrix_form-VTableTree-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform rtable to a list of matrices which can be used for outputting — matrix_form,VTableTree-method","text":"obj . object accessor access modify indent_rownames logical(1), TRUE column row names strings matrix indented row names (strings pre-fixed) indent_size numeric(1). Number spaces use per indent level. Defaults 2","code":""},{"path":"https://roche.github.io/rtables/main/reference/matrix_form-VTableTree-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform rtable to a list of matrices which can be used for outputting — matrix_form,VTableTree-method","text":"list following elements: strings content, printed, top-left material, column headers, row labels , cell values tt spans column-span information print-string strings matrix aligns text alignment print-string strings matrix display Whether print-string strings matrix printed row_info data.frame generated make_row_df additional nrow_header attribute indicating number pseudo \"rows\"  column structure defines.","code":""},{"path":"https://roche.github.io/rtables/main/reference/matrix_form-VTableTree-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform rtable to a list of matrices which can be used for outputting — matrix_form,VTableTree-method","text":"strings return object defined follows: row labels determined make_row_df cell values determined using get_formatted_cells. (Column labels calculated using non-exported internal funciton.","code":""},{"path":"https://roche.github.io/rtables/main/reference/matrix_form-VTableTree-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform rtable to a list of matrices which can be used for outputting — matrix_form,VTableTree-method","text":"","code":"library(dplyr)  iris2 <- iris %>%   group_by(Species) %>%   mutate(group = as.factor(rep_len(c(\"a\", \"b\"), length.out = n()))) %>%   ungroup()  l <- basic_table() %>%   split_cols_by(\"Species\") %>%   split_cols_by(\"group\") %>%   analyze(c(\"Sepal.Length\", \"Petal.Width\"),           afun = list_wrap_x(summary) , format = \"xx.xx\")  l #> A Pre-data Table Layout #>  #> Column-Split Structure: #> Species (lvls) -> group (lvls)  #>  #> Row-Split Structure: #> Sepal.Length:Petal.Width (** multivar analysis **)  #>   tbl <- build_table(l, iris2)  matrix_form(tbl) #> $strings #>       [,1]           [,2]     [,3]     [,4]         [,5]         [,6]        #>  [1,] \"\"             \"setosa\" \"setosa\" \"versicolor\" \"versicolor\" \"virginica\" #>  [2,] \"\"             \"a\"      \"b\"      \"a\"          \"b\"          \"a\"         #>  [3,] \"Sepal.Length\" \"\"       \"\"       \"\"           \"\"           \"\"          #>  [4,] \"Min.\"         \"4.40\"   \"4.30\"   \"5.00\"       \"4.90\"       \"4.90\"      #>  [5,] \"1st Qu.\"      \"4.80\"   \"4.80\"   \"5.60\"       \"5.60\"       \"6.20\"      #>  [6,] \"Median\"       \"5.00\"   \"5.00\"   \"5.90\"       \"5.90\"       \"6.50\"      #>  [7,] \"Mean\"         \"5.02\"   \"4.99\"   \"5.99\"       \"5.88\"       \"6.50\"      #>  [8,] \"3rd Qu.\"      \"5.30\"   \"5.10\"   \"6.40\"       \"6.10\"       \"6.70\"      #>  [9,] \"Max.\"         \"5.80\"   \"5.70\"   \"7.00\"       \"6.70\"       \"7.70\"      #> [10,] \"Petal.Width\"  \"\"       \"\"       \"\"           \"\"           \"\"          #> [11,] \"Min.\"         \"0.10\"   \"0.10\"   \"1.00\"       \"1.00\"       \"1.40\"      #> [12,] \"1st Qu.\"      \"0.20\"   \"0.20\"   \"1.20\"       \"1.20\"       \"1.90\"      #> [13,] \"Median\"       \"0.20\"   \"0.20\"   \"1.30\"       \"1.30\"       \"2.10\"      #> [14,] \"Mean\"         \"0.23\"   \"0.26\"   \"1.35\"       \"1.30\"       \"2.08\"      #> [15,] \"3rd Qu.\"      \"0.20\"   \"0.30\"   \"1.50\"       \"1.40\"       \"2.30\"      #> [16,] \"Max.\"         \"0.40\"   \"0.60\"   \"1.80\"       \"1.70\"       \"2.50\"      #>       [,7]        #>  [1,] \"virginica\" #>  [2,] \"b\"         #>  [3,] \"\"          #>  [4,] \"5.60\"      #>  [5,] \"6.30\"      #>  [6,] \"6.50\"      #>  [7,] \"6.67\"      #>  [8,] \"7.20\"      #>  [9,] \"7.90\"      #> [10,] \"\"          #> [11,] \"1.50\"      #> [12,] \"1.80\"      #> [13,] \"2.00\"      #> [14,] \"1.98\"      #> [15,] \"2.20\"      #> [16,] \"2.50\"      #>  #> $spans #>         setosa.a setosa.b versicolor.a versicolor.b virginica.a virginica.b #>  [1,] 1        2        2            2            2           2           2 #>  [2,] 1        1        1            1            1           1           1 #>  [3,] 1        1        1            1            1           1           1 #>  [4,] 1        1        1            1            1           1           1 #>  [5,] 1        1        1            1            1           1           1 #>  [6,] 1        1        1            1            1           1           1 #>  [7,] 1        1        1            1            1           1           1 #>  [8,] 1        1        1            1            1           1           1 #>  [9,] 1        1        1            1            1           1           1 #> [10,] 1        1        1            1            1           1           1 #> [11,] 1        1        1            1            1           1           1 #> [12,] 1        1        1            1            1           1           1 #> [13,] 1        1        1            1            1           1           1 #> [14,] 1        1        1            1            1           1           1 #> [15,] 1        1        1            1            1           1           1 #> [16,] 1        1        1            1            1           1           1 #>  #> $aligns #>       [,1]   [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     #>  [1,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #>  [2,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #>  [3,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #>  [4,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #>  [5,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #>  [6,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #>  [7,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #>  [8,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #>  [9,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #> [10,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #> [11,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #> [12,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #> [13,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #> [14,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #> [15,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #> [16,] \"left\" \"center\" \"center\" \"center\" \"center\" \"center\" \"center\" #>  #> $display #>            virginica.b1 virginica.b2 virginica.b3 virginica.b4 virginica.bvirginica.b6 #>  [1,]        FALSE #>  [2,]         TRUE #>  [3,]         TRUE #>  [4,]         TRUE #>  [5,]         TRUE #>  [6,]         TRUE #>  [7,]         TRUE #>  [8,]         TRUE #>  [9,]         TRUE #> [10,]         TRUE #> [11,]         TRUE #> [12,]         TRUE #> [13,]         TRUE #> [14,]         TRUE #> [15,]         TRUE #> [16,]         TRUE #>  #> $formats #>       [,1] [,2]    [,3]    [,4]    [,5]    [,6]    [,7]    #>  [1,] \"\"   \"\"      \"\"      \"\"      \"\"      \"\"      \"\"      #>  [2,] \"\"   \"\"      \"\"      \"\"      \"\"      \"\"      \"\"      #>  [3,] \"\"   \"-\"     \"-\"     \"-\"     \"-\"     \"-\"     \"-\"     #>  [4,] \"\"   \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" #>  [5,] \"\"   \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" #>  [6,] \"\"   \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" #>  [7,] \"\"   \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" #>  [8,] \"\"   \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" #>  [9,] \"\"   \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" #> [10,] \"\"   \"-\"     \"-\"     \"-\"     \"-\"     \"-\"     \"-\"     #> [11,] \"\"   \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" #> [12,] \"\"   \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" #> [13,] \"\"   \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" #> [14,] \"\"   \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" #> [15,] \"\"   \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" #> [16,] \"\"   \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" \"xx.xx\" #>  #> $row_info #>           label         name abs_rownumber         path pos_in_siblings #> 1  Sepal.Length Sepal.Length             1 ma_Sepal....              NA #> 2          Min.         Min.             2 ma_Sepal....               1 #> 3       1st Qu.      1st Qu.             3 ma_Sepal....               2 #> 4        Median       Median             4 ma_Sepal....               3 #> 5          Mean         Mean             5 ma_Sepal....               4 #> 6       3rd Qu.      3rd Qu.             6 ma_Sepal....               5 #> 7          Max.         Max.             7 ma_Sepal....               6 #> 8   Petal.Width  Petal.Width             8 ma_Sepal....              NA #> 9          Min.         Min.             9 ma_Sepal....               1 #> 10      1st Qu.      1st Qu.            10 ma_Sepal....               2 #> 11       Median       Median            11 ma_Sepal....               3 #> 12         Mean         Mean            12 ma_Sepal....               4 #> 13      3rd Qu.      3rd Qu.            13 ma_Sepal....               5 #> 14         Max.         Max.            14 ma_Sepal....               6 #>    n_siblings self_extent par_extent reprint_inds node_class indent nrowrefs #> 1          NA           1          0                LabelRow      0        0 #> 2           6           1          1            1    DataRow      1        0 #> 3           6           1          1            1    DataRow      1        0 #> 4           6           1          1            1    DataRow      1        0 #> 5           6           1          1            1    DataRow      1        0 #> 6           6           1          1            1    DataRow      1        0 #> 7           6           1          1            1    DataRow      1        0 #> 8          NA           1          0                LabelRow      0        0 #> 9           6           1          1            8    DataRow      1        0 #> 10          6           1          1            8    DataRow      1        0 #> 11          6           1          1            8    DataRow      1        0 #> 12          6           1          1            8    DataRow      1        0 #> 13          6           1          1            8    DataRow      1        0 #> 14          6           1          1            8    DataRow      1        0 #>    ncellrefs nreflines force_page page_title trailing_sep #> 1          0         0      FALSE       <NA>         <NA> #> 2          0         0      FALSE       <NA>         <NA> #> 3          0         0      FALSE       <NA>         <NA> #> 4          0         0      FALSE       <NA>         <NA> #> 5          0         0      FALSE       <NA>         <NA> #> 6          0         0      FALSE       <NA>         <NA> #> 7          0         0      FALSE       <NA>         <NA> #> 8          0         0      FALSE       <NA>         <NA> #> 9          0         0      FALSE       <NA>         <NA> #> 10         0         0      FALSE       <NA>         <NA> #> 11         0         0      FALSE       <NA>         <NA> #> 12         0         0      FALSE       <NA>         <NA> #> 13         0         0      FALSE       <NA>         <NA> #> 14         0         0      FALSE       <NA>         <NA> #>  #> $line_grouping #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 #>  #> $ref_footnotes #> character(0) #>  #> $main_title #> [1] \"\" #>  #> $subtitles #> character(0) #>  #> $page_titles #> character(0) #>  #> $main_footer #> character(0) #>  #> $prov_footer #> character(0) #>  #> $col_gap #> [1] 3 #>  #> $table_inset #> [1] 0 #>  #> $has_topleft #> [1] TRUE #>  #> attr(,\"nlines_header\") #> [1] 2 #> attr(,\"nrow_header\") #> [1] 2 #> attr(,\"ncols\") #> [1] 6 #> attr(,\"class\") #> [1] \"MatrixPrintForm\" \"list\""},{"path":"https://roche.github.io/rtables/main/reference/names.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of a TableTree — names,VTableNodeInfo-method","title":"Names of a TableTree — names,VTableNodeInfo-method","text":"Names TableTree","code":""},{"path":"https://roche.github.io/rtables/main/reference/names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of a TableTree — names,VTableNodeInfo-method","text":"","code":"# S4 method for VTableNodeInfo names(x)  # S4 method for InstantiatedColumnInfo names(x)  # S4 method for LayoutColTree names(x)  # S4 method for VTableTree row.names(x)"},{"path":"https://roche.github.io/rtables/main/reference/names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names of a TableTree — names,VTableNodeInfo-method","text":"x object.","code":""},{"path":"https://roche.github.io/rtables/main/reference/names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Names of a TableTree — names,VTableNodeInfo-method","text":"column names x, defined details .","code":""},{"path":"https://roche.github.io/rtables/main/reference/names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Names of a TableTree — names,VTableNodeInfo-method","text":"TableTrees one level splitting columns, names defined top-level split values repped across columns span.","code":""},{"path":"https://roche.github.io/rtables/main/reference/no_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Exported for use in tern — no_colinfo","title":"Exported for use in tern — no_colinfo","text":"table/row/InstantiatedColumnInfo object contain column structure information?","code":""},{"path":"https://roche.github.io/rtables/main/reference/no_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exported for use in tern — no_colinfo","text":"","code":"no_colinfo(obj)  # S4 method for VTableNodeInfo no_colinfo(obj)  # S4 method for InstantiatedColumnInfo no_colinfo(obj)"},{"path":"https://roche.github.io/rtables/main/reference/no_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exported for use in tern — no_colinfo","text":"obj . object accessor access modify","code":""},{"path":"https://roche.github.io/rtables/main/reference/no_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exported for use in tern — no_colinfo","text":"TRUE object /empty instantiated column information, FALSE otherwise.","code":""},{"path":"https://roche.github.io/rtables/main/reference/paginate.html","id":null,"dir":"Reference","previous_headings":"","what":"Pagination of a TableTree — pag_tt_indices","title":"Pagination of a TableTree — pag_tt_indices","text":"Pagination TableTree","code":""},{"path":"https://roche.github.io/rtables/main/reference/paginate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pagination of a TableTree — pag_tt_indices","text":"","code":"pag_tt_indices(   tt,   lpp = 15,   min_siblings = 2,   nosplitin = character(),   colwidths = NULL,   max_width = NULL,   verbose = FALSE )  paginate_table(   tt,   page_type = \"letter\",   font_family = \"Courier\",   font_size = 12,   lineheight = 1,   landscape = FALSE,   pg_width = NULL,   pg_height = NULL,   margins = c(top = 0.5, bottom = 0.5, left = 0.75, right = 0.75),   lpp,   cpp,   min_siblings = 2,   nosplitin = character(),   colwidths = NULL,   tf_wrap = FALSE,   max_width = NULL,   verbose = FALSE )"},{"path":"https://roche.github.io/rtables/main/reference/paginate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pagination of a TableTree — pag_tt_indices","text":"tt TableTree (related class). TableTree object representing populated table. lpp numeric. Maximum lines per page including (re)printed header context rows min_siblings numeric. Minimum sibling rows must appear either side pagination row mid-subtable split valid. Defaults 2. nosplitin character. List names sub-tables page-breaks allowed, regardless considerations. Defaults none. colwidths numeric vector. Column widths use vertical pagination. max_width integer(1), character(1) NULL. Width title   footer   (including   footnotes)  materials     word-wrapped . NULL,  set current print width  session (`getOption(\"width\")`). set `\"auto\"`, width table (plus table inset) used. Ignored completely `tf_wrap` `FALSE`. verbose logical(1). extra debugging messages shown. Defaults FALSE. page_type character(1).   Name     page  type.   See `page_types`.   Ignored  `pg_width`  `pg_height` set directly. font_family character(1). Name font family. error thrown family named monospaced. Defaults Courier. font_size numeric(1). Fontsize, defaults 12. lineheight numeric(1). Lineheight, defaults 1. landscape logical(1).  dimensions `page_type` inverted  landscape?  Defaults  `FALSE`, ignored `pg_width` `pg_height` set directly. pg_width numeric(1). Page width inches. pg_height numeric(1). Page height inches. margins numeric(4). Named numeric vector containing `'top'`, `'bottom'`, `'left'`, `'right'` margins inches. Defaults `.5` inches vertical margins `.75` horizontal margins. cpp numeric(1) NULL. Width (characters) pages horizontal pagination. NULL (default) indicates horizontal pagination done. tf_wrap logical(1).  texts  title, subtitle, footnotes wrapped?","code":""},{"path":"https://roche.github.io/rtables/main/reference/paginate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pagination of a TableTree — pag_tt_indices","text":"pag_tt_indices list paginated-groups row-indices tt. paginate_table, subtables defined subsetting indices defined pag_tt_indices.","code":""},{"path":"https://roche.github.io/rtables/main/reference/paginate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pagination of a TableTree — pag_tt_indices","text":"first take pagination. refine pagination subsequent releases. Currently pagination row space work. Pagination column space added future.","code":""},{"path":"https://roche.github.io/rtables/main/reference/paginate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pagination of a TableTree — pag_tt_indices","text":"","code":"s_summary <- function(x) {  if (is.numeric(x)) {      in_rows(          \"n\" = rcell(sum(!is.na(x)), format = \"xx\"),          \"Mean (sd)\" = rcell(c(mean(x, na.rm = TRUE), sd(x, na.rm = TRUE)),                              format = \"xx.xx (xx.xx)\"),          \"IQR\" = rcell(IQR(x, na.rm = TRUE), format = \"xx.xx\"),          \"min - max\" = rcell(range(x, na.rm = TRUE), format = \"xx.xx - xx.xx\")      )  } else if (is.factor(x)) {       vs <- as.list(table(x))      do.call(in_rows, lapply(vs, rcell, format = \"xx\"))   } else (      stop(\"type not supported\")  ) }   lyt <- basic_table() %>% split_cols_by(var = \"ARM\") %>%     analyze(c(\"AGE\", \"SEX\", \"BEP01FL\", \"BMRKR1\", \"BMRKR2\", \"COUNTRY\"), afun = s_summary)  tbl <- build_table(lyt, ex_adsl) tbl #>                        A: Drug X      B: Placebo     C: Combination #> ——————————————————————————————————————————————————————————————————— #> AGE                                                                 #>   n                       134             134             132       #>   Mean (sd)          33.77 (6.55)    35.43 (7.90)     35.43 (7.72)  #>   IQR                    11.00           10.00           10.00      #>   min - max          21.00 - 50.00   21.00 - 62.00   20.00 - 69.00  #> SEX                                                                 #>   F                       79              77               66       #>   M                       51              55               60       #>   U                        3               2               4        #>   UNDIFFERENTIATED         1               0               2        #> BEP01FL                                                             #>   Y                       68              63               66       #>   N                       66              71               66       #> BMRKR1                                                              #>   n                       134             134             132       #>   Mean (sd)           5.97 (3.55)     5.70 (3.31)     5.62 (3.49)   #>   IQR                    4.16            4.06             3.88      #>   min - max          0.41 - 17.67    0.65 - 14.24     0.17 - 21.39  #> BMRKR2                                                              #>   LOW                     50              45               40       #>   MEDIUM                  37              56               42       #>   HIGH                    47              33               50       #> COUNTRY                                                             #>   CHN                     74              81               64       #>   USA                     10              13               17       #>   BRA                     13               7               10       #>   PAK                     12               9               10       #>   NGA                      8               7               11       #>   RUS                      5               8               6        #>   JPN                      5               4               9        #>   GBR                      4               3               2        #>   CAN                      3               2               3        #>   CHE                      0               0               0         nrow(tbl) #> [1] 33  row_paths_summary(tbl) #> rowname               node_class    path                                                            #> ——————————————————————————————————————————————————————————————————————————————————————————————————— #> AGE                   LabelRow      ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, AGE                   #>   n                   DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, AGE, n                #>   Mean (sd)           DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, AGE, Mean (sd)        #>   IQR                 DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, AGE, IQR              #>   min - max           DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, AGE, min - max        #> SEX                   LabelRow      ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, SEX                   #>   F                   DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, SEX, F                #>   M                   DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, SEX, M                #>   U                   DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, SEX, U                #>   UNDIFFERENTIATED    DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, SEX, UNDIFFERENTIATED #> BEP01FL               LabelRow      ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, BEP01FL               #>   Y                   DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, BEP01FL, Y            #>   N                   DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, BEP01FL, N            #> BMRKR1                LabelRow      ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, BMRKR1                #>   n                   DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, BMRKR1, n             #>   Mean (sd)           DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, BMRKR1, Mean (sd)     #>   IQR                 DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, BMRKR1, IQR           #>   min - max           DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, BMRKR1, min - max     #> BMRKR2                LabelRow      ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, BMRKR2                #>   LOW                 DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, BMRKR2, LOW           #>   MEDIUM              DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, BMRKR2, MEDIUM        #>   HIGH                DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, BMRKR2, HIGH          #> COUNTRY               LabelRow      ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, COUNTRY               #>   CHN                 DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, COUNTRY, CHN          #>   USA                 DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, COUNTRY, USA          #>   BRA                 DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, COUNTRY, BRA          #>   PAK                 DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, COUNTRY, PAK          #>   NGA                 DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, COUNTRY, NGA          #>   RUS                 DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, COUNTRY, RUS          #>   JPN                 DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, COUNTRY, JPN          #>   GBR                 DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, COUNTRY, GBR          #>   CAN                 DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, COUNTRY, CAN          #>   CHE                 DataRow       ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY, COUNTRY, CHE           tbls <- paginate_table(tbl) mf <- matrix_form(tbl, indent_rownames = TRUE) w_tbls <- propose_column_widths(mf) # so that we have the same column widths  tmp <- lapply(tbls, print, widths = w_tbls) #> <S4 Type Object> #> attr(,\"content\") #>    A: Drug X   B: Placebo   C: Combination #> —————————————————————————————————————————— #> attr(,\"page_title_prefix\") #> [1] NA #> attr(,\"children\") #> attr(,\"children\")$AGE #>                 A: Drug X      B: Placebo     C: Combination #> ———————————————————————————————————————————————————————————— #> AGE                                                          #>   n                134             134             132       #>   Mean (sd)   33.77 (6.55)    35.43 (7.90)     35.43 (7.72)  #>   IQR             11.00           10.00           10.00      #>   min - max   21.00 - 50.00   21.00 - 62.00   20.00 - 69.00  #>  #> attr(,\"children\")$SEX #>                      A: Drug X   B: Placebo   C: Combination #> ———————————————————————————————————————————————————————————— #> SEX                                                          #>   F                     79           77             66       #>   M                     51           55             60       #>   U                      3           2              4        #>   UNDIFFERENTIATED       1           0              2        #>  #> attr(,\"children\")$BEP01FL #>           A: Drug X   B: Placebo   C: Combination #> ————————————————————————————————————————————————— #> BEP01FL                                           #>   Y          68           63             66       #>   N          66           71             66       #>  #> attr(,\"children\")$BMRKR1 #>                A: Drug X      B: Placebo    C: Combination #> —————————————————————————————————————————————————————————— #> BMRKR1                                                     #>   n               134            134             132       #>   Mean (sd)   5.97 (3.55)    5.70 (3.31)     5.62 (3.49)   #>   IQR             4.16           4.06            3.88      #>   min - max   0.41 - 17.67   0.65 - 14.24    0.17 - 21.39  #>  #> attr(,\"children\")$BMRKR2 #>            A: Drug X   B: Placebo   C: Combination #> —————————————————————————————————————————————————— #> BMRKR2                                             #>   LOW         50           45             40       #>   MEDIUM      37           56             42       #>   HIGH        47           33             50       #>  #> attr(,\"children\")$COUNTRY #>           A: Drug X   B: Placebo   C: Combination #> ————————————————————————————————————————————————— #> COUNTRY                                           #>   CHN        74           81             64       #>   USA        10           13             17       #>   BRA        13           7              10       #>   PAK        12           9              10       #>   NGA         8           7              11       #>   RUS         5           8              6        #>   JPN         5           4              9        #>   GBR         4           3              2        #>   CAN         3           2              3        #>   CHE         0           0              0        #>  #> attr(,\"rowspans\") #> data frame with 0 columns and 0 rows #> attr(,\"labelrow\") #> [LabelRow indent_mod 0]:     #> attr(,\"page_titles\") #> character(0) #> attr(,\"horizontal_sep\") #> [1] \"—\" #> attr(,\"trailing_section_div\") #> [1] NA #> attr(,\"col_info\") #> An InstantiatedColumnInfo object #> Columns: #> A: Drug X (ARM) #> B: Placebo (ARM) #> C: Combination (ARM) #>  #> attr(,\"format\") #> `\\001NULL\\001` #> attr(,\"na_str\") #> [1] NA #> attr(,\"indent_modifier\") #> [1] 0 #> attr(,\"table_inset\") #> [1] 0 #> attr(,\"level\") #> [1] 0 #> attr(,\"name\") #> [1] \"ma_AGE_SEX_BEP01FL_BMRKR1_BMRKR2_COUNTRY\" #> attr(,\"main_title\") #> [1] \"\" #> attr(,\"subtitles\") #> character(0) #> attr(,\"main_footer\") #> character(0) #> attr(,\"provenance_footer\") #> character(0) #> attr(,\"class\") #> [1] \"TableTree\" #> attr(,\"class\")attr(,\"package\") #> [1] \"rtables\"  tmp <- lapply(tbls, function(tbli) {   cat(toString(tbli, widths = w_tbls))   cat(\"\\n\\n\")   cat(\"~~~~ PAGE BREAK ~~~~\")   cat(\"\\n\\n\") }) #>                        A: Drug X      B: Placebo     C: Combination #> ——————————————————————————————————————————————————————————————————— #> AGE                                                                 #>   n                       134             134             132       #>   Mean (sd)          33.77 (6.55)    35.43 (7.90)     35.43 (7.72)  #>   IQR                    11.00           10.00           10.00      #>   min - max          21.00 - 50.00   21.00 - 62.00   20.00 - 69.00  #> SEX                                                                 #>   F                       79              77               66       #>   M                       51              55               60       #>   U                        3               2               4        #>   UNDIFFERENTIATED         1               0               2        #> BEP01FL                                                             #>   Y                       68              63               66       #>   N                       66              71               66       #> BMRKR1                                                              #>   n                       134             134             132       #>   Mean (sd)           5.97 (3.55)     5.70 (3.31)     5.62 (3.49)   #>   IQR                    4.16            4.06             3.88      #>   min - max          0.41 - 17.67    0.65 - 14.24     0.17 - 21.39  #> BMRKR2                                                              #>   LOW                     50              45               40       #>   MEDIUM                  37              56               42       #>   HIGH                    47              33               50       #> COUNTRY                                                             #>   CHN                     74              81               64       #>   USA                     10              13               17       #>   BRA                     13               7               10       #>   PAK                     12               9               10       #>   NGA                      8               7               11       #>   RUS                      5               8               6        #>   JPN                      5               4               9        #>   GBR                      4               3               2        #>   CAN                      3               2               3        #>   CHE                      0               0               0        #>  #>  #> ~~~~ PAGE BREAK ~~~~ #>"},{"path":"https://roche.github.io/rtables/main/reference/path_enriched_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform TableTree object to Path-Enriched data.frame — path_enriched_df","title":"Transform TableTree object to Path-Enriched data.frame — path_enriched_df","text":"Transform TableTree object Path-Enriched data.frame","code":""},{"path":"https://roche.github.io/rtables/main/reference/path_enriched_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform TableTree object to Path-Enriched data.frame — path_enriched_df","text":"","code":"path_enriched_df(tt, path_fun = collapse_path, value_fun = collapse_values)"},{"path":"https://roche.github.io/rtables/main/reference/path_enriched_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform TableTree object to Path-Enriched data.frame — path_enriched_df","text":"tt TableTree (related class). TableTree object representing populated table. path_fun function. Function transform paths single-string row/column names. value_fun function. Functiont transform cell values cells data.frame. Defaults collapse_values creates strings multi-valued cells collapsed together, separated |.","code":""},{"path":"https://roche.github.io/rtables/main/reference/path_enriched_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform TableTree object to Path-Enriched data.frame — path_enriched_df","text":"data frame tt's cell values (processed value_fun, columns named full column paths (processed path_fun additional row_path column row paths (processed path_fun).","code":""},{"path":"https://roche.github.io/rtables/main/reference/path_enriched_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform TableTree object to Path-Enriched data.frame — path_enriched_df","text":"","code":"lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   analyze(c(\"AGE\", \"BMRKR2\"))  tbl <- build_table(lyt, ex_adsl) path_enriched_df(tbl) #>                      row_path ARM|A: Drug X ARM|B: Placebo ARM|C: Combination #> 1      ma_AGE_BMRKR2|AGE|Mean      33.76866       35.43284           35.43182 #> 2    ma_AGE_BMRKR2|BMRKR2|LOW      50.00000       45.00000           40.00000 #> 3 ma_AGE_BMRKR2|BMRKR2|MEDIUM      37.00000       56.00000           42.00000 #> 4   ma_AGE_BMRKR2|BMRKR2|HIGH      47.00000       33.00000           50.00000"},{"path":"https://roche.github.io/rtables/main/reference/prune_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively prune a TableTree — prune_table","title":"Recursively prune a TableTree — prune_table","text":"Recursively prune TableTree","code":""},{"path":"https://roche.github.io/rtables/main/reference/prune_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively prune a TableTree — prune_table","text":"","code":"prune_table(   tt,   prune_func = prune_empty_level,   stop_depth = NA_real_,   depth = 0 )"},{"path":"https://roche.github.io/rtables/main/reference/prune_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively prune a TableTree — prune_table","text":"tt TableTree (related class). TableTree object representing populated table. prune_func function. Function called subtree returns TRUE entire subtree removed. stop_depth numeric(1). depth subtrees checked pruning. Defaults NA indicates pruning happen levels depth numeric(1). Used internally, intended set end user.","code":""},{"path":"https://roche.github.io/rtables/main/reference/prune_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursively prune a TableTree — prune_table","text":"TableTree pruned via recursive application prune_func.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/rbind.html","id":null,"dir":"Reference","previous_headings":"","what":"rbind TableTree and related objects — rbindl_rtables","title":"rbind TableTree and related objects — rbindl_rtables","text":"rbind TableTree related objects","code":""},{"path":"https://roche.github.io/rtables/main/reference/rbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rbind TableTree and related objects — rbindl_rtables","text":"","code":"rbindl_rtables(x, gap = 0, check_headers = TRUE)  # S4 method for VTableNodeInfo rbind(..., deparse.level = 1)  # S4 method for VTableNodeInfo,ANY rbind2(x, y)"},{"path":"https://roche.github.io/rtables/main/reference/rbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rbind TableTree and related objects — rbindl_rtables","text":"x VTableNodeInfo. TableTree, ElementaryTable TableRow object. gap deprecated. Ignored. check_headers deprecated. Ignored. ... . Elements stacked. deparse.level numeric(1). Currently Ignored. y VTableNodeInfo. TableTree, ElementaryTable TableRow object.","code":""},{"path":"https://roche.github.io/rtables/main/reference/rbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rbind TableTree and related objects — rbindl_rtables","text":"formal table object.","code":""},{"path":"https://roche.github.io/rtables/main/reference/rbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rbind TableTree and related objects — rbindl_rtables","text":"","code":"mtbl <- rtable(    header = rheader(      rrow(row.name = NULL, rcell(\"Sepal.Length\", colspan = 2), rcell(\"Petal.Length\", colspan=2)),      rrow(NULL, \"mean\", \"median\", \"mean\", \"median\")    ),    rrow(      row.name = \"All Species\",      mean(iris$Sepal.Length), median(iris$Sepal.Length),      mean(iris$Petal.Length), median(iris$Petal.Length),      format = \"xx.xx\"    )  )   mtbl2 <- with(subset(iris, Species == 'setosa'), rtable(    header = rheader(      rrow(row.name = NULL, rcell(\"Sepal.Length\", colspan = 2), rcell(\"Petal.Length\", colspan=2)),      rrow(NULL, \"mean\", \"median\", \"mean\", \"median\")    ),    rrow(      row.name = \"Setosa\",      mean(Sepal.Length), median(Sepal.Length),      mean(Petal.Length), median(Petal.Length),      format = \"xx.xx\"    )  ))   rbind(mtbl, mtbl2) #>                Sepal.Length      Petal.Length   #>               mean    median    mean    median  #> ——————————————————————————————————————————————— #> All Species   5.84     5.80     3.76     4.35   #> Setosa        5.01     5.00     1.46     1.50   rbind(mtbl, rrow(), mtbl2) #>                Sepal.Length      Petal.Length   #>               mean    median    mean    median  #> ——————————————————————————————————————————————— #> All Species   5.84     5.80     3.76     4.35   #>                                                 #> Setosa        5.01     5.00     1.46     1.50   rbind(mtbl, rrow(\"aaa\"), indent(mtbl2)) #>                Sepal.Length      Petal.Length   #>               mean    median    mean    median  #> ——————————————————————————————————————————————— #> All Species   5.84     5.80     3.76     4.35   #> aaa                                             #>   Setosa      5.01     5.00     1.46     1.50"},{"path":"https://roche.github.io/rtables/main/reference/rcell.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell value constructors — rcell","title":"Cell value constructors — rcell","text":"Construct cell value associate formatting, labeling, indenting, column spanning information .","code":""},{"path":"https://roche.github.io/rtables/main/reference/rcell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell value constructors — rcell","text":"","code":"rcell(   x,   format = NULL,   colspan = 1L,   label = NULL,   indent_mod = NULL,   footnotes = NULL,   align = NULL,   format_na_str = NULL )  non_ref_rcell(   x,   is_ref,   format = NULL,   colspan = 1L,   label = NULL,   indent_mod = NULL,   refval = NULL,   align = \"center\",   format_na_str = NULL )"},{"path":"https://roche.github.io/rtables/main/reference/rcell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell value constructors — rcell","text":"x . Cell value format FUN return formatted rcell format applied colspan integer(1). Columnspan value. label character(1). Label Null. non-null, looked determining row labels. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. footnotes list NULL. Referential footnote messages cell. align character(1) NULL. Alignment value rendered . defaults \"center\" NULL used. See rtables_aligns currently supported alignments. format_na_str character(1). String displayed formatted cell's value(s) NA. is_ref logical(1).     reference  column  (ie .in_ref_col shoul passed argument) refval . Value use reference column. Defaults NULL","code":""},{"path":"https://roche.github.io/rtables/main/reference/rcell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell value constructors — rcell","text":"object representing value within single cell within populated table. underlying structure object implementation detail sholud relied upon beyond calling accessors class.","code":""},{"path":"https://roche.github.io/rtables/main/reference/rcell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cell value constructors — rcell","text":"non_ref_rcell provides common blank cells reference column, value otherwise, passed value .in_ref_col used.","code":""},{"path":"https://roche.github.io/rtables/main/reference/rcell.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Cell value constructors — rcell","text":"currently column spanning supported defining header structure.","code":""},{"path":"https://roche.github.io/rtables/main/reference/ref_fnotes.html","id":null,"dir":"Reference","previous_headings":"","what":"Referential Footnote Accessors — row_footnotes","title":"Referential Footnote Accessors — row_footnotes","text":"Get set referential footnotes aspects built table","code":""},{"path":"https://roche.github.io/rtables/main/reference/ref_fnotes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Referential Footnote Accessors — row_footnotes","text":"","code":"row_footnotes(obj)  row_footnotes(obj) <- value  cell_footnotes(obj)  cell_footnotes(obj) <- value  col_fnotes_here(obj)  col_fnotes_here(obj) <- value  ref_index(obj)  ref_index(obj) <- value  ref_msg(obj)  fnotes_at_path(obj, rowpath = NULL, colpath = NULL, reset_idx = TRUE) <- value"},{"path":"https://roche.github.io/rtables/main/reference/ref_fnotes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Referential Footnote Accessors — row_footnotes","text":"obj . object accessor access modify value new value rowpath character NULL. Path within row structure. NULL indicates footnote go column rather cell. colpath character NULL. Path within column structure. NULL indicates footnote go row rather cell reset_idx logical(1). numbering referential footnotes immediately recalculated. Defaults TRUE.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/ref_fnotes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Referential Footnote Accessors — row_footnotes","text":"","code":"# How to add referencial footnotes after having created a table tbl <- basic_table() %>%     split_rows_by(\"SEX\", page_by = TRUE) %>%     analyze(\"AGE\") %>%      build_table(DM) tbl <- trim_rows(tbl) # Check the row and col structure to add precise references # row_paths(tbl) # col_paths(t) # row_paths_summary(tbl) # col_paths_summary(tbl)  # Add the citation numbers on the table and relative references in the footnotes fnotes_at_path(tbl, rowpath = c(\"SEX\", \"F\", \"AGE\", \"Mean\")) <- \"Famous paper 1\" fnotes_at_path(tbl, rowpath = c(\"SEX\", \"UNDIFFERENTIATED\")) <- \"Unfamous paper 2\" # tbl"},{"path":"https://roche.github.io/rtables/main/reference/rheader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a header — rheader","title":"Create a header — rheader","text":"Create header","code":""},{"path":"https://roche.github.io/rtables/main/reference/rheader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a header — rheader","text":"","code":"rheader(..., format = \"xx\", .lst = NULL)"},{"path":"https://roche.github.io/rtables/main/reference/rheader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a header — rheader","text":"... row specifications (either character vectors output rrow DataRow, LabelRow, etc. format FUN return formatted rcell format applied .lst list. already-collected list arguments tot used instead elements .... Arguments passed via ... ignored specified.","code":""},{"path":"https://roche.github.io/rtables/main/reference/rheader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a header — rheader","text":"InstantiatedColumnInfo object.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/rheader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a header — rheader","text":"","code":"h1 <- rheader(c(\"A\", \"B\", \"C\"))  h2 <- rheader(   rrow(NULL, rcell(\"group 1\", colspan = 2), rcell(\"group 2\", colspan = 2)),   rrow(NULL, \"A\", \"B\", \"A\", \"B\") )  h1 #> An InstantiatedColumnInfo object #> Columns: #> A (mnl) #> B (mnl) #> C (mnl) #>   h2 #> An InstantiatedColumnInfo object #> Columns: #> group 1 (mnl) -> A (mnl) #> group 1 (mnl) -> B (mnl) #> group 2 (mnl) -> A (mnl) #> group 2 (mnl) -> B (mnl) #>"},{"path":"https://roche.github.io/rtables/main/reference/row_accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Row attribute accessors — obj_avar","title":"Row attribute accessors — obj_avar","text":"Row attribute accessors","code":""},{"path":"https://roche.github.io/rtables/main/reference/row_accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row attribute accessors — obj_avar","text":"","code":"obj_avar(obj)  # S4 method for TableRow obj_avar(obj)  # S4 method for ElementaryTable obj_avar(obj)  row_cells(obj)  # S4 method for TableRow row_cells(obj)  row_cells(obj) <- value  # S4 method for TableRow row_cells(obj) <- value  row_values(obj)  # S4 method for TableRow row_values(obj)  row_values(obj) <- value  # S4 method for TableRow row_values(obj) <- value  # S4 method for LabelRow row_values(obj) <- value"},{"path":"https://roche.github.io/rtables/main/reference/row_accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row attribute accessors — obj_avar","text":"obj . object accessor access modify value new value","code":""},{"path":"https://roche.github.io/rtables/main/reference/row_accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row attribute accessors — obj_avar","text":"various, depending accessor called.","code":""},{"path":"https://roche.github.io/rtables/main/reference/row_paths_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Row/Col Paths Summary — row_paths_summary","title":"Print Row/Col Paths Summary — row_paths_summary","text":"Print Row/Col Paths Summary","code":""},{"path":"https://roche.github.io/rtables/main/reference/row_paths_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Row/Col Paths Summary — row_paths_summary","text":"","code":"row_paths_summary(x)  col_paths_summary(x)"},{"path":"https://roche.github.io/rtables/main/reference/row_paths_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Row/Col Paths Summary — row_paths_summary","text":"x rtable object","code":""},{"path":"https://roche.github.io/rtables/main/reference/row_paths_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Row/Col Paths Summary — row_paths_summary","text":"data.frame summarizing row- column-structure x.","code":""},{"path":"https://roche.github.io/rtables/main/reference/row_paths_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Row/Col Paths Summary — row_paths_summary","text":"","code":"library(dplyr)  ex_adsl_MF <- ex_adsl %>% filter(SEX %in% c(\"M\", \"F\"))  tbl <- basic_table() %>%   split_cols_by(\"ARM\") %>%   split_cols_by(\"SEX\", split_fun = drop_split_levels) %>%   analyze(c(\"AGE\", \"BMRKR2\")) %>%   build_table(ex_adsl_MF)  tbl #>              A: Drug X      B: Placebo      C: Combination   #>              F       M       F       M        F         M    #> ———————————————————————————————————————————————————————————— #> AGE                                                          #>   Mean     32.76   35.57   34.12   37.44    35.20     35.38  #> BMRKR2                                                       #>   LOW       26      21      21      23       26        11    #>   MEDIUM    21      15      38      18       17        23    #>   HIGH      32      15      18      14       23        26     df <- row_paths_summary(tbl) #> rowname     node_class    path                          #> ——————————————————————————————————————————————————————— #> AGE         LabelRow      ma_AGE_BMRKR2, AGE            #>   Mean      DataRow       ma_AGE_BMRKR2, AGE, Mean      #> BMRKR2      LabelRow      ma_AGE_BMRKR2, BMRKR2         #>   LOW       DataRow       ma_AGE_BMRKR2, BMRKR2, LOW    #>   MEDIUM    DataRow       ma_AGE_BMRKR2, BMRKR2, MEDIUM #>   HIGH      DataRow       ma_AGE_BMRKR2, BMRKR2, HIGH    df #>    label indent node_class         path #> 1    AGE      0   LabelRow ma_AGE_B.... #> 2   Mean      1    DataRow ma_AGE_B.... #> 3 BMRKR2      0   LabelRow ma_AGE_B.... #> 4    LOW      1    DataRow ma_AGE_B.... #> 5 MEDIUM      1    DataRow ma_AGE_B.... #> 6   HIGH      1    DataRow ma_AGE_B....  col_paths_summary(tbl) #> label             path                        #> ————————————————————————————————————————————— #> A: Drug X         ARM, A: Drug X              #>   F               ARM, A: Drug X, SEX, F      #>   M               ARM, A: Drug X, SEX, M      #> B: Placebo        ARM, B: Placebo             #>   F               ARM, B: Placebo, SEX, F     #>   M               ARM, B: Placebo, SEX, M     #> C: Combination    ARM, C: Combination         #>   F               ARM, C: Combination, SEX, F #>   M               ARM, C: Combination, SEX, M  # manually constructed table tbl3 <- rtable(    rheader(      rrow(\"row 1\", rcell(\"a\", colspan = 2),      rcell(\"b\", colspan = 2)    ),    rrow(\"h2\", \"a\", \"b\", \"c\", \"d\")),    rrow(\"r1\", 1, 2, 1, 2), rrow(\"r2\", 3, 4, 2,1) ) col_paths_summary(tbl3) #> label    path                 #> ————————————————————————————— #> a        manual, a            #>   a      manual, a, manual, a #>   b      manual, a, manual, b #> b        manual, b            #>   c      manual, b, manual, c #>   d      manual, b, manual, d"},{"path":"https://roche.github.io/rtables/main/reference/rowclasses.html","id":null,"dir":"Reference","previous_headings":"","what":"Row classes and constructors — LabelRow","title":"Row classes and constructors — LabelRow","text":"Row classes constructors Row constructors Classes","code":""},{"path":"https://roche.github.io/rtables/main/reference/rowclasses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row classes and constructors — LabelRow","text":"","code":"LabelRow(   lev = 1L,   label = \"\",   name = label,   vis = !is.na(label) && nzchar(label),   cinfo = EmptyColInfo,   indent_mod = 0L,   table_inset = 0L )  .tablerow(   vals = list(),   name = \"\",   lev = 1L,   label = name,   cspan = rep(1L, length(vals)),   cinfo = EmptyColInfo,   var = NA_character_,   format = NULL,   na_str = NA_character_,   klass,   indent_mod = 0L,   footnotes = list(),   table_inset = 0L )  DataRow(...)  ContentRow(...)"},{"path":"https://roche.github.io/rtables/main/reference/rowclasses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row classes and constructors — LabelRow","text":"lev integer. Nesting level (roughly, indentation level practical terms). label character(1). label (confused name) object/structure. name character(1). Name split/table/row created. Defaults corresponding label, required . vis logical. row visible (LabelRow ). cinfo InstantiatedColumnInfo (NULL). Column structure object created. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. table_inset numeric(1). Number spaces inset table header, table body, referential footnotes, main_footer, compared alignment title, subtitle, provenance footer. Defaults 0 (inset). vals list. cell values row cspan integer. Column span. 1 indicates spanning. var string, variable name format FormatSpec. Format associated split. Formats can declared via strings (\"xx.x\") function. cases analyze calls, can character vectors lists functions. na_str character(1). String displayed value x missing. Defaults \"NA\". klass Internal detail. footnotes list NULL. Referential footnotes applied current level ... passed shared constructor (.tablerow).","code":""},{"path":"https://roche.github.io/rtables/main/reference/rowclasses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row classes and constructors — LabelRow","text":"formal object representing table row constructed type.","code":""},{"path":"https://roche.github.io/rtables/main/reference/rowclasses.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Row classes and constructors — LabelRow","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/rrow.html","id":null,"dir":"Reference","previous_headings":"","what":"row — rrow","title":"row — rrow","text":"row","code":""},{"path":"https://roche.github.io/rtables/main/reference/rrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"row — rrow","text":"","code":"rrow(row.name = \"\", ..., format = NULL, indent = 0, inset = 0L)"},{"path":"https://roche.github.io/rtables/main/reference/rrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"row — rrow","text":"row.name NULL FUN argument deparsed used row.name rrow ... cell values format FUN return formatted rcell format applied indent deprecated. inset integer(1). table inset row table constructed. See table_inset.","code":""},{"path":"https://roche.github.io/rtables/main/reference/rrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"row — rrow","text":"row object context-appropriate type (label data)","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/rrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"row — rrow","text":"","code":"rrow(\"ABC\", c(1,2), c(3,2), format = \"xx (xx.%)\") #> [DataRow indent_mod 0]: ABC   1 (200%)   3 (200%) rrow(\"\") #> [LabelRow indent_mod 0]:"},{"path":"https://roche.github.io/rtables/main/reference/rrowl.html","id":null,"dir":"Reference","previous_headings":"","what":"rrowl — rrowl","title":"rrowl — rrowl","text":"rrowl","code":""},{"path":"https://roche.github.io/rtables/main/reference/rrowl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rrowl — rrowl","text":"","code":"rrowl(row.name, ..., format = NULL, indent = 0, inset = 0L)"},{"path":"https://roche.github.io/rtables/main/reference/rrowl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rrowl — rrowl","text":"row.name NULL FUN argument deparsed used row.name rrow ... values vector/list form format FUN return formatted rcell format applied indent deprecated. inset integer(1). table inset row table constructed. See table_inset.","code":""},{"path":"https://roche.github.io/rtables/main/reference/rrowl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rrowl — rrowl","text":"row object context-appropriate type (label data)","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/rrowl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rrowl — rrowl","text":"","code":"rrowl(\"a\", c(1,2,3), format = \"xx\") #> [DataRow indent_mod 0]: a   1   2   3 rrowl(\"a\", c(1,2,3), c(4,5,6), format = \"xx\") #> [DataRow indent_mod 0]: a   1   2   3   4   5   6   rrowl(\"N\", table(iris$Species)) #> [DataRow indent_mod 0]: N   50   50   50 rrowl(\"N\", table(iris$Species), format = \"xx\") #> [DataRow indent_mod 0]: N   50   50   50  x <- tapply(iris$Sepal.Length, iris$Species, mean, simplify = FALSE)  rrow(row.name = \"row 1\", x) #> [DataRow indent_mod 0]: row 1   5.006, 5.936, 6.588 rrow(\"ABC\", 2, 3) #> [DataRow indent_mod 0]: ABC   2   3  rrowl(row.name = \"row 1\", c(1, 2), c(3,4)) #> [DataRow indent_mod 0]: row 1   1   2   3   4 rrow(row.name = \"row 2\", c(1, 2), c(3,4)) #> [DataRow indent_mod 0]: row 2   1, 2   3, 4"},{"path":"https://roche.github.io/rtables/main/reference/rtable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Table — rtable","title":"Create a Table — rtable","text":"Create Table","code":""},{"path":"https://roche.github.io/rtables/main/reference/rtable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Table — rtable","text":"","code":"rtable(header, ..., format = NULL, hsep = default_hsep(), inset = 0L)  rtablel(header, ..., format = NULL, hsep = default_hsep(), inset = 0L)"},{"path":"https://roche.github.io/rtables/main/reference/rtable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Table — rtable","text":"header Information defining header (column strucure) table. can row objects (legacy), character vectors InstantiatedColumnInfo object. ... Rows place table. format FUN return formatted rcell format applied hsep character(1). Set character(s) repeated separator header body table rendered text. Defaults connected horrizontal line (unicode 2014) locals use UTF charset, - elsewhere (per session warning). inset integer(1). table inset row table constructed. See table_inset.","code":""},{"path":"https://roche.github.io/rtables/main/reference/rtable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Table — rtable","text":"formal table object appropriate type (ElementaryTable TableTree)","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/rtable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Table — rtable","text":"","code":"rtable(   header = LETTERS[1:3],   rrow(\"one to three\", 1, 2, 3),   rrow(\"more stuff\", rcell(pi, format = \"xx.xx\"), \"test\", \"and more\") ) #>                 A      B        C     #> ————————————————————————————————————— #> one to three    1      2        3     #> more stuff     3.14   test   and more   # Table with multirow header sel <- iris$Species == \"setosa\" mtbl <- rtable(   header = rheader(     rrow(row.name = NULL, rcell(\"Sepal.Length\", colspan = 2),          rcell(\"Petal.Length\", colspan=2)),     rrow(NULL, \"mean\", \"median\", \"mean\", \"median\")   ),   rrow(     row.name = \"All Species\",     mean(iris$Sepal.Length), median(iris$Sepal.Length),     mean(iris$Petal.Length), median(iris$Petal.Length),     format = \"xx.xx\"   ),   rrow(     row.name = \"Setosa\",     mean(iris$Sepal.Length[sel]), median(iris$Sepal.Length[sel]),     mean(iris$Petal.Length[sel]), median(iris$Petal.Length[sel])   ) )  mtbl #>                Sepal.Length      Petal.Length   #>                mean    median    mean    median #> ——————————————————————————————————————————————— #> All Species    5.84     5.80     3.76     4.35  #> Setosa        5.006      5      1.462     1.5    names(mtbl) # always first row of header #> [1] \"Sepal.Length\" \"Sepal.Length\" \"Petal.Length\" \"Petal.Length\"  # Single row header  tbl <- rtable(   header = c(\"Treatement\\nN=100\", \"Comparison\\nN=300\"),   format = \"xx (xx.xx%)\",   rrow(\"A\", c(104, .2), c(100, .4)),   rrow(\"B\", c(23, .4), c(43, .5)),   rrow(\"\"),   rrow(\"this is a very long section header\"),   rrow(\"estimate\", rcell(55.23, \"xx.xx\", colspan = 2)),   rrow(\"95% CI\", indent = 1, rcell(c(44.8, 67.4), format = \"(xx.x, xx.x)\", colspan = 2)) ) tbl #>                                       Treatement     Comparison  #>                                         N=100          N=300     #> ———————————————————————————————————————————————————————————————— #> A                                    104 (20.00%)   100 (40.00%) #> B                                    23 (40.00%)    43 (50.00%)  #>                                                                  #> this is a very long section header                               #> estimate                                        55.23            #> 95% CI                                      (44.8, 67.4)          row.names(tbl) #> [1] \"A\"                                  \"B\"                                  #> [3] \"\"                                   \"this is a very long section header\" #> [5] \"estimate\"                           \"95% CI\"                             names(tbl) #> [1] \"Treatement\" \"Comparison\"   # Subsetting tbl[1, ] #>      Treatement     Comparison  #>        N=100          N=300     #> ——————————————————————————————— #> A   104 (20.00%)   100 (40.00%) tbl[, 1] #>                                       Treatement  #>                                         N=100     #> ————————————————————————————————————————————————— #> A                                    104 (20.00%) #> B                                    23 (40.00%)  #>                                                   #> this is a very long section header                #> estimate                                55.23     #> 95% CI                               (44.8, 67.4)  tbl[1,2] #>      Comparison  #>        N=300     #> ———————————————— #> A   100 (40.00%) tbl[2, 1] #>     Treatement  #>        N=100    #> ——————————————— #> B   23 (40.00%)  tbl[3,2] #>    Comparison #>      N=300    #> ————————————— #>               tbl[5,1] #>            Treatement #>              N=100    #> ————————————————————— #> estimate     55.23    tbl[5,2] #>            Comparison #>              N=300    #> ————————————————————— #> estimate     55.23     # # Data Structure methods dim(tbl) #> [1] 6 2 nrow(tbl) #> [1] 6 ncol(tbl) #> [1] 2 names(tbl) #> [1] \"Treatement\" \"Comparison\"   # Colspans  tbl2 <- rtable(   c(\"A\", \"B\", \"C\", \"D\", \"E\"),   format = \"xx\",   rrow(\"r1\", 1, 2, 3, 4, 5),    rrow(\"r2\", rcell(\"sp2\", colspan = 2), \"sp1\", rcell(\"sp2-2\", colspan = 2)) )  tbl2 #>      A    B    C     D    E  #> ———————————————————————————— #> r1   1    2    3     4    5  #> r2    sp2     sp1    sp2-2"},{"path":"https://roche.github.io/rtables/main/reference/rtables_aligns.html","id":null,"dir":"Reference","previous_headings":"","what":"Alignment utils — rtables_aligns","title":"Alignment utils — rtables_aligns","text":"Currently supported cell value alignments. values may used set content alignment (align rcell() .aligns in_rows()).","code":""},{"path":"https://roche.github.io/rtables/main/reference/rtables_aligns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alignment utils — rtables_aligns","text":"","code":"rtables_aligns()"},{"path":"https://roche.github.io/rtables/main/reference/rtables_aligns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alignment utils — rtables_aligns","text":"vector alignments currently supported.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/rtables_aligns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alignment utils — rtables_aligns","text":"","code":"# See the alignments available in rtables rtables_aligns() #> [1] \"left\"   \"right\"  \"center\"  # Right alignment with align in rcell() basic_table() %>%   analyze(\"Species\", function(x) in_rows(left = rcell(\"r\", align = \"right\"))) %>%   build_table(iris) #>        all obs #> —————————————— #> left         r  # Set multiple alignments using character vectors with .aligns in in_rows() basic_table() %>%   analyze(\"Species\", function(x) {     in_rows(       left = rcell(\"l\"),       right = rcell(\"r\"),       .aligns = c(\"left\", \"right\")     )   }) %>%   build_table(iris) #>         all obs #> ——————————————— #> left    l       #> right         r  # Clinical data example: basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"SEX\", split_fun = drop_split_levels) %>%   analyze(c(\"AGE\"), function(x) {     in_rows(       \"mean\" = rcell(mean(x), align = \"right\"),       \"sd\" = rcell(sd(x), align = \"left\"), .formats = c(\"xx.x\")     )   }, show_labels = \"visible\", na_str = \"NE\") %>%   build_table(ex_adsl) #>                    A: Drug X   B: Placebo   C: Combination #> —————————————————————————————————————————————————————————— #> F                                                          #>   AGE                                                      #>     mean                32.8         34.1             35.2 #>     sd             6.1         7.1          7.4            #> M                                                          #>   AGE                                                      #>     mean                35.6         37.4             35.4 #>     sd             7.1         8.7          8.2            #> U                                                          #>   AGE                                                      #>     mean                31.7         31.0             35.2 #>     sd             3.2         5.7          3.1            #> UNDIFFERENTIATED                                           #>   AGE                                                      #>     mean                28.0           NE             45.0 #>     sd             NE          NE           1.4"},{"path":"https://roche.github.io/rtables/main/reference/rtinner.html","id":null,"dir":"Reference","previous_headings":"","what":"Default tabulation — simple_analysis","title":"Default tabulation — simple_analysis","text":"function used analyze invoked","code":""},{"path":"https://roche.github.io/rtables/main/reference/rtinner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default tabulation — simple_analysis","text":"","code":"simple_analysis(x, ...)  # S4 method for numeric simple_analysis(x, ...)  # S4 method for logical simple_analysis(x, ...)  # S4 method for factor simple_analysis(x, ...)  # S4 method for ANY simple_analysis(x, ...)"},{"path":"https://roche.github.io/rtables/main/reference/rtinner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default tabulation — simple_analysis","text":"x already split data tabulated particular cell/set cells ... passed directly","code":""},{"path":"https://roche.github.io/rtables/main/reference/rtinner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default tabulation — simple_analysis","text":"RowsVerticalSection object (NULL). details object considered internal implementation detail.","code":""},{"path":"https://roche.github.io/rtables/main/reference/rtinner.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default tabulation — simple_analysis","text":"function following behavior given particular types inputs: numeric calls mean x logical calls sum x factor calls length x in_rows called resulting value(s). classes input currently lead error.","code":""},{"path":"https://roche.github.io/rtables/main/reference/rtinner.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Default tabulation — simple_analysis","text":"Gabriel Becker Adrian Waddell","code":""},{"path":"https://roche.github.io/rtables/main/reference/rtinner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default tabulation — simple_analysis","text":"","code":"simple_analysis(1:3) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1     Mean           2.00          0      Mean simple_analysis(iris$Species) #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>     row_name formatted_cell indent_mod  row_label #> 1     setosa             50          0     setosa #> 2 versicolor             50          0 versicolor #> 3  virginica             50          0  virginica simple_analysis(iris$Species == \"setosa\") #> RowsVerticalSection (in_rows) object print method: #> ---------------------------- #>   row_name formatted_cell indent_mod row_label #> 1    Count             50          0     Count"},{"path":"https://roche.github.io/rtables/main/reference/score_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Score functions for sorting TableTrees — cont_n_allcols","title":"Score functions for sorting TableTrees — cont_n_allcols","text":"Score functions sorting TableTrees","code":""},{"path":"https://roche.github.io/rtables/main/reference/score_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score functions for sorting TableTrees — cont_n_allcols","text":"","code":"cont_n_allcols(tt)  cont_n_onecol(j)"},{"path":"https://roche.github.io/rtables/main/reference/score_funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score functions for sorting TableTrees — cont_n_allcols","text":"tt TableTree (related class). TableTree object representing populated table. j numeric(1). Number column scored","code":""},{"path":"https://roche.github.io/rtables/main/reference/score_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score functions for sorting TableTrees — cont_n_allcols","text":"single numeric value indicating score according relevant metric tt, used sorting.","code":""},{"path":"https://roche.github.io/rtables/main/reference/sf_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Function Arg Conventions — sf_args","title":"Split Function Arg Conventions — sf_args","text":"Split Function Arg Conventions","code":""},{"path":"https://roche.github.io/rtables/main/reference/sf_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Function Arg Conventions — sf_args","text":"","code":"sf_args(trim, label, first)"},{"path":"https://roche.github.io/rtables/main/reference/sf_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Function Arg Conventions — sf_args","text":"trim logical(1). splits corresponding 0 observations kept tabulating. label character(1). label (confused name) object/structure. first logical(1). created split level placed first levels (TRUE) last (FALSE, default).","code":""},{"path":"https://roche.github.io/rtables/main/reference/sf_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Function Arg Conventions — sf_args","text":"NULL (argument template dummy function)","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/sort_at_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort substructure of a TableTree at a particular Path in the Tree. — sort_at_path","title":"Sort substructure of a TableTree at a particular Path in the Tree. — sort_at_path","text":"Sort substructure TableTree particular Path Tree.","code":""},{"path":"https://roche.github.io/rtables/main/reference/sort_at_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort substructure of a TableTree at a particular Path in the Tree. — sort_at_path","text":"","code":"sort_at_path(   tt,   path,   scorefun,   decreasing = NA,   na.pos = c(\"omit\", \"last\", \"first\") )"},{"path":"https://roche.github.io/rtables/main/reference/sort_at_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort substructure of a TableTree at a particular Path in the Tree. — sort_at_path","text":"tt TableTree (related class). TableTree object representing populated table. path character. vector path position within structure tabletree. element represents subsequent choice amongst children previous choice. scorefun function. Scoring function, accept type children directly position path (either VTableTree, VTableRow, VTableNodeInfo, covers ) return numeric value sorted. decreasing logical(1). scores generated scorefun sorted decreasing order. unset (default NA), set TRUE generated scores numeric FALSE characters. na.pos character(1). done children (subtrees/rows) NA scores. Defaults \"omit\", removes , allowed values \"last\"  \"first\" indicate placed order.","code":""},{"path":"https://roche.github.io/rtables/main/reference/sort_at_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort substructure of a TableTree at a particular Path in the Tree. — sort_at_path","text":"TableTree structure tt exception requested sorting done path","code":""},{"path":"https://roche.github.io/rtables/main/reference/sort_at_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sort substructure of a TableTree at a particular Path in the Tree. — sort_at_path","text":"path can include \"*\" step, means taht child step separately sorted based scorefun remaining path entries. can occur multiple times path.","code":""},{"path":"https://roche.github.io/rtables/main/reference/spl_context.html","id":null,"dir":"Reference","previous_headings":"","what":".spl_context within analysis and split functions — spl_context","title":".spl_context within analysis and split functions — spl_context","text":".spl_context within analysis split functions","code":""},{"path":"https://roche.github.io/rtables/main/reference/spl_context.html","id":"-spl-context-details","dir":"Reference","previous_headings":"","what":".spl_context Details","title":".spl_context within analysis and split functions — spl_context","text":".spl_context data.frame gives information subsets data corresponding splits within-current analyze action nested. Taken together, correspond path resulting (set ) rows analysis function creating, although information slightly different form. split (correspond groups rows resulting table) represented via following columns: split name split (often variable split simple case) value string representation value split full_parent_df dataframe containing full data (ie across columns) corresponding path defined combination split value row rows row all_cols_n number observations  corresponding row grouping (union columns) (row-split analyze contexts ) <1 column column table structure list columns (named names(col_exprs(tab))) contain logical vectors corresponding subset row's full_parent_df corresponding column cur_col_subset List column containing logical vectors indicating subset row's full_parent_df column currently created analysis function cur_col_n integer column containing observation counts split note Within analysis functions accept .spl_context, all_cols_n cur_col_n columns dataframe contain 'true' observation counts corresponding row-group row-group x column subsets data. numbers , currently , reflect alternate column observation counts provided alt_counts_df, col_counts col_total arguments build_table","code":""},{"path":"https://roche.github.io/rtables/main/reference/spl_context_to_disp_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate spl_context to Path for display in error messages — spl_context_to_disp_path","title":"Translate spl_context to Path for display in error messages — spl_context_to_disp_path","text":"Translate spl_context Path display error messages","code":""},{"path":"https://roche.github.io/rtables/main/reference/spl_context_to_disp_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate spl_context to Path for display in error messages — spl_context_to_disp_path","text":"","code":"spl_context_to_disp_path(ctx)"},{"path":"https://roche.github.io/rtables/main/reference/spl_context_to_disp_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate spl_context to Path for display in error messages — spl_context_to_disp_path","text":"ctx data.frame. spl_context data.frame error occured","code":""},{"path":"https://roche.github.io/rtables/main/reference/spl_context_to_disp_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate spl_context to Path for display in error messages — spl_context_to_disp_path","text":"character string containing description row path corresponding ctx","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_cols_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Declaring a column-split based on levels of a variable — split_cols_by","title":"Declaring a column-split based on levels of a variable — split_cols_by","text":"generate children subset categorical variable","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_cols_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declaring a column-split based on levels of a variable — split_cols_by","text":"","code":"split_cols_by(   lyt,   var,   labels_var = var,   split_label = var,   split_fun = NULL,   format = NULL,   nested = TRUE,   child_labels = c(\"default\", \"visible\", \"hidden\"),   extra_args = list(),   ref_group = NULL )"},{"path":"https://roche.github.io/rtables/main/reference/split_cols_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declaring a column-split based on levels of a variable — split_cols_by","text":"lyt layout object pre-data used tabulation var string, variable name labels_var string, name variable containing labels displayed values var split_label string. Label string associated table generated split. confused labels assigned child (based data type split tabulation). split_fun function/NULL. custom splitting function See custom_split_funs format FormatSpec. Format associated split. Formats can declared via strings (\"xx.x\") function. cases analyze calls, can character vectors lists functions. nested boolean. layout instruction applied within existing layout structure possible (TRUE, default) new top-level element (`FALSE). Ignored nest split underneath analyses, allowed. child_labels string. One \"default\", \"visible\", \"hidden\". display behavior  labels (ie label rows) children split. Defaults \"default\" flags label row visible child 0 content rows. extra_args list. Extra arguments passed tabulation function. Element position thte list corresponds children split. Named elements child-specific lists ignored match formal argument ttabulation function. ref_group character(1) NULL. Level var considered ref_group/reference","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_cols_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declaring a column-split based on levels of a variable — split_cols_by","text":"PreDataTableLayouts object suitable passing layouting functions, build_table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_cols_by.html","id":"custom-splitting-function-details","dir":"Reference","previous_headings":"","what":"Custom Splitting Function Details","title":"Declaring a column-split based on levels of a variable — split_cols_by","text":"User-defined custom split functions can perform type computation incoming data provided meed contract generating 'splits' incoming data 'based ' split object. Split functions functions accept: df data.frame incoming data split spl Split object. largely internal detail custom functions need worry ,  obj_name(spl), example, give name split appear paths resulting table vals pre-calculated values. given non-null values, values returned match . NULL cases can likely ignored labels pre-calculated value labels. values trim TRUE, resulting splits empty removed (Optional) .spl_context data.frame describing previously performed splits collectively arrived df function must output named list following elements: values vector values corresponding splits df datasplit list data.frames representing groupings actual observations df. labels character vector giving string label value listed values element (Optional) extras present, extra arguments passed summary analysis functions whenever executed corresponding element datasplit subset thereof One way generate custom splitting functions wrap existing split functions modify either incoming data called, outputs.","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_cols_by.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Declaring a column-split based on levels of a variable — split_cols_by","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_cols_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declaring a column-split based on levels of a variable — split_cols_by","text":"","code":"lyt <- basic_table() %>%   split_cols_by(\"ARM\") %>%   analyze(c(\"AGE\", \"BMRKR2\"))  build_table(lyt, ex_adsl) #>            A: Drug X   B: Placebo   C: Combination #> —————————————————————————————————————————————————— #> AGE                                                #>   Mean       33.77       35.43          35.43      #> BMRKR2                                             #>   LOW         50           45             40       #>   MEDIUM      37           56             42       #>   HIGH        47           33             50        # Let's look at the splits in more detail  l <- basic_table() %>% split_cols_by(\"ARM\") l #> A Pre-data Table Layout #>  #> Column-Split Structure: #> ARM (lvls)  #>  #> Row-Split Structure: #>  ()  #>   # add an analysis (summary) l2 <- l %>%     analyze(c(\"AGE\", \"COUNTRY\"), afun = list_wrap_x(summary) ,             format = \"xx.xx\") l2 #> A Pre-data Table Layout #>  #> Column-Split Structure: #> ARM (lvls)  #>  #> Row-Split Structure: #> AGE:COUNTRY (** multivar analysis **)  #>   build_table(l2, DM) #>             A: Drug X   B: Placebo   C: Combination #> ——————————————————————————————————————————————————— #> AGE                                                 #>   Min.        20.00       21.00          22.00      #>   1st Qu.     29.00       29.00          30.00      #>   Median      33.00       32.00          33.00      #>   Mean        34.91       33.02          34.57      #>   3rd Qu.     39.00       37.00          38.00      #>   Max.        60.00       55.00          53.00      #> COUNTRY                                             #>   CHN         62.00       48.00          69.00      #>   USA         13.00       14.00          17.00      #>   BRA         9.00        13.00           7.00      #>   PAK         8.00         8.00          12.00      #>   NGA         10.00        5.00           9.00      #>   RUS         9.00         5.00           6.00      #>   JPN         5.00         8.00           5.00      #>   GBR         2.00         3.00           2.00      #>   CAN         3.00         2.00           2.00      #>   CHE         0.00         0.00           0.00       # By default sequentially adding layouts results in nesting library(dplyr) DM_MF <- DM %>% filter(SEX %in% c(\"M\", \"F\")) %>%   mutate(SEX = droplevels(SEX))  l3 <- basic_table() %>% split_cols_by(\"ARM\") %>%   split_cols_by(\"SEX\") %>%   analyze(c(\"AGE\", \"COUNTRY\"), afun = list_wrap_x(summary),           format = \"xx.xx\") l3 #> A Pre-data Table Layout #>  #> Column-Split Structure: #> ARM (lvls) -> SEX (lvls)  #>  #> Row-Split Structure: #> AGE:COUNTRY (** multivar analysis **)  #>    build_table(l3, DM_MF) #>               A: Drug X      B: Placebo      C: Combination   #>               F       M       F       M        F         M    #> ————————————————————————————————————————————————————————————— #> AGE                                                           #>   Min.      20.00   24.00   21.00   21.00    22.00     25.00  #>   1st Qu.   29.00   31.00   29.00   28.00    30.00     29.00  #>   Median    32.00   35.00   33.00   31.00    35.00     32.00  #>   Mean      33.71   36.55   33.84   32.10    34.89     34.28  #>   3rd Qu.   38.00   41.50   38.00   35.75    39.00     38.00  #>   Max.      58.00   60.00   55.00   47.00    53.00     53.00  #> COUNTRY                                                       #>   CHN       34.00   28.00   29.00   19.00    31.00     38.00  #>   USA       8.00    5.00    6.00    8.00     10.00     7.00   #>   BRA       6.00    3.00    6.00    7.00     3.00      4.00   #>   PAK       2.00    6.00    5.00    3.00     5.00      7.00   #>   NGA       6.00    4.00    2.00    3.00     5.00      4.00   #>   RUS       7.00    2.00    1.00    4.00     2.00      4.00   #>   JPN       2.00    3.00    3.00    5.00     4.00      1.00   #>   GBR       2.00    0.00    3.00    0.00     1.00      1.00   #>   CAN       3.00    0.00    1.00    1.00     0.00      2.00   #>   CHE       0.00    0.00    0.00    0.00     0.00      0.00    # nested=TRUE vs not l4 <- basic_table() %>% split_cols_by(\"ARM\") %>%  split_rows_by(\"SEX\", split_fun = drop_split_levels) %>%  split_rows_by(\"RACE\", split_fun = drop_split_levels) %>%  analyze(\"AGE\")  l4 #> A Pre-data Table Layout #>  #> Column-Split Structure: #> ARM (lvls)  #>  #> Row-Split Structure: #> SEX (lvls) -> RACE (lvls) -> AGE (** analysis **)  #>  build_table(l4, DM) #>                               A: Drug X   B: Placebo   C: Combination #> ————————————————————————————————————————————————————————————————————— #> F                                                                     #>   ASIAN                                                               #>     Mean                        33.55       34.00          34.90      #>   BLACK OR AFRICAN AMERICAN                                           #>     Mean                        33.17       30.58          33.85      #>   WHITE                                                               #>     Mean                        35.88       38.57          36.50      #> M                                                                     #>   ASIAN                                                               #>     Mean                        35.03       31.10          34.39      #>   BLACK OR AFRICAN AMERICAN                                           #>     Mean                        37.40       32.83          34.14      #>   WHITE                                                               #>     Mean                        44.00       35.29          34.00       l5 <- basic_table() %>% split_cols_by(\"ARM\") %>%  split_rows_by(\"SEX\", split_fun= drop_split_levels) %>%  analyze(\"AGE\") %>%  split_rows_by(\"RACE\", nested=FALSE, split_fun = drop_split_levels) %>%  analyze(\"AGE\")  l5 #> A Pre-data Table Layout #>  #> Column-Split Structure: #> ARM (lvls)  #>  #> Row-Split Structure: #> SEX (lvls) -> AGE (** analysis **)  #> RACE (lvls) -> AGE (** analysis **)  #>  build_table(l5, DM) #>                             A: Drug X   B: Placebo   C: Combination #> ——————————————————————————————————————————————————————————————————— #> F                                                                   #>   Mean                        33.71       33.84          34.89      #> M                                                                   #>   Mean                        36.55       32.10          34.28      #> ASIAN                                                               #>   Mean                        34.20       32.68          34.63      #> BLACK OR AFRICAN AMERICAN                                           #>   Mean                        34.68       31.71          34.00      #> WHITE                                                               #>   Mean                        39.36       36.93          35.11"},{"path":"https://roche.github.io/rtables/main/reference/split_cols_by_multivar.html","id":null,"dir":"Reference","previous_headings":"","what":"Associate Multiple Variables with Columns — split_cols_by_multivar","title":"Associate Multiple Variables with Columns — split_cols_by_multivar","text":"cases, variable ultimately analyzed naturally defined column, row basis. need columns reflect different variables entirely, rather different levels single variable, use split_cols_by_multivar","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_cols_by_multivar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Associate Multiple Variables with Columns — split_cols_by_multivar","text":"","code":"split_cols_by_multivar(   lyt,   vars,   split_fun = NULL,   varlabels = vars,   varnames = NULL,   nested = TRUE )"},{"path":"https://roche.github.io/rtables/main/reference/split_cols_by_multivar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Associate Multiple Variables with Columns — split_cols_by_multivar","text":"lyt layout object pre-data used tabulation vars character vector. Multiple variable names. split_fun function/NULL. custom splitting function See custom_split_funs varlabels character vector. Labels vars varnames character vector. Names vars appear pathing. vars unique variable names. , variable names suffixes necessary enforce uniqueness. nested boolean. layout instruction applied within existing layout structure possible (TRUE, default) new top-level element (`FALSE). Ignored nest split underneath analyses, allowed.","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_cols_by_multivar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Associate Multiple Variables with Columns — split_cols_by_multivar","text":"PreDataTableLayouts object suitable passing layouting functions, build_table.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/split_cols_by_multivar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Associate Multiple Variables with Columns — split_cols_by_multivar","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_cols_by_multivar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Associate Multiple Variables with Columns — split_cols_by_multivar","text":"","code":"library(dplyr) ANL <- DM %>% mutate(value = rnorm(n()), pctdiff = runif(n()))  ## toy example where we take the mean of the first variable and the ## count of >.5 for the second. colfuns <- list(function(x) in_rows(mean = mean(x), .formats = \"xx.x\"),                 function(x) in_rows(\"# x > 5\" = sum(x > .5), .formats = \"xx\"))  l <- basic_table() %>%     split_cols_by(\"ARM\") %>%     split_cols_by_multivar(c(\"value\", \"pctdiff\")) %>%     split_rows_by(\"RACE\", split_label = \"ethnicity\",                   split_fun = drop_split_levels) %>%     summarize_row_groups() %>%     analyze_colvars(afun = colfuns)  l #> A Pre-data Table Layout #>  #> Column-Split Structure: #> ARM (lvls) -> value:pctdiff (vars)  #>  #> Row-Split Structure: #> RACE (lvls) -> NA (** col-var analysis **)  #>   build_table(l, ANL) #>                                    A: Drug X                B: Placebo              C: Combination      #>                               value       pctdiff       value       pctdiff       value       pctdiff   #> ——————————————————————————————————————————————————————————————————————————————————————————————————————— #> ASIAN                       79 (65.3%)   79 (65.3%)   68 (64.2%)   68 (64.2%)   84 (65.1%)   84 (65.1%) #>   mean                         -0.1          36          -0.0          29          0.0           42     #> BLACK OR AFRICAN AMERICAN   28 (23.1%)   28 (23.1%)   24 (22.6%)   24 (22.6%)   27 (20.9%)   27 (20.9%) #>   mean                         0.2           12          -0.1          13          -0.1          9      #> WHITE                       14 (11.6%)   14 (11.6%)   14 (13.2%)   14 (13.2%)   18 (14.0%)   18 (14.0%) #>   mean                         0.4           7           0.2           11          -0.1          8"},{"path":"https://roche.github.io/rtables/main/reference/split_funcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Split functions — remove_split_levels","title":"Split functions — remove_split_levels","text":"Split functions","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_funcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split functions — remove_split_levels","text":"","code":"remove_split_levels(excl)  keep_split_levels(only, reorder = TRUE)  drop_split_levels(df, spl, vals = NULL, labels = NULL, trim = FALSE)  drop_and_remove_levels(excl)  reorder_split_levels(neworder, newlabels = neworder, drlevels = TRUE)  trim_levels_in_group(innervar, drop_outlevs = TRUE)"},{"path":"https://roche.github.io/rtables/main/reference/split_funcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split functions — remove_split_levels","text":"excl character. Levels excluded (reflected resulting table structure regardless presence data). character. Levels retain (others dropped). reorder logical(1). order used order children split. defaults TRUE df dataset (data.frame tibble) spl Split object defining partitioning analysis/tabulation data. vals . internal use . labels character. Labels use remaining levels instead existing ones. trim logical(1). splits corresponding 0 observations kept tabulating. neworder character. New order factor levels. newlabels character. Labels (new order ) factor levels drlevels logical(1). levels data appear neworder dropped. Defaults TRUE innervar character(1). Variable whose factor levels trimmed (e.g., empty levels dropped) separately within grouping defined point structure drop_outlevs logical(1). empty levels variable split (ie 'outer' variable, innervar) dropped? Defaults TRUE","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_funcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split functions — remove_split_levels","text":"closure suitable use splitting function (splfun) creating table layout","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_funcs.html","id":"custom-splitting-function-details","dir":"Reference","previous_headings":"","what":"Custom Splitting Function Details","title":"Split functions — remove_split_levels","text":"User-defined custom split functions can perform type computation incoming data provided meed contract generating 'splits' incoming data 'based ' split object. Split functions functions accept: df data.frame incoming data split spl Split object. largely internal detail custom functions need worry ,  obj_name(spl), example, give name split appear paths resulting table vals pre-calculated values. given non-null values, values returned match . NULL cases can likely ignored labels pre-calculated value labels. values trim TRUE, resulting splits empty removed (Optional) .spl_context data.frame describing previously performed splits collectively arrived df function must output named list following elements: values vector values corresponding splits df datasplit list data.frames representing groupings actual observations df. labels character vector giving string label value listed values element (Optional) extras present, extra arguments passed summary analysis functions whenever executed corresponding element datasplit subset thereof One way generate custom splitting functions wrap existing split functions modify either incoming data called, outputs.","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_funcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split functions — remove_split_levels","text":"","code":"l <- basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"COUNTRY\",                 split_fun = remove_split_levels(c(\"USA\", \"CAN\",                                                   \"CHE\", \"BRA\"))) %>%   analyze(\"AGE\")  build_table(l, DM) #>          A: Drug X   B: Placebo   C: Combination #> ———————————————————————————————————————————————— #> CHN                                              #>   Mean     36.08       34.12          33.71      #> PAK                                              #>   Mean     35.38       33.12          36.75      #> NGA                                              #>   Mean     31.20       31.40          35.78      #> RUS                                              #>   Mean     33.33       34.20          33.00      #> JPN                                              #>   Mean     31.20       32.50          36.20      #> GBR                                              #>   Mean     32.00       29.00          30.00       l <- basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"COUNTRY\",                 split_fun = keep_split_levels(c(\"USA\", \"CAN\", \"BRA\"))) %>%   analyze(\"AGE\")  build_table(l, DM) #>          A: Drug X   B: Placebo   C: Combination #> ———————————————————————————————————————————————— #> USA                                              #>   Mean     36.77       32.57          36.41      #> CAN                                              #>   Mean     36.00       34.00          29.50      #> BRA                                              #>   Mean     31.78       30.62          36.14      l <- basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"SEX\", split_fun = drop_split_levels) %>%   analyze(\"AGE\")  build_table(l, DM) #>          A: Drug X   B: Placebo   C: Combination #> ———————————————————————————————————————————————— #> F                                                #>   Mean     33.71       33.84          34.89      #> M                                                #>   Mean     36.55       32.10          34.28      l <- basic_table() %>%   split_cols_by(\"ARM\") %>%   split_rows_by(\"SEX\", split_fun = drop_and_remove_levels(c(\"M\", \"U\"))) %>%   analyze(\"AGE\")  build_table(l, DM) #>          A: Drug X   B: Placebo   C: Combination #> ———————————————————————————————————————————————— #> F                                                #>   Mean     33.71       33.84          34.89"},{"path":"https://roche.github.io/rtables/main/reference/split_rows_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Rows according to levels of a variable — split_rows_by","title":"Add Rows according to levels of a variable — split_rows_by","text":"Add Rows according levels variable","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_rows_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Rows according to levels of a variable — split_rows_by","text":"","code":"split_rows_by(   lyt,   var,   labels_var = var,   split_label = var,   split_fun = NULL,   format = NULL,   na_str = NA_character_,   nested = TRUE,   child_labels = c(\"default\", \"visible\", \"hidden\"),   label_pos = \"hidden\",   indent_mod = 0L,   page_by = FALSE,   page_prefix = split_label,   section_div = NA_character_ )"},{"path":"https://roche.github.io/rtables/main/reference/split_rows_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Rows according to levels of a variable — split_rows_by","text":"lyt layout object pre-data used tabulation var string, variable name labels_var string, name variable containing labels displayed values var split_label string. Label string associated table generated split. confused labels assigned child (based data type split tabulation). split_fun function/NULL. custom splitting function See custom_split_funs format FormatSpec. Format associated split. Formats can declared via strings (\"xx.x\") function. cases analyze calls, can character vectors lists functions. na_str character(1). String displayed value x missing. Defaults \"NA\". nested boolean. layout instruction applied within existing layout structure possible (TRUE, default) new top-level element (`FALSE). Ignored nest split underneath analyses, allowed. child_labels string. One \"default\", \"visible\", \"hidden\". display behavior  labels (ie label rows) children split. Defaults \"default\" flags label row visible child 0 content rows. label_pos character(1). Location variable label displayed, Accepts  hidden (default non-analyze row splits), visible, topleft, - analyze splits - default.  analyze calls, default indicates variable visible multiple variables analyzed level nesting. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. page_by logical(1). pagination forced different children resulting form split. page_prefix character(1). Prefix, appended split value, forcing pagination children split/table section_div character(1). String repeated section divider group defined split instruciton, NA_character_ (default) section divider.","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_rows_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Rows according to levels of a variable — split_rows_by","text":"PreDataTableLayouts object suitable passing layouting functions, build_table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_rows_by.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add Rows according to levels of a variable — split_rows_by","text":"var factor empty unobserved levels labels_var specified, must also factor number levels var. Currently error occurs hte case informative, change future.","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_rows_by.html","id":"custom-splitting-function-details","dir":"Reference","previous_headings":"","what":"Custom Splitting Function Details","title":"Add Rows according to levels of a variable — split_rows_by","text":"User-defined custom split functions can perform type computation incoming data provided meed contract generating 'splits' incoming data 'based ' split object. Split functions functions accept: df data.frame incoming data split spl Split object. largely internal detail custom functions need worry ,  obj_name(spl), example, give name split appear paths resulting table vals pre-calculated values. given non-null values, values returned match . NULL cases can likely ignored labels pre-calculated value labels. values trim TRUE, resulting splits empty removed (Optional) .spl_context data.frame describing previously performed splits collectively arrived df function must output named list following elements: values vector values corresponding splits df datasplit list data.frames representing groupings actual observations df. labels character vector giving string label value listed values element (Optional) extras present, extra arguments passed summary analysis functions whenever executed corresponding element datasplit subset thereof One way generate custom splitting functions wrap existing split functions modify either incoming data called, outputs.","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_rows_by.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add Rows according to levels of a variable — split_rows_by","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/split_rows_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Rows according to levels of a variable — split_rows_by","text":"","code":"l <- basic_table() %>%     split_cols_by(\"ARM\") %>%     split_rows_by(\"RACE\", split_fun = drop_split_levels) %>%     analyze(\"AGE\", mean, var_labels = \"Age\", format = \"xx.xx\")  build_table(l, DM) #>                             A: Drug X   B: Placebo   C: Combination #> ——————————————————————————————————————————————————————————————————— #> ASIAN                                                               #>   mean                        34.20       32.68          34.63      #> BLACK OR AFRICAN AMERICAN                                           #>   mean                        34.68       31.71          34.00      #> WHITE                                                               #>   mean                        39.36       36.93          35.11        basic_table() %>%     split_cols_by(\"ARM\") %>%     split_rows_by(\"RACE\") %>%     analyze(\"AGE\", mean, var_labels = \"Age\", format = \"xx.xx\") %>%     build_table(DM) #>                                             A: Drug X   B: Placebo   C: Combination #> ——————————————————————————————————————————————————————————————————————————————————— #> ASIAN                                                                               #>   mean                                        34.20       32.68          34.63      #> BLACK OR AFRICAN AMERICAN                                                           #>   mean                                        34.68       31.71          34.00      #> WHITE                                                                               #>   mean                                        39.36       36.93          35.11      #> AMERICAN INDIAN OR ALASKA NATIVE                                                    #>   mean                                         NA           NA             NA       #> MULTIPLE                                                                            #>   mean                                         NA           NA             NA       #> NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER                                           #>   mean                                         NA           NA             NA       #> OTHER                                                                               #>   mean                                         NA           NA             NA       #> UNKNOWN                                                                             #>   mean                                         NA           NA             NA         l <- basic_table() %>%     split_cols_by(\"ARM\") %>%     split_cols_by(\"SEX\") %>%     summarize_row_groups(label_fstr = \"Overall (N)\") %>%     split_rows_by(\"RACE\", split_label = \"Ethnicity\", labels_var = \"ethn_lab\",                   split_fun = drop_split_levels) %>%     summarize_row_groups(\"RACE\", label_fstr = \"%s (n)\") %>%     analyze(\"AGE\", var_labels = \"Age\", afun = mean, format = \"xx.xx\")  l #> A Pre-data Table Layout #>  #> Column-Split Structure: #> ARM (lvls) -> SEX (lvls)  #>  #> Row-Split Structure: #> RACE (lvls) -> AGE (** analysis **)  #>   library(dplyr) DM2 <- DM %>%     filter(SEX %in% c(\"M\", \"F\")) %>%     mutate(         SEX = droplevels(SEX),         gender_lab = c(\"F\" = \"Female\", \"M\" = \"Male\",                        \"U\" = \"Unknown\",                        \"UNDIFFERENTIATED\" = \"Undifferentiated\")[SEX],         ethn_lab = c(             \"ASIAN\" = \"Asian\",             \"BLACK OR AFRICAN AMERICAN\" = \"Black or African American\",             \"WHITE\" = \"White\",             \"AMERICAN INDIAN OR ALASKA NATIVE\" = \"American Indian or Alaska Native\",              \"MULTIPLE\" = \"Multiple\",              \"NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER\" =                  \"Native Hawaiian or Other Pacific Islander\",              \"OTHER\" = \"Other\", \"UNKNOWN\" = \"Unknown\"         )[RACE]     )  build_table(l, DM2) #>                                           A: Drug X                  B: Placebo                C: Combination       #>                                        F             M             F             M             F             M      #> ——————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> Overall (N)                       70 (100.0%)   51 (100.0%)   56 (100.0%)   50 (100.0%)   61 (100.0%)   68 (100.0%) #>   Asian (n)                       44 (62.9%)    35 (68.6%)    37 (66.1%)    31 (62.0%)    40 (65.6%)    44 (64.7%)  #>     mean                             33.55         35.03         34.00         31.10         34.90         34.39    #>   Black or African American (n)   18 (25.7%)    10 (19.6%)    12 (21.4%)    12 (24.0%)    13 (21.3%)    14 (20.6%)  #>     mean                             33.17         37.40         30.58         32.83         33.85         34.14    #>   White (n)                        8 (11.4%)     6 (11.8%)     7 (12.5%)     7 (14.0%)     8 (13.1%)    10 (14.7%)  #>     mean                             35.88         44.00         38.57         35.29         36.50         34.00"},{"path":"https://roche.github.io/rtables/main/reference/summarize_row_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a content row of summary counts — summarize_row_groups","title":"Add a content row of summary counts — summarize_row_groups","text":"Add content row summary counts","code":""},{"path":"https://roche.github.io/rtables/main/reference/summarize_row_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a content row of summary counts — summarize_row_groups","text":"","code":"summarize_row_groups(   lyt,   var = \"\",   label_fstr = \"%s\",   format = \"xx (xx.x%)\",   na_str = \"-\",   cfun = NULL,   indent_mod = 0L,   extra_args = list() )"},{"path":"https://roche.github.io/rtables/main/reference/summarize_row_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a content row of summary counts — summarize_row_groups","text":"lyt layout object pre-data used tabulation var string, variable name label_fstr string. sprintf style format string containing. non-comparison splits, can contain  one \"%s\" takes current split value generates row/column label. Comparison-based splits can contain two \"%s\". format FormatSpec. Format associated split. Formats can declared via strings (\"xx.x\") function. cases analyze calls, can character vectors lists functions. na_str character(1). String displayed value x missing. Defaults \"NA\". cfun list/function/NULL. tabulation function(s) creating content rows. Must accept x df first parameter. Must accept labelstr second argument. Can optionally accept optional arguments accepted analysis functions. See analyze. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. extra_args list. Extra arguments passed tabulation function. Element position thte list corresponds children split. Named elements child-specific lists ignored match formal argument ttabulation function.","code":""},{"path":"https://roche.github.io/rtables/main/reference/summarize_row_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a content row of summary counts — summarize_row_groups","text":"PreDataTableLayouts object suitable passing layouting functions, build_table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/summarize_row_groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a content row of summary counts — summarize_row_groups","text":"format expects 1 value (.e. specified format string xx appears  xx apepars  values (.e. xx appears twice format string) specified function, raw percent column total counts calculated. format format string xx appears one time, raw counts used. cfun must accept df first argument receive subset data.frame corresponding row- column-splitting cell calculated. Must accept labelstr second parameter, accepts label level parent split currently summarized. Can additionally take optional argument supported analysis functions. (see analyze).","code":""},{"path":"https://roche.github.io/rtables/main/reference/summarize_row_groups.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add a content row of summary counts — summarize_row_groups","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/summarize_row_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a content row of summary counts — summarize_row_groups","text":"","code":"DM2 <- subset(DM, COUNTRY %in% c(\"USA\", \"CAN\", \"CHN\"))  l <- basic_table() %>% split_cols_by(\"ARM\") %>%     split_rows_by(\"COUNTRY\", split_fun = drop_split_levels) %>%     summarize_row_groups(label_fstr = \"%s (n)\") %>%     analyze(\"AGE\", afun = list_wrap_x(summary) , format = \"xx.xx\") l #> A Pre-data Table Layout #>  #> Column-Split Structure: #> ARM (lvls)  #>  #> Row-Split Structure: #> COUNTRY (lvls) -> AGE (** analysis **)  #>   tbl <- build_table(l, DM2)  tbl #>             A: Drug X    B: Placebo   C: Combination #> ———————————————————————————————————————————————————— #> CHN (n)     62 (79.5%)   48 (75.0%)     69 (78.4%)   #>   Min.        22.00        25.00          24.00      #>   1st Qu.     29.25        30.00          30.00      #>   Median      34.00        33.50          33.00      #>   Mean        36.08        34.12          33.71      #>   3rd Qu.     41.00        38.00          37.00      #>   Max.        60.00        55.00          51.00      #> USA (n)     13 (16.7%)   14 (21.9%)     17 (19.3%)   #>   Min.        23.00        24.00          22.00      #>   1st Qu.     31.00        28.00          31.00      #>   Median      36.00        30.00          37.00      #>   Mean        36.77        32.57          36.41      #>   3rd Qu.     41.00        37.50          41.00      #>   Max.        58.00        47.00          51.00      #> CAN (n)      3 (3.8%)     2 (3.1%)       2 (2.3%)    #>   Min.        29.00        30.00          28.00      #>   1st Qu.     32.50        32.00          28.75      #>   Median      36.00        34.00          29.50      #>   Mean        36.00        34.00          29.50      #>   3rd Qu.     39.50        36.00          30.25      #>   Max.        43.00        38.00          31.00       row_paths_summary(tbl) # summary count is a content table #> rowname      node_class    path                            #> —————————————————————————————————————————————————————————— #> CHN (n)      ContentRow    COUNTRY, CHN, @content, CHN (n) #>   Min.       DataRow       COUNTRY, CHN, AGE, Min.         #>   1st Qu.    DataRow       COUNTRY, CHN, AGE, 1st Qu.      #>   Median     DataRow       COUNTRY, CHN, AGE, Median       #>   Mean       DataRow       COUNTRY, CHN, AGE, Mean         #>   3rd Qu.    DataRow       COUNTRY, CHN, AGE, 3rd Qu.      #>   Max.       DataRow       COUNTRY, CHN, AGE, Max.         #> USA (n)      ContentRow    COUNTRY, USA, @content, USA (n) #>   Min.       DataRow       COUNTRY, USA, AGE, Min.         #>   1st Qu.    DataRow       COUNTRY, USA, AGE, 1st Qu.      #>   Median     DataRow       COUNTRY, USA, AGE, Median       #>   Mean       DataRow       COUNTRY, USA, AGE, Mean         #>   3rd Qu.    DataRow       COUNTRY, USA, AGE, 3rd Qu.      #>   Max.       DataRow       COUNTRY, USA, AGE, Max.         #> CAN (n)      ContentRow    COUNTRY, CAN, @content, CAN (n) #>   Min.       DataRow       COUNTRY, CAN, AGE, Min.         #>   1st Qu.    DataRow       COUNTRY, CAN, AGE, 1st Qu.      #>   Median     DataRow       COUNTRY, CAN, AGE, Median       #>   Mean       DataRow       COUNTRY, CAN, AGE, Mean         #>   3rd Qu.    DataRow       COUNTRY, CAN, AGE, 3rd Qu.      #>   Max.       DataRow       COUNTRY, CAN, AGE, Max.           ## use a cfun and extra_args to customize summarization ## behavior sfun <- function(x, labelstr, trim) {     in_rows(         c(mean(x, trim = trim), trim),         .formats = \"xx.x (xx.x%)\",         .labels = sprintf(\"%s (Trimmed mean and trim %%)\",                               labelstr)     ) }  l2 <- basic_table() %>% split_cols_by(\"ARM\") %>%     split_rows_by(\"COUNTRY\", split_fun = drop_split_levels) %>%     add_colcounts() %>%     summarize_row_groups(\"AGE\", cfun = sfun,                          extra_args = list(trim = .2)) %>%     analyze(\"AGE\", afun = list_wrap_x(summary) , format = \"xx.xx\") %>%     append_topleft(c(\"Country\", \"  Age\"))  tbl2 <- build_table(l2, DM2) tbl2 #> Country                          A: Drug X      B: Placebo    C: Combination #>   Age                              (N=78)         (N=64)          (N=88)     #> ———————————————————————————————————————————————————————————————————————————— #> CHN (Trimmed mean and trim %)   35.1 (20.0%)   33.4 (20.0%)    33.4 (20.0%)  #>   Min.                             22.00          25.00           24.00      #>   1st Qu.                          29.25          30.00           30.00      #>   Median                           34.00          33.50           33.00      #>   Mean                             36.08          34.12           33.71      #>   3rd Qu.                          41.00          38.00           37.00      #>   Max.                             60.00          55.00           51.00      #> USA (Trimmed mean and trim %)   36.1 (20.0%)   31.9 (20.0%)    36.1 (20.0%)  #>   Min.                             23.00          24.00           22.00      #>   1st Qu.                          31.00          28.00           31.00      #>   Median                           36.00          30.00           37.00      #>   Mean                             36.77          32.57           36.41      #>   3rd Qu.                          41.00          37.50           41.00      #>   Max.                             58.00          47.00           51.00      #> CAN (Trimmed mean and trim %)   36.0 (20.0%)   34.0 (20.0%)    29.5 (20.0%)  #>   Min.                             29.00          30.00           28.00      #>   1st Qu.                          32.50          32.00           28.75      #>   Median                           36.00          34.00           29.50      #>   Mean                             36.00          34.00           29.50      #>   3rd Qu.                          39.50          36.00           30.25      #>   Max.                             43.00          38.00           31.00"},{"path":"https://roche.github.io/rtables/main/reference/summarize_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"summarize_rows — summarize_rows","title":"summarize_rows — summarize_rows","text":"summarize_rows deprecated favor make_row_df.","code":""},{"path":"https://roche.github.io/rtables/main/reference/summarize_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summarize_rows — summarize_rows","text":"","code":"summarize_rows(obj)"},{"path":"https://roche.github.io/rtables/main/reference/summarize_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summarize_rows — summarize_rows","text":"obj VTableTree.","code":""},{"path":"https://roche.github.io/rtables/main/reference/summarize_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summarize_rows — summarize_rows","text":"data.frame summarizing rows obj.","code":""},{"path":"https://roche.github.io/rtables/main/reference/tabclasses.html","id":null,"dir":"Reference","previous_headings":"","what":"TableTree classes — ElementaryTable-class","title":"TableTree classes — ElementaryTable-class","text":"TableTree classes Table Constructors Classes","code":""},{"path":"https://roche.github.io/rtables/main/reference/tabclasses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TableTree classes — ElementaryTable-class","text":"","code":"ElementaryTable(   kids = list(),   name = \"\",   lev = 1L,   label = \"\",   labelrow = LabelRow(lev = lev, label = label, vis = !isTRUE(iscontent) && !is.na(label)     && nzchar(label)),   rspans = data.frame(),   cinfo = NULL,   iscontent = NA,   var = NA_character_,   format = NULL,   na_str = NA_character_,   indent_mod = 0L,   title = \"\",   subtitles = character(),   main_footer = character(),   prov_footer = character(),   hsep = default_hsep(),   trailing_sep = NA_character_,   inset = 0L )  TableTree(   kids = list(),   name = if (!is.na(var)) var else \"\",   cont = EmptyElTable,   lev = 1L,   label = name,   labelrow = LabelRow(lev = lev, label = label, vis = nrow(cont) == 0 && !is.na(label) &&     nzchar(label)),   rspans = data.frame(),   iscontent = NA,   var = NA_character_,   cinfo = NULL,   format = NULL,   na_str = NA_character_,   indent_mod = 0L,   title = \"\",   subtitles = character(),   main_footer = character(),   prov_footer = character(),   page_title = NA_character_,   hsep = default_hsep(),   trailing_sep = NA_character_,   inset = 0L )"},{"path":"https://roche.github.io/rtables/main/reference/tabclasses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TableTree classes — ElementaryTable-class","text":"kids list. List direct children. name character(1). Name split/table/row created. Defaults corresponding label, required . lev integer. Nesting level (roughly, indentation level practical terms). label character(1). label (confused name) object/structure. labelrow LabelRow. LabelRow object assign Table. Consructed label default specified. rspans data.frame. Currently stored otherwise ignored. cinfo InstantiatedColumnInfo (NULL). Column structure object created. iscontent logical. TableTree/ElementaryTable constructed content table another TableTree. var string, variable name format FormatSpec. Format associated split. Formats can declared via strings (\"xx.x\") function. cases analyze calls, can character vectors lists functions. na_str character(1). String displayed value x missing. Defaults \"NA\". indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior. title character(1). Main title. Ignored subtables. subtitles character. Subtitles. Ignored subtables. main_footer character. Main global (non-referential) footer materials. prov_footer character. Provenance-related global footer materials. Generally modified hand. hsep character(1). Set character(s) repeated separator header body table rendered text. Defaults connected horrizontal line (unicode 2014) locals use UTF charset, - elsewhere (per session warning). trailing_sep character(1). String used section divider printing last row contained (sub)-table, unless row also last table row printed overall, NA_character_ none (default). generated via layouting, correspond section_div split table represents single facet. inset numeric(1). Number spaces inset table header, table body, referential footnotes, main_footer, compared alignment title, subtitle, provenance footer. Defaults 0 (inset). cont ElementaryTable. Content table. page_title character. Page specific title(s).","code":""},{"path":"https://roche.github.io/rtables/main/reference/tabclasses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TableTree classes — ElementaryTable-class","text":"formal object representing populated table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/tabclasses.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"TableTree classes — ElementaryTable-class","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/table_shell.html","id":null,"dir":"Reference","previous_headings":"","what":"Table shells — table_shell","title":"Table shells — table_shell","text":"table shell rendering table maintains structure, display values, rather displaying formatting instructions cell.","code":""},{"path":"https://roche.github.io/rtables/main/reference/table_shell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table shells — table_shell","text":"","code":"table_shell(   tt,   widths = NULL,   col_gap = 3,   hsep = default_hsep(),   tf_wrap = FALSE,   max_width = NULL )  table_shell_str(   tt,   widths = NULL,   col_gap = 3,   hsep = default_hsep(),   tf_wrap = FALSE,   max_width = NULL )"},{"path":"https://roche.github.io/rtables/main/reference/table_shell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table shells — table_shell","text":"tt TableTree (related class). TableTree object representing populated table. widths widths row.name columns col_gap gap columns hsep character create line separator tf_wrap logical(1).  texts  title, subtitle, footnotes wrapped? max_width integer(1), character(1) NULL. Width title   footer   (including   footnotes)  materials     word-wrapped . NULL,  set current print width  session (`getOption(\"width\")`). set `\"auto\"`, width table (plus table inset) used. Ignored completely `tf_wrap` `FALSE`.","code":""},{"path":"https://roche.github.io/rtables/main/reference/table_shell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table shells — table_shell","text":"table_shell_str string representing table shell, table_shell, NULL, function called side effect printing shell console","code":""},{"path":"https://roche.github.io/rtables/main/reference/table_shell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table shells — table_shell","text":"","code":"library(dplyr)  iris2 <- iris %>%   group_by(Species) %>%   mutate(group = as.factor(rep_len(c(\"a\", \"b\"), length.out = n()))) %>%   ungroup()  l <- basic_table() %>%   split_cols_by(\"Species\") %>%   split_cols_by(\"group\") %>%   analyze(c(\"Sepal.Length\", \"Petal.Width\"), afun = list_wrap_x(summary) , format = \"xx.xx\")  tbl <- build_table(l, iris2) table_shell(tbl) #>                   setosa        versicolor       virginica   #>                  a       b       a       b       a       b   #> ———————————————————————————————————————————————————————————— #> Sepal.Length     -       -       -       -       -       -   #>   Min.         xx.xx   xx.xx   xx.xx   xx.xx   xx.xx   xx.xx #>   1st Qu.      xx.xx   xx.xx   xx.xx   xx.xx   xx.xx   xx.xx #>   Median       xx.xx   xx.xx   xx.xx   xx.xx   xx.xx   xx.xx #>   Mean         xx.xx   xx.xx   xx.xx   xx.xx   xx.xx   xx.xx #>   3rd Qu.      xx.xx   xx.xx   xx.xx   xx.xx   xx.xx   xx.xx #>   Max.         xx.xx   xx.xx   xx.xx   xx.xx   xx.xx   xx.xx #> Petal.Width      -       -       -       -       -       -   #>   Min.         xx.xx   xx.xx   xx.xx   xx.xx   xx.xx   xx.xx #>   1st Qu.      xx.xx   xx.xx   xx.xx   xx.xx   xx.xx   xx.xx #>   Median       xx.xx   xx.xx   xx.xx   xx.xx   xx.xx   xx.xx #>   Mean         xx.xx   xx.xx   xx.xx   xx.xx   xx.xx   xx.xx #>   3rd Qu.      xx.xx   xx.xx   xx.xx   xx.xx   xx.xx   xx.xx #>   Max.         xx.xx   xx.xx   xx.xx   xx.xx   xx.xx   xx.xx"},{"path":"https://roche.github.io/rtables/main/reference/table_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Table — table_structure","title":"Summarize Table — table_structure","text":"Summarize Table","code":""},{"path":"https://roche.github.io/rtables/main/reference/table_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Table — table_structure","text":"","code":"table_structure(x, detail = c(\"subtable\", \"row\"))"},{"path":"https://roche.github.io/rtables/main/reference/table_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Table — table_structure","text":"x table object detail either row subtable","code":""},{"path":"https://roche.github.io/rtables/main/reference/table_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Table — table_structure","text":"currently return value. Called side-effect printing row- subtable-structure summary x.","code":""},{"path":"https://roche.github.io/rtables/main/reference/table_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Table — table_structure","text":"","code":"library(dplyr)  iris2 <- iris %>%   group_by(Species) %>%   mutate(group = as.factor(rep_len(c(\"a\", \"b\"), length.out = n()))) %>%   ungroup()  l <- basic_table() %>%   split_cols_by(\"Species\") %>%   split_cols_by(\"group\") %>%   analyze(c(\"Sepal.Length\", \"Petal.Width\"), afun = list_wrap_x(summary),           format = \"xx.xx\")  tbl <- build_table(l, iris2) tbl #>                  setosa       versicolor      virginica   #>                 a      b       a       b       a      b   #> ————————————————————————————————————————————————————————— #> Sepal.Length                                              #>   Min.         4.40   4.30   5.00    4.90    4.90    5.60 #>   1st Qu.      4.80   4.80   5.60    5.60    6.20    6.30 #>   Median       5.00   5.00   5.90    5.90    6.50    6.50 #>   Mean         5.02   4.99   5.99    5.88    6.50    6.67 #>   3rd Qu.      5.30   5.10   6.40    6.10    6.70    7.20 #>   Max.         5.80   5.70   7.00    6.70    7.70    7.90 #> Petal.Width                                               #>   Min.         0.10   0.10   1.00    1.00    1.40    1.50 #>   1st Qu.      0.20   0.20   1.20    1.20    1.90    1.80 #>   Median       0.20   0.20   1.30    1.30    2.10    2.00 #>   Mean         0.23   0.26   1.35    1.30    2.08    1.98 #>   3rd Qu.      0.20   0.30   1.50    1.40    2.30    2.20 #>   Max.         0.40   0.60   1.80    1.70    2.50    2.50  row_paths(tbl) #> [[1]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Sepal.Length\"                #>  #> [[2]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Sepal.Length\"                #> [3] \"Min.\"                        #>  #> [[3]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Sepal.Length\"                #> [3] \"1st Qu.\"                     #>  #> [[4]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Sepal.Length\"                #> [3] \"Median\"                      #>  #> [[5]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Sepal.Length\"                #> [3] \"Mean\"                        #>  #> [[6]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Sepal.Length\"                #> [3] \"3rd Qu.\"                     #>  #> [[7]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Sepal.Length\"                #> [3] \"Max.\"                        #>  #> [[8]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Petal.Width\"                 #>  #> [[9]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Petal.Width\"                 #> [3] \"Min.\"                        #>  #> [[10]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Petal.Width\"                 #> [3] \"1st Qu.\"                     #>  #> [[11]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Petal.Width\"                 #> [3] \"Median\"                      #>  #> [[12]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Petal.Width\"                 #> [3] \"Mean\"                        #>  #> [[13]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Petal.Width\"                 #> [3] \"3rd Qu.\"                     #>  #> [[14]] #> [1] \"ma_Sepal.Length_Petal.Width\" \"Petal.Width\"                 #> [3] \"Max.\"                        #>   table_structure(tbl) #> [TableTree] ma_Sepal.Length_Petal.Width #>  [ElementaryTable] Sepal.Length (6 x 6) #>  [ElementaryTable] Petal.Width (6 x 6)  table_structure(tbl, detail = \"row\") #> TableTree: [ma_Sepal.Length_Petal.Width] () #>   labelrow: [] () - <not visible> #>   children:  #>     ElementaryTable: [Sepal.Length] (Sepal.Length) #>       labelrow: [Sepal.Length] (Sepal.Length) #>       children:  #>         DataRow: [Min.] (Min.) #>         DataRow: [1st Qu.] (1st Qu.) #>         DataRow: [Median] (Median) #>         DataRow: [Mean] (Mean) #>         DataRow: [3rd Qu.] (3rd Qu.) #>         DataRow: [Max.] (Max.) #>     ElementaryTable: [Petal.Width] (Petal.Width) #>       labelrow: [Petal.Width] (Petal.Width) #>       children:  #>         DataRow: [Min.] (Min.) #>         DataRow: [1st Qu.] (1st Qu.) #>         DataRow: [Median] (Median) #>         DataRow: [Mean] (Mean) #>         DataRow: [3rd Qu.] (3rd Qu.) #>         DataRow: [Max.] (Max.)"},{"path":"https://roche.github.io/rtables/main/reference/top_left.html","id":null,"dir":"Reference","previous_headings":"","what":"Top Left Material (Experimental) — top_left","title":"Top Left Material (Experimental) — top_left","text":"TableTree object can top left material sequence strings printed area table column header display label first row.  functions acccess modify material.","code":""},{"path":"https://roche.github.io/rtables/main/reference/top_left.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Top Left Material (Experimental) — top_left","text":"","code":"top_left(obj)  # S4 method for VTableTree top_left(obj)  # S4 method for InstantiatedColumnInfo top_left(obj)  # S4 method for PreDataTableLayouts top_left(obj)  top_left(obj) <- value  # S4 method for VTableTree top_left(obj) <- value  # S4 method for InstantiatedColumnInfo top_left(obj) <- value  # S4 method for PreDataTableLayouts top_left(obj) <- value"},{"path":"https://roche.github.io/rtables/main/reference/top_left.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Top Left Material (Experimental) — top_left","text":"obj . object accessor access modify value new value","code":""},{"path":"https://roche.github.io/rtables/main/reference/top_left.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Top Left Material (Experimental) — top_left","text":"character vector representing top-left material obj (obj modification, case setter).","code":""},{"path":"https://roche.github.io/rtables/main/reference/tostring.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an rtable object to a string — tostring","title":"Convert an rtable object to a string — tostring","text":"Transform complex object string representation ready printed written plain-text file","code":""},{"path":"https://roche.github.io/rtables/main/reference/tostring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an rtable object to a string — tostring","text":"","code":"# S4 method for VTableTree toString(   x,   widths = NULL,   col_gap = 3,   hsep = horizontal_sep(x),   indent_size = 2,   tf_wrap = FALSE,   max_width = NULL )"},{"path":"https://roche.github.io/rtables/main/reference/tostring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an rtable object to a string — tostring","text":"x table object widths widths row.name columns col_gap gap columns hsep character create line separator indent_size numeric(1). Number spaces use per indent level. Defaults 2 tf_wrap logical(1).  texts  title, subtitle, footnotes wrapped? max_width integer(1), character(1) NULL. Width title   footer   (including   footnotes)  materials     word-wrapped . NULL,  set current print width  session (`getOption(\"width\")`). set `\"auto\"`, width table (plus table inset) used. Ignored completely `tf_wrap` `FALSE`.","code":""},{"path":"https://roche.github.io/rtables/main/reference/tostring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an rtable object to a string — tostring","text":"string representation x appears printed.","code":""},{"path":"https://roche.github.io/rtables/main/reference/tostring.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an rtable object to a string — tostring","text":"Manual insertion newlines supported `tf_wrap` result warning undefined wrapping behavior. Passing vectors already split strings remains supported, however case string word-wrapped separately behavior described .","code":""},{"path":"https://roche.github.io/rtables/main/reference/tostring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an rtable object to a string — tostring","text":"","code":"library(dplyr)  iris2 <- iris %>%   group_by(Species) %>%   mutate(group = as.factor(rep_len(c(\"a\", \"b\"), length.out = n()))) %>%   ungroup()  l <- basic_table() %>%   split_cols_by(\"Species\") %>%   split_cols_by(\"group\") %>%   analyze(c(\"Sepal.Length\", \"Petal.Width\"), afun = list_wrap_x(summary) , format = \"xx.xx\")  tbl <- build_table(l, iris2)  cat(toString(tbl, col_gap = 3)) #>                  setosa       versicolor      virginica   #>                 a      b       a       b       a      b   #> ————————————————————————————————————————————————————————— #> Sepal.Length                                              #>   Min.         4.40   4.30   5.00    4.90    4.90    5.60 #>   1st Qu.      4.80   4.80   5.60    5.60    6.20    6.30 #>   Median       5.00   5.00   5.90    5.90    6.50    6.50 #>   Mean         5.02   4.99   5.99    5.88    6.50    6.67 #>   3rd Qu.      5.30   5.10   6.40    6.10    6.70    7.20 #>   Max.         5.80   5.70   7.00    6.70    7.70    7.90 #> Petal.Width                                               #>   Min.         0.10   0.10   1.00    1.00    1.40    1.50 #>   1st Qu.      0.20   0.20   1.20    1.20    1.90    1.80 #>   Median       0.20   0.20   1.30    1.30    2.10    2.00 #>   Mean         0.23   0.26   1.35    1.30    2.08    1.98 #>   3rd Qu.      0.20   0.30   1.50    1.40    2.30    2.20 #>   Max.         0.40   0.60   1.80    1.70    2.50    2.50"},{"path":"https://roche.github.io/rtables/main/reference/tree_children.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve or set the direct children of a Tree-style object — tree_children","title":"Retrieve or set the direct children of a Tree-style object — tree_children","text":"Retrieve set direct children Tree-style object","code":""},{"path":"https://roche.github.io/rtables/main/reference/tree_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve or set the direct children of a Tree-style object — tree_children","text":"","code":"tree_children(x)  tree_children(x) <- value"},{"path":"https://roche.github.io/rtables/main/reference/tree_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve or set the direct children of a Tree-style object — tree_children","text":"x object Tree structure value New list children.","code":""},{"path":"https://roche.github.io/rtables/main/reference/tree_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve or set the direct children of a Tree-style object — tree_children","text":"List direct children x","code":""},{"path":"https://roche.github.io/rtables/main/reference/trim_levels_to_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim Levels to map — trim_levels_to_map","title":"Trim Levels to map — trim_levels_to_map","text":"split function constructor creatse split function trims levels variable reflect restrictions possible combinations two variables split (along axis) within layout.","code":""},{"path":"https://roche.github.io/rtables/main/reference/trim_levels_to_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim Levels to map — trim_levels_to_map","text":"","code":"trim_levels_to_map(map = NULL)"},{"path":"https://roche.github.io/rtables/main/reference/trim_levels_to_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim Levels to map — trim_levels_to_map","text":"map data.frame. data.frame defining allowed combinations variables. combination level split present map removed data, variable split present data associated split parents .","code":""},{"path":"https://roche.github.io/rtables/main/reference/trim_levels_to_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim Levels to map — trim_levels_to_map","text":"fun","code":""},{"path":"https://roche.github.io/rtables/main/reference/trim_levels_to_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trim Levels to map — trim_levels_to_map","text":"splitting occurs, map subset values previously performed splits. levels variable split pruned still present within subset map representing current hierarchical splitting context. Splitting performed via keep_split_levels split function. resulting element partition trimmed pruning values remaining variables specified map values allowed combination previous current split.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/trim_levels_to_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim Levels to map — trim_levels_to_map","text":"","code":"map <- data.frame(        LBCAT = c(\"CHEMISTRY\", \"CHEMISTRY\", \"CHEMISTRY\", \"IMMUNOLOGY\"),        PARAMCD = c(\"ALT\", \"CRP\", \"CRP\", \"IGA\"),        ANRIND = c(\"LOW\", \"LOW\", \"HIGH\", \"HIGH\"),        stringsAsFactors = FALSE    )     lyt <- basic_table() %>%        split_rows_by(\"LBCAT\") %>%        split_rows_by(\"PARAMCD\", split_fun = trim_levels_to_map(map = map)) %>%        analyze(\"ANRIND\")    tbl1 <- build_table(lyt, ex_adlb)"},{"path":"https://roche.github.io/rtables/main/reference/trim_prune_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Trimming and Pruning Criteria — all_zero_or_na","title":"Trimming and Pruning Criteria — all_zero_or_na","text":"Criteria functions (constructors thereof) trimming pruning tables.","code":""},{"path":"https://roche.github.io/rtables/main/reference/trim_prune_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trimming and Pruning Criteria — all_zero_or_na","text":"","code":"all_zero_or_na(tr)  all_zero(tr)  content_all_zeros_nas(tt, criteria = all_zero_or_na)  prune_empty_level(tt)  prune_zeros_only(tt)  low_obs_pruner(min, type = c(\"sum\", \"mean\"))"},{"path":"https://roche.github.io/rtables/main/reference/trim_prune_funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trimming and Pruning Criteria — all_zero_or_na","text":"tr TableRow (related class). TableRow object representing single row within populated table. tt TableTree (related class). TableTree object representing populated table. criteria function. Function takes TableRow object returns TRUE row removed. Defaults all_zero_or_na min numeric(1). (lob_obs_pruner ). Miminum aggregate count value. Subtables whose combined/average count threshhold pruned type character(1). count values aggregated. Must \"sum\" (default) \"mean\"","code":""},{"path":"https://roche.github.io/rtables/main/reference/trim_prune_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trimming and Pruning Criteria — all_zero_or_na","text":"logical value indicating whether tr included (TRUE) pruned (FALSE) pruning.","code":""},{"path":"https://roche.github.io/rtables/main/reference/trim_prune_funs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trimming and Pruning Criteria — all_zero_or_na","text":"all_zero_or_na returns TRUE (thus indicates trimming/pruning) non-LabelRow TableRow contain mix NA (including NaN), 0, Inf -Inf values. all_zero returns TRUE non-Label row contains (non-missing) zero values. content_all_zeros_nas Prunes subtable ) content table exactly one row , b) all_zero_or_na returns TRUE single content row. practice, default summary/content function used, represents pruning subtable corresponds empty set input data (e.g., factor variable used split_rows_by levels present data). prune_empty_level combines all_zero_or_na behavior TableRow objects, content_all_zeros_nas content_table(tt) TableTree objects, addition check returns TRUE tt children. prune_zeros_only behaves prune_empty_levels , except like all_zero prunes case non-missing zero values. lob_obs_pruner constructor function , called, returns pruning criteria function prune content rows comparing sum mean (dictated type)count count portions cell values (defined first value per cell regardless many values per cell ) min.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/trim_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim rows from a populated table without regard for table structure — trim_rows","title":"Trim rows from a populated table without regard for table structure — trim_rows","text":"Trim rows populated table without regard table structure","code":""},{"path":"https://roche.github.io/rtables/main/reference/trim_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim rows from a populated table without regard for table structure — trim_rows","text":"","code":"trim_rows(tt, criteria = all_zero_or_na)"},{"path":"https://roche.github.io/rtables/main/reference/trim_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim rows from a populated table without regard for table structure — trim_rows","text":"tt TableTree (related class). TableTree object representing populated table. criteria function. Function takes TableRow object returns TRUE row removed. Defaults all_zero_or_na","code":""},{"path":"https://roche.github.io/rtables/main/reference/trim_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim rows from a populated table without regard for table structure — trim_rows","text":"table rows NA 0 cell values removed","code":""},{"path":"https://roche.github.io/rtables/main/reference/trim_rows.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Trim rows from a populated table without regard for table structure — trim_rows","text":"Visible LabelRows including trimming, can lead either label rows trimmed label rows remaining data rows trimmed, depending criteria returns called LabelRow object. avoid , use structurally-aware prune_table machinery instead.","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/reference/trim_zero_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim Zero Rows — trim_zero_rows","title":"Trim Zero Rows — trim_zero_rows","text":"Trim Zero Rows","code":""},{"path":"https://roche.github.io/rtables/main/reference/trim_zero_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim Zero Rows — trim_zero_rows","text":"","code":"trim_zero_rows(tbl)"},{"path":"https://roche.github.io/rtables/main/reference/trim_zero_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim Zero Rows — trim_zero_rows","text":"tbl table object","code":""},{"path":"https://roche.github.io/rtables/main/reference/trim_zero_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim Zero Rows — trim_zero_rows","text":"rtable object","code":""},{"path":"https://roche.github.io/rtables/main/reference/tsv_io.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Enriched flat value table with paths — export_as_tsv","title":"Create Enriched flat value table with paths — export_as_tsv","text":"function creates flat tabular file cell values corresponding paths via path_enriched_df. writes data.frame tsv file.","code":""},{"path":"https://roche.github.io/rtables/main/reference/tsv_io.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Enriched flat value table with paths — export_as_tsv","text":"","code":"export_as_tsv(   tt,   file = NULL,   path_fun = collapse_path,   value_fun = collapse_values )  import_from_tsv(file)"},{"path":"https://roche.github.io/rtables/main/reference/tsv_io.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Enriched flat value table with paths — export_as_tsv","text":"tt TableTree (related class). TableTree object representing populated table. file character(1). path file written read . path_fun function. Function transform paths single-string row/column names. value_fun function. Functiont transform cell values cells data.frame. Defaults collapse_values creates strings multi-valued cells collapsed together, separated |.","code":""},{"path":"https://roche.github.io/rtables/main/reference/tsv_io.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Enriched flat value table with paths — export_as_tsv","text":"NULL silently export_as_tsv, data.frame re-constituted list values export_as_tsv.","code":""},{"path":"https://roche.github.io/rtables/main/reference/tsv_io.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Enriched flat value table with paths — export_as_tsv","text":"default (ie value_func specified, List columns least one value length > 1 collapsed character vectors collapsing list element \"|\".","code":""},{"path":"https://roche.github.io/rtables/main/reference/tsv_io.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create Enriched flat value table with paths — export_as_tsv","text":"currently round-trip capability type export. can read values exported way back via import_from_tsv receive data.frame version back, TableTree.","code":""},{"path":"https://roche.github.io/rtables/main/reference/tt_to_flextable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a FlexTable object representing an rtables TableTree — tt_to_flextable","title":"Create a FlexTable object representing an rtables TableTree — tt_to_flextable","text":"Create FlexTable object representing rtables TableTree","code":""},{"path":"https://roche.github.io/rtables/main/reference/tt_to_flextable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a FlexTable object representing an rtables TableTree — tt_to_flextable","text":"","code":"tt_to_flextable(   tt,   paginate = FALSE,   lpp = NULL,   cpp = NULL,   ...,   colwidths = propose_column_widths(matrix_form(tt, indent_rownames = TRUE)),   tf_wrap = !is.null(cpp),   max_width = cpp,   total_width = 10 )"},{"path":"https://roche.github.io/rtables/main/reference/tt_to_flextable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a FlexTable object representing an rtables TableTree — tt_to_flextable","text":"tt TableTree (related class). TableTree object representing populated table. paginate logical(1). tt paginated exported multiple flextables. Defaults FALSE lpp numeric. Maximum lines per page including (re)printed header context rows cpp numeric(1) NULL. Width (characters) pages horizontal pagination. NULL (default) indicates horizontal pagination done. ... Passed methods tabulation functions. colwidths numeric vector. Column widths use vertical pagination. tf_wrap logical(1).  texts  title, subtitle, footnotes wrapped? max_width integer(1), character(1) NULL. Width title   footer   (including   footnotes)  materials     word-wrapped . NULL,  set current print width  session (`getOption(\"width\")`). set `\"auto\"`, width table (plus table inset) used. Ignored completely `tf_wrap` `FALSE`. total_width numeric(1). Total width inches resulting flextable(s). Defaults 5.","code":""},{"path":"https://roche.github.io/rtables/main/reference/tt_to_flextable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a FlexTable object representing an rtables TableTree — tt_to_flextable","text":"flextable object","code":""},{"path":"https://roche.github.io/rtables/main/reference/tt_to_flextable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a FlexTable object representing an rtables TableTree — tt_to_flextable","text":"","code":"analysisfun <- function(x, ...) {     in_rows(row1 = 5,             row2 = c(1, 2),             .row_footnotes = list(row1 = \"row 1 - row footnote\"),             .cell_footnotes = list(row2 = \"row 2 - cell footnote\")) }  lyt <- basic_table(title = \"Title says Whaaaat\", subtitles = \"Oh, ok.\",                main_footer = \"ha HA! Footer!\") %>% split_cols_by(\"ARM\") %>% analyze(\"AGE\", afun = analysisfun)  tbl <-  build_table(lyt, ex_adsl) ft <- tt_to_flextable(tbl) #> Loading required namespace: flextable ft #> a flextable object. #> col_keys: `V1`, `V2`, `V3`, `V4`  #> header has 3 row(s)  #> body has 2 row(s)  #> original dataset sample:  #>         V1       V2       V3       V4 #> 1 row1 {1}        5        5        5 #> 2     row2 1, 2 {2} 1, 2 {3} 1, 2 {4}"},{"path":"https://roche.github.io/rtables/main/reference/ttap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set table elements at specified path — tt_at_path","title":"Get or set table elements at specified path — tt_at_path","text":"Get set table elements specified path","code":""},{"path":"https://roche.github.io/rtables/main/reference/ttap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set table elements at specified path — tt_at_path","text":"","code":"tt_at_path(tt, path, ...)  tt_at_path(tt, path, ...) <- value"},{"path":"https://roche.github.io/rtables/main/reference/ttap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set table elements at specified path — tt_at_path","text":"tt TableTree (related class). TableTree object representing populated table. path character. vector path position within structure tabletree. element represents subsequent choice amongst children previous choice. ... unused. value new value","code":""},{"path":"https://roche.github.io/rtables/main/reference/update_ref_indexing.html","id":null,"dir":"Reference","previous_headings":"","what":"Update footnote indexes on a built table — update_ref_indexing","title":"Update footnote indexes on a built table — update_ref_indexing","text":"Re-indexes footnotes within built table","code":""},{"path":"https://roche.github.io/rtables/main/reference/update_ref_indexing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update footnote indexes on a built table — update_ref_indexing","text":"","code":"update_ref_indexing(tt)"},{"path":"https://roche.github.io/rtables/main/reference/update_ref_indexing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update footnote indexes on a built table — update_ref_indexing","text":"tt TableTree (related class). TableTree object representing populated table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/update_ref_indexing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update footnote indexes on a built table — update_ref_indexing","text":"adding removing  referential footnotes manually,  subsetting  table,  reference  indexes (ie  number associated  specific  footnotes) may  incorrect. function recalculates based full table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/update_ref_indexing.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Update footnote indexes on a built table — update_ref_indexing","text":"future generally need called manually.","code":""},{"path":"https://roche.github.io/rtables/main/reference/value_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Value Formats — value_formats","title":"Value Formats — value_formats","text":"Returns matrix formats cells table","code":""},{"path":"https://roche.github.io/rtables/main/reference/value_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value Formats — value_formats","text":"","code":"value_formats(obj, default = obj_format(obj))  # S4 method for ANY value_formats(obj, default = obj_format(obj))  # S4 method for TableRow value_formats(obj, default = obj_format(obj))  # S4 method for LabelRow value_formats(obj, default = obj_format(obj))  # S4 method for VTableTree value_formats(obj, default = obj_format(obj))"},{"path":"https://roche.github.io/rtables/main/reference/value_formats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value Formats — value_formats","text":"obj table row object. default FormatSpec.","code":""},{"path":"https://roche.github.io/rtables/main/reference/value_formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value Formats — value_formats","text":"Matrix (storage mode list) containing effective format cell position table (including 'virtual' cells implied label rows, whose formats always NULL)","code":""},{"path":"https://roche.github.io/rtables/main/reference/value_formats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value Formats — value_formats","text":"","code":"lyt <- basic_table() %>% split_rows_by(\"RACE\", split_fun = keep_split_levels(c(\"ASIAN\", \"WHITE\"))) %>% analyze(\"AGE\")  tbl <- build_table(lyt, DM) value_formats(tbl) #>       all obs #> ASIAN NULL    #> Mean  \"xx.xx\" #> WHITE NULL    #> Mean  \"xx.xx\""},{"path":"https://roche.github.io/rtables/main/reference/varcuts.html","id":null,"dir":"Reference","previous_headings":"","what":"Split on static or dynamic cuts of the data — split_cols_by_cuts","title":"Split on static or dynamic cuts of the data — split_cols_by_cuts","text":"Create columns (row splits) based values (quartiles) var.","code":""},{"path":"https://roche.github.io/rtables/main/reference/varcuts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split on static or dynamic cuts of the data — split_cols_by_cuts","text":"","code":"split_cols_by_cuts(   lyt,   var,   cuts,   cutlabels = NULL,   split_label = var,   nested = TRUE,   cumulative = FALSE )  split_rows_by_cuts(   lyt,   var,   cuts,   cutlabels = NULL,   split_label = var,   format = NULL,   na_str = NA_character_,   nested = TRUE,   cumulative = FALSE,   label_pos = \"hidden\",   section_div = NA_character_ )  split_cols_by_cutfun(   lyt,   var,   cutfun = qtile_cuts,   cutlabelfun = function(x) NULL,   split_label = var,   nested = TRUE,   extra_args = list(),   cumulative = FALSE )  split_cols_by_quartiles(   lyt,   var,   split_label = var,   nested = TRUE,   extra_args = list(),   cumulative = FALSE )  split_rows_by_quartiles(   lyt,   var,   split_label = var,   format = NULL,   na_str = NA_character_,   nested = TRUE,   child_labels = c(\"default\", \"visible\", \"hidden\"),   extra_args = list(),   cumulative = FALSE,   indent_mod = 0L,   label_pos = \"hidden\",   section_div = NA_character_ )  split_rows_by_cutfun(   lyt,   var,   cutfun = qtile_cuts,   cutlabelfun = function(x) NULL,   split_label = var,   format = NULL,   na_str = NA_character_,   nested = TRUE,   child_labels = c(\"default\", \"visible\", \"hidden\"),   extra_args = list(),   cumulative = FALSE,   indent_mod = 0L,   label_pos = \"hidden\",   section_div = NA_character_ )"},{"path":"https://roche.github.io/rtables/main/reference/varcuts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split on static or dynamic cuts of the data — split_cols_by_cuts","text":"lyt layout object pre-data used tabulation var string, variable name cuts numeric. Cuts use cutlabels character (NULL). Labels cutst split_label string. Label string associated table generated split. confused labels assigned child (based data type split tabulation). nested boolean. layout instruction applied within existing layout structure possible (TRUE, default) new top-level element (`FALSE). Ignored nest split underneath analyses, allowed. cumulative logical. cuts treated cumulative. Defaults FALSE format FormatSpec. Format associated split. Formats can declared via strings (\"xx.x\") function. cases analyze calls, can character vectors lists functions. na_str character(1). String displayed value x missing. Defaults \"NA\". label_pos character(1). Location variable label displayed, Accepts  hidden (default non-analyze row splits), visible, topleft, - analyze splits - default.  analyze calls, default indicates variable visible multiple variables analyzed level nesting. section_div character(1). String repeated section divider group defined split instruciton, NA_character_ (default) section divider. cutfun function. Function accepts full vector var values returns cut points passed cut. cutlabelfun function. Function returns either labels cuts NULL passed return value cutfun extra_args list. Extra arguments passed tabulation function. Element position thte list corresponds children split. Named elements child-specific lists ignored match formal argument ttabulation function. child_labels string. One \"default\", \"visible\", \"hidden\". display behavior  labels (ie label rows) children split. Defaults \"default\" flags label row visible child 0 content rows. indent_mod numeric. Modifier default indent position structure created function(subtable, content table, row) structure's children. Defaults 0, corresponds unmodified default behavior.","code":""},{"path":"https://roche.github.io/rtables/main/reference/varcuts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split on static or dynamic cuts of the data — split_cols_by_cuts","text":"PreDataTableLayouts object suitable passing layouting functions, build_table.","code":""},{"path":"https://roche.github.io/rtables/main/reference/varcuts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split on static or dynamic cuts of the data — split_cols_by_cuts","text":"dynamic cuts, cut transformed static cut build_table based full dataset, proceeding. Thus even nested within another split column/row space, resulting split reflect overall vaalues (e.g., quartiles) dataset, values subset  nested .","code":""},{"path":"https://roche.github.io/rtables/main/reference/varcuts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split on static or dynamic cuts of the data — split_cols_by_cuts","text":"Gabriel Becker","code":""},{"path":"https://roche.github.io/rtables/main/reference/varcuts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split on static or dynamic cuts of the data — split_cols_by_cuts","text":"","code":"library(dplyr)  # split_cols_by_cuts l <- basic_table() %>%     split_cols_by(\"ARM\") %>%     split_cols_by_cuts(\"AGE\", split_label = \"Age\",                        cuts = c(0, 25, 35, 1000),                        cutlabels = c(\"young\", \"medium\", \"old\")) %>%     analyze(c(\"BMRKR2\", \"STRATA2\")) %>%     append_topleft(\"counts\")  build_table(l, ex_adsl) #> counts          A: Drug X              B: Placebo           C: Combination    #>            young   medium   old   young   medium   old   young   medium   old #> ————————————————————————————————————————————————————————————————————————————— #> BMRKR2                                                                        #>   LOW        4       30     16      4       17     24      5       19     16  #>   MEDIUM     6       12     19      2       28     26      4       25     13  #>   HIGH       4       24     19      2       17     14      1       21     28  #> STRATA2                                                                       #>   S1         8       33     32      2       27     38      5       25     26  #>   S2         6       33     22      6       35     26      5       40     31    # split_rows_by_cuts l <- basic_table() %>%     split_cols_by(\"ARM\") %>%     split_rows_by_cuts(\"AGE\", split_label = \"Age\",                   cuts = c(0, 25, 35, 1000),                   cutlabels = c(\"young\", \"medium\", \"old\")) %>%     analyze(c(\"BMRKR2\", \"STRATA2\")) %>%     append_topleft(\"counts\")   build_table(l, ex_adsl) #> counts       A: Drug X   B: Placebo   C: Combination #> ———————————————————————————————————————————————————— #> young                                                #>   BMRKR2                                             #>     LOW          4           4              5        #>     MEDIUM       6           2              4        #>     HIGH         4           2              1        #>   STRATA2                                            #>     S1           8           2              5        #>     S2           6           6              5        #> medium                                               #>   BMRKR2                                             #>     LOW         30           17             19       #>     MEDIUM      12           28             25       #>     HIGH        24           17             21       #>   STRATA2                                            #>     S1          33           27             25       #>     S2          33           35             40       #> old                                                  #>   BMRKR2                                             #>     LOW         16           24             16       #>     MEDIUM      19           26             13       #>     HIGH        19           14             28       #>   STRATA2                                            #>     S1          32           38             26       #>     S2          22           26             31         # split_cols_by_quartiles  l <- basic_table() %>%     split_cols_by(\"ARM\") %>%     split_cols_by_quartiles(\"AGE\", split_label = \"Age\") %>%     analyze(c(\"BMRKR2\", \"STRATA2\")) %>%     append_topleft(\"counts\")  build_table(l, ex_adsl) #> counts                      A: Drug X                                    B: Placebo                                  C: Combination                #>            [min, Q1]   (Q1, Q2]   (Q2, Q3]   (Q3, max]   [min, Q1]   (Q1, Q2]   (Q2, Q3]   (Q3, max]   [min, Q1]   (Q1, Q2]   (Q2, Q3]   (Q3, max] #> —————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————— #> BMRKR2                                                                                                                                             #>   LOW         18          16         7           9          12          8          10         15           8          11         13          8     #>   MEDIUM      11          7          9          10          14          15         14         13          12          13         7          10     #>   HIGH        14          11         14          8           6          10         9           8           7          12         13         18     #> STRATA2                                                                                                                                            #>   S1          22          18         18         15          15          11         22         19          11          14         12         19     #>   S2          21          16         12         12          17          22         11         17          16          22         21         17      # split_rows_by_quartiles l <- basic_table() %>%     split_cols_by(\"ARM\") %>%     add_colcounts() %>%     split_rows_by_quartiles(\"AGE\", split_label = \"Age\") %>%     analyze(\"BMRKR2\") %>%     append_topleft(c(\"Age Quartiles\", \" Counts BMRKR2\"))  build_table(l, ex_adsl) #> Age Quartiles    A: Drug X   B: Placebo   C: Combination #>  Counts BMRKR2    (N=134)     (N=134)        (N=132)     #> ———————————————————————————————————————————————————————— #> Age                                                      #>   [min, Q1]                                              #>     LOW             18           12             8        #>     MEDIUM          11           14             12       #>     HIGH            14           6              7        #>   (Q1, Q2]                                               #>     LOW             16           8              11       #>     MEDIUM           7           15             13       #>     HIGH            11           10             12       #>   (Q2, Q3]                                               #>     LOW              7           10             13       #>     MEDIUM           9           14             7        #>     HIGH            14           9              13       #>   (Q3, max]                                              #>     LOW              9           15             8        #>     MEDIUM          10           13             10       #>     HIGH             8           8              18"},{"path":"https://roche.github.io/rtables/main/reference/vil.html","id":null,"dir":"Reference","previous_headings":"","what":"List Variables required by a pre-data table layout — vars_in_layout","title":"List Variables required by a pre-data table layout — vars_in_layout","text":"List Variables required pre-data table layout","code":""},{"path":"https://roche.github.io/rtables/main/reference/vil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Variables required by a pre-data table layout — vars_in_layout","text":"","code":"vars_in_layout(lyt)  # S4 method for PreDataTableLayouts vars_in_layout(lyt)  # S4 method for PreDataAxisLayout vars_in_layout(lyt)  # S4 method for SplitVector vars_in_layout(lyt)  # S4 method for Split vars_in_layout(lyt)  # S4 method for CompoundSplit vars_in_layout(lyt)  # S4 method for ManualSplit vars_in_layout(lyt)"},{"path":"https://roche.github.io/rtables/main/reference/vil.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Variables required by a pre-data table layout — vars_in_layout","text":"lyt Layout (component thereof)","code":""},{"path":"https://roche.github.io/rtables/main/reference/vil.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Variables required by a pre-data table layout — vars_in_layout","text":"character vector containing unique variables explicitly used layout (see Notes).","code":""},{"path":"https://roche.github.io/rtables/main/reference/vil.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List Variables required by a pre-data table layout — vars_in_layout","text":"walk  layout declaration return vector  names unique  variables used  following ways: Variable split (directly via cuts) Element Multi-variable column split Content variable Value-label variable","code":""},{"path":"https://roche.github.io/rtables/main/reference/vil.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"List Variables required by a pre-data table layout — vars_in_layout","text":"function detect dependencies implicit analysis summary functions accept df rely existence particular variables split / analyzed. order variable names appear within return vector undefined relied upon.","code":""},{"path":"https://roche.github.io/rtables/main/reference/vil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Variables required by a pre-data table layout — vars_in_layout","text":"","code":"lyt <- basic_table() %>%     split_cols_by(\"ARM\") %>%     split_cols_by(\"SEX\") %>%     summarize_row_groups(label_fstr = \"Overall (N)\") %>%     split_rows_by(\"RACE\", split_label = \"Ethnicity\", labels_var = \"ethn_lab\",                   split_fun = drop_split_levels) %>%     summarize_row_groups(\"RACE\", label_fstr = \"%s (n)\") %>%     analyze(\"AGE\", var_labels = \"Age\", afun = mean, format = \"xx.xx\")  vars_in_layout(lyt) #> [1] \"ARM\"      \"SEX\"      \"RACE\"     \"ethn_lab\" \"AGE\""},{"path":"https://roche.github.io/rtables/main/reference/vpaginate_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated - vertically paginate table — vpaginate_table","title":"Deprecated - vertically paginate table — vpaginate_table","text":"function deprecated used. function deprecated. please use paginate_table non-null cpp argument instead.","code":""},{"path":"https://roche.github.io/rtables/main/reference/vpaginate_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated - vertically paginate table — vpaginate_table","text":"","code":"vpaginate_table(tt, cpp = 40, verbose = FALSE)"},{"path":"https://roche.github.io/rtables/main/reference/vpaginate_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated - vertically paginate table — vpaginate_table","text":"tt TableTree (related class). TableTree object representing populated table. cpp numeric(1) NULL. Width (characters) pages horizontal pagination. NULL (default) indicates horizontal pagination done. verbose logical(1). extra debugging messages shown. Defaults FALSE.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-0532","dir":"Changelog","previous_headings":"","what":"rtables 0.5.3.2","title":"rtables 0.5.3.2","text":"paginate_table now accepts colwidths paginates assuming column label cell values wrapped widths. make_row_df now accepts colwidths calculates row extents assuing cell values wrapped widths nlines TableRow method now uses provided colwidths assume cell-value wrapping export_to_txt now automatically paginates form page dimension provided (previously default unconditionally paginating). depend formatters >=0.3.4.5 cell-value wrapping","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-053","dir":"Changelog","previous_headings":"","what":"rtables 0.5.3","title":"rtables 0.5.3","text":"[<- now treats character j values paths, [ always . [<- CellValue method now preserves CellValue attributes (e.g., format) detailed subsetting modification vignette nlines methods now accept colwidths max_width max_width now used pagination determine lines taken referential footnotes make_col_df now accepts colwidths argument, can called directly InstantiatedColumnInfo objects versioned dependency formatters increase >0.3.3.12 wordwrapping title/footer materials longer fails presence \"\" values. versioned dependency formatters increase >0.3.3.11 paginate_table now accepts tf_wrap max_width respects title/footer word wrapping present export functions now accepts tf_wrap max_width use pagination (turned ) toString used (pdf, txt exporters). versioned dependency formatters increased >0.3.3.10 export_as_pdf now accepts standard page/font size parameters original paramters (width, height, fontsize soft deprecated (warning) fully deprecated removed future. toString method VTableTree now accepts tf_wrap max_width export_as_txt export_as_pdf now accept cpp, well tf_wrap max_width default tf_wrap max_width = cpp cpp non-NULL. basic_table now accepts inset argument declaring table inset Table Layout object classes now table_inset slot, accessor functions. matrix_form method VTableTree sets table_inset value Increase versioned dependency formatters >0.3.3.5 table_inset support Use exact=TRUE calls attr within access functions Increase versioned dependency formatters >0.3.3.4 layouting instructions now accept na_str argument, specifies na string inheritance rules formats (pre-data) Split (post tabulation) Table/row S4 classes now carry around na_str information Increase versioned dependency formatters >= 0.3.3.3 support na_strs NA_character_ values paginate_table now takes page dimension font information uses formatters::page_lcpp calculate lpp cpp automatically provided. Increase versioned dependency formatters >= 0.3.3.2 page_lcpp","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-052","dir":"Changelog","previous_headings":"","what":"rtables 0.5.2","title":"rtables 0.5.2","text":"paginate_table now accepts cpp perform vertical pagination non-null vpaginate_table now deprecated Increased versioned dependency formatters >=0.3.2.4","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-0515","dir":"Changelog","previous_headings":"","what":"rtables 0.5.1.5","title":"rtables 0.5.1.5","text":"Support section dividers (section_div argument split_rows_by* function) Updated versioned dependency formatters >=0.3.2.3 Equivalent split functions different enclosing environments (e.g., 2 identical calls add_combo_levels #340) longer block rbinding Fixed various documentation bugs description section added header.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-0514","dir":"Changelog","previous_headings":"","what":"rtables 0.5.1.4","title":"rtables 0.5.1.4","text":"empty level check splitting variables reinstated.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-0513","dir":"Changelog","previous_headings":"","what":"rtables 0.5.1.3","title":"rtables 0.5.1.3","text":"Throw informative error messages custom analysis, content split functions fail (#329)","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-0512","dir":"Changelog","previous_headings":"","what":"rtables 0.5.1.2","title":"rtables 0.5.1.2","text":"empty level check splitting variables temporarily removed. likely reinstated future release.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-0511","dir":"Changelog","previous_headings":"","what":"rtables 0.5.1.1","title":"rtables 0.5.1.1","text":"col_counts getter setter now accept path argument. empty levels splitting variable now result informative error message (character factor cases). fixed bug handling column extra arguments preventing cbinding tables working correctly (#324)","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-051","dir":"Changelog","previous_headings":"","what":"rtables 0.5.1","title":"rtables 0.5.1","text":"CRAN release: 2022-05-21 empty factor levels now dropped column splits ref_group set (#323) linesep argument toString related functions renamed hsep Increase versioned dependency formatters >=0.3.0 Default “line separator” header body now falls back “-” non-UTF charset locales. New hsep argument build_table sets horizontal separator constructed table (subtables thereof) New horizontal_sep horizontal_sep<- accessors constructed tables, latter mandatorily recursive. split_rows_by(var, child_labels=\"hidden\") longer removes structural subtable corresponding levels var (#314)","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-050","dir":"Changelog","previous_headings":"","what":"rtables 0.5.0","title":"rtables 0.5.0","text":"CRAN release: 2022-04-01 formatable dependency renamed formatters suitability release CRAN Update versioned dependency formatters (previously formatable) >=0.2.0","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-0410004","dir":"Changelog","previous_headings":"","what":"rtables 0.4.1.0004","title":"rtables 0.4.1.0004","text":"Fix bug function format combined NULL cfun caused error (#307) Fix bug path_enriched_df (powers tsv export), related (#308)","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-0410002","dir":"Changelog","previous_headings":"","what":"rtables 0.4.1.0002","title":"rtables 0.4.1.0002","text":"added table_shell display shell table formats","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-0410001","dir":"Changelog","previous_headings":"","what":"rtables 0.4.1.0001","title":"rtables 0.4.1.0001","text":"added linesep argument toString specify character create line separator. Previously used en dash line separator character, now changed default em dash reducing gap dash line elements.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-040","dir":"Changelog","previous_headings":"","what":"rtables 0.4.0","title":"rtables 0.4.0","text":"CRAN release: 2021-10-06 Initializing layouts NULL now deprecated insert_rrow deprecated favor new insert_row_at_path label_at_path<- functions split analysis/content functions can now depend values splits nested inside accepting using new .spl_context optional argument new trim_levels_to_map split function dictating exact combinations values appear across splits value_formats function now exported returns/displays effective formats cells table compare_rtables now much faster tables many cells compare_rtables now accepts structure argument adds comparison structure (way row- column-path positions) new tt_to_flextable coercion function new export_as_pdf exporter function value_at cell_values functions now methods TableRow objects making usable sorting/pruning functions","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-0389001","dir":"Changelog","previous_headings":"","what":"rtables 0.3.8.9001","title":"rtables 0.3.8.9001","text":"new trim_levels_to_map split function based wwojtek’s work #203 support column referential footnotes support adding footnotes existing table via fnotes_at_path<- function trim_levels_in_group now trims empty levels outer (split) variable default value_at cell_values now work tablerow objects Fixed as_html bug multvar split columns case Fixed pagination --one error","code":""},{"path":[]},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-038","dir":"Changelog","previous_headings":"","what":"rtables 0.3.8","title":"rtables 0.3.8","text":"CRAN release: 2021-07-13 Add experimental support newlines column names, row labels, cell values (supported top-left annotations) as_html refactored support newlines respecting table structure self_extent column df returned make_row_df now reflects extent lines, thus return larger values row-label cell values contain newlines. Fix bug tables output using as_html (viewed Viewer) missing table class attribute (#194) inserting DataRow incorrect number columns now error (#199) Referential footer machinery now works colspan case. Fix extraneous footnote attribute bug (#198) Fix max -Inf warning content rows appear positions whose children 0 visible rows (#200) Resync NEWS.md file Introduce titles footnotes Support automatic population top-left Introduce referential footnote support cells row labels Added vars_in_layout list (explicitly named ) variables used layout Fix column label ordering bug value label variable factor (#173)","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-037","dir":"Changelog","previous_headings":"","what":"rtables 0.3.7","title":"rtables 0.3.7","text":"Synchronize release GitHub commit sha.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-036","dir":"Changelog","previous_headings":"","what":"rtables 0.3.6","title":"rtables 0.3.6","text":"CRAN release: 2021-01-22 Documentation revisions requested CRAN. change package code.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-035","dir":"Changelog","previous_headings":"","what":"rtables 0.3.5","title":"rtables 0.3.5","text":"Documentation-text changes introduction vignette pass CRAN’s URL checks. package, example, test, vignette code fully identical tagged github release 0.3.4","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-034","dir":"Changelog","previous_headings":"","what":"rtables 0.3.4","title":"rtables 0.3.4","text":"Minor changes 0.3.3 version order submit rtables CRAN.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-033","dir":"Changelog","previous_headings":"","what":"rtables 0.3.3","title":"rtables 0.3.3","text":"version completely refactors rtables package. provide backwards compatibility layer rtable, rcell, rrow, rheader, rtabulate family functions. However table data structure main tabulation framework changed. provide extensive documentation manuals help(package = \"rtables\") vignettes vignette(package = \"rtables\") package. changes rtables undertaken better meet requirements creating analyzing & reporting tables context clinical trials.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179046","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9046","title":"rtables 0.3.2.17.9046","text":"make_afun now force()s customization arguments immediately, prevents problems called within loop/lapply constructs.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179045","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9045","title":"rtables 0.3.2.17.9045","text":"Tabulation machinery longer removes NAs mandatorily cases, including mutlivar column splits analyze_colvars’s inclNAs argument now respected.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179044","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9044","title":"rtables 0.3.2.17.9044","text":"Fix indent modifier propogation tabulation Fix indent calculation make_pagdf Add significant testing ensure make_pagdf indent calculation remains correct","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179043","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9043","title":"rtables 0.3.2.17.9043","text":"Rework reference columns handled analyses use .in_ref_col .ref_group work correctly custom splitting used (including provided combination-levels mechanism)","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179042","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9042","title":"rtables 0.3.2.17.9042","text":"Fix naming/pathing columns multivar case (split now default name “multivars”) Fix labelling bug variable appears multiple times MultiVarSplit different associated levels","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179041","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9041","title":"rtables 0.3.2.17.9041","text":"Allow single variable used within split_cols_by_multivar Various removal defunct","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179040","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9040","title":"rtables 0.3.2.17.9040","text":"Fix regression caused 0.3.2.17.9039 column split values displayed name rather label.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179039","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9039","title":"rtables 0.3.2.17.9039","text":"Fix bug display column information column structure symetric, recursive cbinds.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179036","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9036","title":"rtables 0.3.2.17.9036","text":"Fixed bug row subsetting table content rows. Basic compare_rtables function now works previous versions, awareness row column structure.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179036-1","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9036","title":"rtables 0.3.2.17.9036","text":"summarize_row_groups can now accept list functions cfun argument analyze_colvars .","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179035","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9035","title":"rtables 0.3.2.17.9035","text":"Fix bug unearthed change 0.3.2.17.9034 cell formats retained column subsetting","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179034","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9034","title":"rtables 0.3.2.17.9034","text":"Fix internal value_formats accessor operates CellValues rather raw contained values (thus always returning NULL) rrow constructor longer interpretes cell formats row format across cells. Fixes bug “correct way” code discussed #112","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179033","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9033","title":"rtables 0.3.2.17.9033","text":"Interpret .formats in_rows cell formats rather row formats.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179031","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9031","title":"rtables 0.3.2.17.9031","text":"cbind_rtables can now take 2 tables.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179029","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9029","title":"rtables 0.3.2.17.9029","text":"Fix issue underlying spurious length-missmatch warning cases using analyze_colvars","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179028","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9028","title":"rtables 0.3.2.17.9028","text":"analyze_colvars now takes adheres inclNAs argument","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-032179027","dir":"Changelog","previous_headings":"","what":"rtables 0.3.2.17.9027","title":"rtables 0.3.2.17.9027","text":"issues news:","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-017","dir":"Changelog","previous_headings":"","what":"rtables 0.1.7","title":"rtables 0.1.7","text":"added format xx.xx (xx.xx - xx.xx) x.xxxx | (<0.0001)","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-016","dir":"Changelog","previous_headings":"","what":"rtables 0.1.6","title":"rtables 0.1.6","text":"Minor changes.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-015","dir":"Changelog","previous_headings":"","what":"rtables 0.1.5","title":"rtables 0.1.5","text":"Changed testing approach fit internal pipelines.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-014","dir":"Changelog","previous_headings":"","what":"rtables 0.1.4","title":"rtables 0.1.4","text":"Replaced dots underscore class checking functions.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-013","dir":"Changelog","previous_headings":"","what":"rtables 0.1.3","title":"rtables 0.1.3","text":"col_by_to_matrix, col_by_to_factor, by_factor_to_matrix. by_add_total, by_all, by_combine, by_quartile, by_compare_subset, by_hierarchical, by_drop_empty_cols. label, var_labels<-, var_labels, var_labels_remove, var_relabel, with_label. cbing_rtables. empty_rtables, is_empty_rtable, is_non_empty_rtable, is_rtable. header_indent, header_indent<-, header_row.names, header_row.names<-. insert_rrow.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-012","dir":"Changelog","previous_headings":"","what":"rtables 0.1.2","title":"rtables 0.1.2","text":"rbind.rtable now supports binding rtables rows, e.g. rbind(tbl1, rrow(), tbl2) rbind(tbl1, rrow(\"row name\"), tbl2). rbindl_rtables supports NULL objects list (except first element). Add indent function. header_add_N deals gracefully NULL objects.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-011","dir":"Changelog","previous_headings":"","what":"rtables 0.1.1","title":"rtables 0.1.1","text":"rtablulate family functions support row_*_data_args arguments anymore. Instead, col_wise_args argument introduced. Functions order_rrows, sort_rrows, order_rtables, sort_rtables introduced. Prevent rtables unlisted unlist.rtables.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-0106","dir":"Changelog","previous_headings":"","what":"rtables 0.1.0.6","title":"rtables 0.1.0.6","text":"Viewer now also accepts objects class shiny.tag (defined package htmltools). .html accepts class.table, class.tr, class.th, class.td argument.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-0105","dir":"Changelog","previous_headings":"","what":"rtables 0.1.0.5","title":"rtables 0.1.0.5","text":"Added sprintf_format formatting rcells (thanks Doug Kelkhoff suggestion). Added \"(N=xx)\" \">999.9\" format labels. rtabulate now argument col_N function col_N().","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-010","dir":"Changelog","previous_headings":"","what":"rtables 0.1.0","title":"rtables 0.1.0","text":"Redesign: rtable now header argument instead col.names. header can created rheader collection rrows. header set c(\"\", \"B\") rtable create rheader single rrow setting row.name NULL. header header<- function added. Renamed get_rcell_formats list_rcell_format_labels. rcell format NULL cell content converted string paste(.character(x), collapse = ', '). Accessor [,] works now subset table. rbind method rtables. row.names<-.rtable method. rtabulate added creating tables. indented_row.names function added.","code":""},{"path":"https://roche.github.io/rtables/main/news/index.html","id":"rtables-001","dir":"Changelog","previous_headings":"","what":"rtables 0.0.1","title":"rtables 0.0.1","text":"Initial public release","code":""}]
