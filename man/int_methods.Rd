% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colby_constructors.R, R/summary.R,
%   R/tree_accessors.R, R/tt_compatibility.R, R/tt_pos_and_access.R,
%   R/tt_showmethods.R
\name{internal_methods}
\alias{internal_methods}
\alias{c,SplitVector-method}
\alias{split_rows}
\alias{split_rows,NULL-method}
\alias{split_rows,PreDataRowLayout-method}
\alias{split_rows,SplitVector-method}
\alias{split_rows,PreDataTableLayouts-method}
\alias{split_rows,ANY-method}
\alias{cmpnd_last_rowsplit}
\alias{cmpnd_last_rowsplit,NULL-method}
\alias{cmpnd_last_rowsplit,PreDataRowLayout-method}
\alias{cmpnd_last_rowsplit,SplitVector-method}
\alias{cmpnd_last_rowsplit,PreDataTableLayouts-method}
\alias{cmpnd_last_rowsplit,ANY-method}
\alias{split_cols}
\alias{split_cols,NULL-method}
\alias{split_cols,PreDataColLayout-method}
\alias{split_cols,SplitVector-method}
\alias{split_cols,PreDataTableLayouts-method}
\alias{split_cols,ANY-method}
\alias{.add_row_summary}
\alias{.add_row_summary,PreDataTableLayouts-method}
\alias{.add_row_summary,PreDataRowLayout-method}
\alias{.add_row_summary,SplitVector-method}
\alias{.add_row_summary,Split-method}
\alias{fix_dyncuts}
\alias{fix_dyncuts,Split-method}
\alias{fix_dyncuts,VarDynCutSplit-method}
\alias{fix_dyncuts,VTableTree-method}
\alias{fix_dyncuts,PreDataRowLayout-method}
\alias{fix_dyncuts,PreDataColLayout-method}
\alias{fix_dyncuts,SplitVector-method}
\alias{fix_dyncuts,PreDataTableLayouts-method}
\alias{summarize_rows_inner}
\alias{summarize_rows_inner,TableTree-method}
\alias{summarize_rows_inner,ElementaryTable-method}
\alias{summarize_rows_inner,TableRow-method}
\alias{summarize_rows_inner,LabelRow-method}
\alias{table_structure_inner}
\alias{str,VTableTree-method}
\alias{table_structure_inner,TableTree-method}
\alias{table_structure_inner,ElementaryTable-method}
\alias{table_structure_inner,TableRow-method}
\alias{table_structure_inner,LabelRow-method}
\alias{nrow,TableRow-method}
\alias{ncol,TableRow-method}
\alias{ncol,LabelRow-method}
\alias{ncol,InstantiatedColumnInfo-method}
\alias{tree_children,VTree-method}
\alias{tree_children,VTableTree-method}
\alias{tree_children,ANY-method}
\alias{tree_children<-,VTree-method}
\alias{tree_children<-,VTableTree-method}
\alias{content_table,TableTree-method}
\alias{content_table,ANY-method}
\alias{content_table<-,TableTree,ElementaryTable-method}
\alias{next_rpos}
\alias{next_rpos,PreDataTableLayouts-method}
\alias{next_rpos,PreDataRowLayout-method}
\alias{next_rpos,ANY-method}
\alias{next_cpos}
\alias{next_cpos,PreDataTableLayouts-method}
\alias{next_cpos,PreDataColLayout-method}
\alias{next_cpos,ANY-method}
\alias{last_rowsplit}
\alias{last_rowsplit,NULL-method}
\alias{last_rowsplit,SplitVector-method}
\alias{last_rowsplit,PreDataRowLayout-method}
\alias{last_rowsplit,PreDataTableLayouts-method}
\alias{rlayout}
\alias{rlayout,PreDataTableLayouts-method}
\alias{rlayout,ANY-method}
\alias{rlayout<-}
\alias{rlayout<-,PreDataTableLayouts-method}
\alias{tree_pos}
\alias{tree_pos,VLayoutNode-method}
\alias{pos_subset}
\alias{pos_subset,TreePos-method}
\alias{pos_subset,VLayoutNode-method}
\alias{pos_splits}
\alias{pos_splits,TreePos-method}
\alias{pos_splits,VLayoutNode-method}
\alias{pos_splvals}
\alias{pos_splvals,TreePos-method}
\alias{pos_splvals,VLayoutNode-method}
\alias{pos_splval_labels}
\alias{pos_splval_labels,TreePos-method}
\alias{spl_payload}
\alias{spl_payload,Split-method}
\alias{spl_payload<-}
\alias{spl_payload<-,Split-method}
\alias{spl_label_var}
\alias{spl_label_var,VarLevelSplit-method}
\alias{spl_label_var,Split-method}
\alias{tt_labelrow}
\alias{tt_labelrow,VTableTree-method}
\alias{tt_labelrow<-}
\alias{tt_labelrow<-,VTableTree,LabelRow-method}
\alias{labelrow_visible}
\alias{labelrow_visible,VTableTree-method}
\alias{labelrow_visible,LabelRow-method}
\alias{labelrow_visible,VAnalyzeSplit-method}
\alias{labelrow_visible<-}
\alias{labelrow_visible<-,VTableTree-method}
\alias{labelrow_visible<-,LabelRow-method}
\alias{labelrow_visible<-,VAnalyzeSplit-method}
\alias{label_kids}
\alias{label_kids,Split-method}
\alias{label_kids<-}
\alias{label_kids<-,Split,character-method}
\alias{label_kids<-,Split,logical-method}
\alias{vis_label}
\alias{vis_label,Split-method}
\alias{label_position}
\alias{label_position,Split-method}
\alias{label_position,VAnalyzeSplit-method}
\alias{label_position<-}
\alias{label_position<-,Split-method}
\alias{content_fun}
\alias{content_fun,Split-method}
\alias{content_fun<-}
\alias{content_fun<-,Split-method}
\alias{analysis_fun}
\alias{analysis_fun,AnalyzeVarSplit-method}
\alias{analysis_fun,AnalyzeColVarSplit-method}
\alias{split_fun}
\alias{split_fun,CustomizableSplit-method}
\alias{split_fun,Split-method}
\alias{split_fun<-}
\alias{split_fun<-,CustomizableSplit-method}
\alias{split_fun<-,Split-method}
\alias{content_extra_args}
\alias{content_extra_args,Split-method}
\alias{content_extra_args<-}
\alias{content_extra_args<-,Split-method}
\alias{content_var}
\alias{content_var,Split-method}
\alias{content_var<-}
\alias{content_var<-,Split-method}
\alias{avar_inclNAs}
\alias{avar_inclNAs,VAnalyzeSplit-method}
\alias{avar_inclNAs<-}
\alias{avar_inclNAs<-,VAnalyzeSplit-method}
\alias{spl_labelvar}
\alias{spl_labelvar,VarLevelSplit-method}
\alias{spl_child_order}
\alias{spl_child_order,VarLevelSplit-method}
\alias{spl_child_order<-}
\alias{spl_child_order<-,VarLevelSplit-method}
\alias{spl_child_order,ManualSplit-method}
\alias{spl_child_order,MultiVarSplit-method}
\alias{spl_child_order,AllSplit-method}
\alias{spl_child_order,VarStaticCutSplit-method}
\alias{root_spl}
\alias{root_spl,PreDataAxisLayout-method}
\alias{root_spl<-}
\alias{root_spl<-,PreDataAxisLayout-method}
\alias{spanned_values}
\alias{spanned_values,TableRow-method}
\alias{spanned_values,LabelRow-method}
\alias{spanned_cells}
\alias{spanned_cells,TableRow-method}
\alias{spanned_cells,LabelRow-method}
\alias{spanned_values<-}
\alias{spanned_values<-,TableRow-method}
\alias{spanned_values<-,LabelRow-method}
\alias{obj_na_str<-,CellValue-method}
\alias{obj_na_str<-,VTableNodeInfo-method}
\alias{obj_na_str<-,Split-method}
\alias{obj_na_str,VTableNodeInfo-method}
\alias{set_format_recursive}
\alias{set_format_recursive,TableRow-method}
\alias{set_format_recursive,LabelRow-method}
\alias{content_format}
\alias{content_format,Split-method}
\alias{content_format<-}
\alias{content_format<-,Split-method}
\alias{content_na_str}
\alias{content_na_str,Split-method}
\alias{content_na_str<-}
\alias{content_na_str<-,Split-method}
\alias{collect_leaves,TableTree-method}
\alias{collect_leaves,ElementaryTable-method}
\alias{collect_leaves,VTree-method}
\alias{collect_leaves,VLeaf-method}
\alias{collect_leaves,NULL-method}
\alias{collect_leaves,ANY-method}
\alias{row_cspans}
\alias{row_cspans,TableRow-method}
\alias{row_cspans,LabelRow-method}
\alias{row_cspans<-}
\alias{row_cspans<-,TableRow-method}
\alias{row_cspans<-,LabelRow-method}
\alias{cell_cspan}
\alias{cell_cspan,CellValue-method}
\alias{cell_cspan<-}
\alias{cell_cspan<-,CellValue-method}
\alias{cell_align}
\alias{cell_align,CellValue-method}
\alias{cell_align<-}
\alias{cell_align<-,CellValue-method}
\alias{tt_level}
\alias{tt_level,VNodeInfo-method}
\alias{tt_level<-}
\alias{tt_level<-,VNodeInfo-method}
\alias{tt_level<-,VTableTree-method}
\alias{indent_mod}
\alias{indent_mod,Split-method}
\alias{indent_mod,VTableNodeInfo-method}
\alias{indent_mod,ANY-method}
\alias{indent_mod,RowsVerticalSection-method}
\alias{indent_mod<-}
\alias{indent_mod<-,Split-method}
\alias{indent_mod<-,VTableNodeInfo-method}
\alias{indent_mod<-,CellValue-method}
\alias{indent_mod<-,RowsVerticalSection-method}
\alias{content_indent_mod}
\alias{content_indent_mod,Split-method}
\alias{content_indent_mod,VTableNodeInfo-method}
\alias{content_indent_mod<-}
\alias{content_indent_mod<-,Split-method}
\alias{content_indent_mod<-,VTableNodeInfo-method}
\alias{rawvalues}
\alias{rawvalues,ValueWrapper-method}
\alias{rawvalues,LevelComboSplitValue-method}
\alias{rawvalues,list-method}
\alias{rawvalues,ANY-method}
\alias{rawvalues,CellValue-method}
\alias{rawvalues,TreePos-method}
\alias{rawvalues,RowsVerticalSection-method}
\alias{value_names}
\alias{value_names,ANY-method}
\alias{value_names,TreePos-method}
\alias{value_names,list-method}
\alias{value_names,ValueWrapper-method}
\alias{value_names,LevelComboSplitValue-method}
\alias{value_names,RowsVerticalSection-method}
\alias{value_labels}
\alias{value_labels,ANY-method}
\alias{value_labels,TreePos-method}
\alias{value_labels,list-method}
\alias{value_labels,RowsVerticalSection-method}
\alias{value_labels,ValueWrapper-method}
\alias{value_labels,LevelComboSplitValue-method}
\alias{value_labels,MultiVarSplit-method}
\alias{spl_varlabels}
\alias{spl_varlabels,MultiVarSplit-method}
\alias{spl_varlabels<-}
\alias{spl_varlabels<-,MultiVarSplit-method}
\alias{splv_extra}
\alias{splv_extra,SplitValue-method}
\alias{splv_extra<-}
\alias{splv_extra<-,SplitValue-method}
\alias{split_exargs}
\alias{split_exargs,Split-method}
\alias{split_exargs<-}
\alias{split_exargs<-,Split-method}
\alias{col_extra_args}
\alias{col_extra_args,InstantiatedColumnInfo-method}
\alias{col_extra_args,PreDataTableLayouts-method}
\alias{col_extra_args,PreDataColLayout-method}
\alias{col_extra_args,LayoutColTree-method}
\alias{col_extra_args,LayoutColLeaf-method}
\alias{disp_ccounts}
\alias{disp_ccounts,VTableTree-method}
\alias{disp_ccounts,InstantiatedColumnInfo-method}
\alias{disp_ccounts,PreDataTableLayouts-method}
\alias{disp_ccounts,PreDataColLayout-method}
\alias{disp_ccounts<-}
\alias{disp_ccounts<-,VTableTree-method}
\alias{disp_ccounts<-,InstantiatedColumnInfo-method}
\alias{disp_ccounts<-,PreDataColLayout-method}
\alias{disp_ccounts<-,LayoutColTree-method}
\alias{disp_ccounts<-,PreDataTableLayouts-method}
\alias{colcount_format}
\alias{colcount_format,InstantiatedColumnInfo-method}
\alias{colcount_format,VTableNodeInfo-method}
\alias{colcount_format,PreDataColLayout-method}
\alias{colcount_format,PreDataTableLayouts-method}
\alias{colcount_format<-}
\alias{colcount_format<-,InstantiatedColumnInfo-method}
\alias{colcount_format<-,VTableNodeInfo-method}
\alias{colcount_format<-,PreDataColLayout-method}
\alias{colcount_format<-,PreDataTableLayouts-method}
\alias{as.vector,TableRow-method}
\alias{as.vector,ElementaryTable-method}
\alias{spl_cuts}
\alias{spl_cuts,VarStaticCutSplit-method}
\alias{spl_cutlabels}
\alias{spl_cutlabels,VarStaticCutSplit-method}
\alias{spl_cutfun}
\alias{spl_cutfun,VarDynCutSplit-method}
\alias{spl_cutlabelfun}
\alias{spl_cutlabelfun,VarDynCutSplit-method}
\alias{spl_is_cmlcuts}
\alias{spl_is_cmlcuts,VarDynCutSplit-method}
\alias{spl_varnames}
\alias{spl_varnames,MultiVarSplit-method}
\alias{spl_varnames<-}
\alias{spl_varnames<-,MultiVarSplit-method}
\alias{row_footnotes,TableRow-method}
\alias{row_footnotes,RowsVerticalSection-method}
\alias{row_footnotes<-,TableRow-method}
\alias{row_footnotes,VTableTree-method}
\alias{cell_footnotes,CellValue-method}
\alias{cell_footnotes,TableRow-method}
\alias{cell_footnotes,LabelRow-method}
\alias{cell_footnotes,VTableTree-method}
\alias{cell_footnotes<-,CellValue-method}
\alias{cell_footnotes<-,DataRow-method}
\alias{cell_footnotes<-,ContentRow-method}
\alias{col_fnotes_here,LayoutColTree-method}
\alias{col_fnotes_here,LayoutColLeaf-method}
\alias{col_fnotes_here<-,LayoutColTree-method}
\alias{col_fnotes_here<-,LayoutColLeaf-method}
\alias{ref_index,RefFootnote-method}
\alias{ref_index<-,RefFootnote-method}
\alias{ref_msg,RefFootnote-method}
\alias{fnotes_at_path<-,VTableTree,character-method}
\alias{fnotes_at_path<-,VTableTree,NULL-method}
\alias{rbind2,VTableNodeInfo,missing-method}
\alias{tt_at_path,VTableTree-method}
\alias{tt_at_path<-,VTableTree,ANY,VTableTree-method}
\alias{tt_at_path<-,VTableTree,ANY,NULL-method}
\alias{tt_at_path<-,VTableTree,ANY,TableRow-method}
\alias{print,VTableTree-method}
\alias{show,VTableTree-method}
\title{combine SplitVector objects}
\usage{
\S4method{c}{SplitVector}(x, ...)

split_rows(lyt = NULL, spl, pos, cmpnd_fun = AnalyzeMultiVars)

\S4method{split_rows}{`NULL`}(lyt = NULL, spl, pos, cmpnd_fun = AnalyzeMultiVars)

\S4method{split_rows}{PreDataRowLayout}(lyt = NULL, spl, pos, cmpnd_fun = AnalyzeMultiVars)

\S4method{split_rows}{SplitVector}(lyt = NULL, spl, pos, cmpnd_fun = AnalyzeMultiVars)

\S4method{split_rows}{PreDataTableLayouts}(lyt, spl, pos)

\S4method{split_rows}{ANY}(lyt, spl, pos)

cmpnd_last_rowsplit(lyt, spl, constructor)

\S4method{cmpnd_last_rowsplit}{`NULL`}(lyt, spl, constructor)

\S4method{cmpnd_last_rowsplit}{PreDataRowLayout}(lyt, spl, constructor)

\S4method{cmpnd_last_rowsplit}{SplitVector}(lyt, spl, constructor)

\S4method{cmpnd_last_rowsplit}{PreDataTableLayouts}(lyt, spl, constructor)

\S4method{cmpnd_last_rowsplit}{ANY}(lyt, spl, constructor)

split_cols(lyt = NULL, spl, pos)

\S4method{split_cols}{`NULL`}(lyt = NULL, spl, pos)

\S4method{split_cols}{PreDataColLayout}(lyt = NULL, spl, pos)

\S4method{split_cols}{SplitVector}(lyt = NULL, spl, pos)

\S4method{split_cols}{PreDataTableLayouts}(lyt = NULL, spl, pos)

\S4method{split_cols}{ANY}(lyt = NULL, spl, pos)

.add_row_summary(
  lyt,
  label,
  cfun,
  child_labels = c("default", "visible", "hidden"),
  cformat = NULL,
  cna_str = "-",
  indent_mod = 0L,
  cvar = "",
  extra_args = list()
)

\S4method{.add_row_summary}{PreDataTableLayouts}(
  lyt,
  label,
  cfun,
  child_labels = c("default", "visible", "hidden"),
  cformat = NULL,
  cna_str = "-",
  indent_mod = 0L,
  cvar = "",
  extra_args = list()
)

\S4method{.add_row_summary}{PreDataRowLayout}(
  lyt,
  label,
  cfun,
  child_labels = c("default", "visible", "hidden"),
  cformat = NULL,
  cna_str = "-",
  indent_mod = 0L,
  cvar = "",
  extra_args = list()
)

\S4method{.add_row_summary}{SplitVector}(
  lyt,
  label,
  cfun,
  child_labels = c("default", "visible", "hidden"),
  cformat = NULL,
  cna_str = "-",
  indent_mod = 0L,
  cvar = "",
  extra_args = list()
)

\S4method{.add_row_summary}{Split}(
  lyt,
  label,
  cfun,
  child_labels = c("default", "visible", "hidden"),
  cformat = NULL,
  cna_str = "-",
  indent_mod = 0L,
  cvar = "",
  extra_args = list()
)

fix_dyncuts(spl, df)

\S4method{fix_dyncuts}{Split}(spl, df)

\S4method{fix_dyncuts}{VarDynCutSplit}(spl, df)

\S4method{fix_dyncuts}{VTableTree}(spl, df)

\S4method{fix_dyncuts}{PreDataRowLayout}(spl, df)

\S4method{fix_dyncuts}{PreDataColLayout}(spl, df)

\S4method{fix_dyncuts}{SplitVector}(spl, df)

\S4method{fix_dyncuts}{PreDataTableLayouts}(spl, df)

summarize_rows_inner(obj, depth = 0, indent = 0)

\S4method{summarize_rows_inner}{TableTree}(obj, depth = 0, indent = 0)

\S4method{summarize_rows_inner}{ElementaryTable}(obj, depth = 0, indent = 0)

\S4method{summarize_rows_inner}{TableRow}(obj, depth = 0, indent = 0)

\S4method{summarize_rows_inner}{LabelRow}(obj, depth = 0, indent = 0)

table_structure_inner(obj, depth = 0, indent = 0, print_indent = 0)

\S4method{str}{VTableTree}(object, ...)

\S4method{table_structure_inner}{TableTree}(obj, depth = 0, indent = 0, print_indent = 0)

\S4method{table_structure_inner}{ElementaryTable}(obj, depth = 0, indent = 0, print_indent = 0)

\S4method{table_structure_inner}{TableRow}(obj, depth = 0, indent = 0, print_indent = 0)

\S4method{table_structure_inner}{LabelRow}(obj, depth = 0, indent = 0, print_indent = 0)

\S4method{nrow}{TableRow}(x)

\S4method{ncol}{TableRow}(x)

\S4method{ncol}{LabelRow}(x)

\S4method{ncol}{InstantiatedColumnInfo}(x)

\S4method{tree_children}{VTree}(x)

\S4method{tree_children}{VTableTree}(x)

\S4method{tree_children}{ANY}(x)

\S4method{tree_children}{VTree}(x) <- value

\S4method{tree_children}{VTableTree}(x) <- value

\S4method{content_table}{TableTree}(obj)

\S4method{content_table}{ANY}(obj)

\S4method{content_table}{TableTree,ElementaryTable}(obj) <- value

next_rpos(obj, nested = TRUE, for_analyze = FALSE)

\S4method{next_rpos}{PreDataTableLayouts}(obj, nested = TRUE, for_analyze = FALSE)

\S4method{next_rpos}{PreDataRowLayout}(obj, nested = TRUE, for_analyze = FALSE)

\S4method{next_rpos}{ANY}(obj, nested)

next_cpos(obj, nested = TRUE)

\S4method{next_cpos}{PreDataTableLayouts}(obj, nested = TRUE)

\S4method{next_cpos}{PreDataColLayout}(obj, nested = TRUE)

\S4method{next_cpos}{ANY}(obj, nested = TRUE)

last_rowsplit(obj)

\S4method{last_rowsplit}{`NULL`}(obj)

\S4method{last_rowsplit}{SplitVector}(obj)

\S4method{last_rowsplit}{PreDataRowLayout}(obj)

\S4method{last_rowsplit}{PreDataTableLayouts}(obj)

rlayout(obj)

\S4method{rlayout}{PreDataTableLayouts}(obj)

\S4method{rlayout}{ANY}(obj)

rlayout(object) <- value

\S4method{rlayout}{PreDataTableLayouts}(object) <- value

tree_pos(obj)

\S4method{tree_pos}{VLayoutNode}(obj)

pos_subset(obj)

\S4method{pos_subset}{TreePos}(obj)

\S4method{pos_subset}{VLayoutNode}(obj)

pos_splits(obj)

\S4method{pos_splits}{TreePos}(obj)

\S4method{pos_splits}{VLayoutNode}(obj)

pos_splvals(obj)

\S4method{pos_splvals}{TreePos}(obj)

\S4method{pos_splvals}{VLayoutNode}(obj)

pos_splval_labels(obj)

\S4method{pos_splval_labels}{TreePos}(obj)

spl_payload(obj)

\S4method{spl_payload}{Split}(obj)

spl_payload(obj) <- value

\S4method{spl_payload}{Split}(obj) <- value

spl_label_var(obj)

\S4method{spl_label_var}{VarLevelSplit}(obj)

\S4method{spl_label_var}{Split}(obj)

tt_labelrow(obj)

\S4method{tt_labelrow}{VTableTree}(obj)

tt_labelrow(obj) <- value

\S4method{tt_labelrow}{VTableTree,LabelRow}(obj) <- value

labelrow_visible(obj)

\S4method{labelrow_visible}{VTableTree}(obj)

\S4method{labelrow_visible}{LabelRow}(obj)

\S4method{labelrow_visible}{VAnalyzeSplit}(obj)

labelrow_visible(obj) <- value

\S4method{labelrow_visible}{VTableTree}(obj) <- value

\S4method{labelrow_visible}{LabelRow}(obj) <- value

\S4method{labelrow_visible}{VAnalyzeSplit}(obj) <- value

label_kids(spl)

\S4method{label_kids}{Split}(spl)

label_kids(spl) <- value

\S4method{label_kids}{Split,character}(spl) <- value

\S4method{label_kids}{Split,logical}(spl) <- value

vis_label(spl)

\S4method{vis_label}{Split}(spl)

label_position(spl)

\S4method{label_position}{Split}(spl)

\S4method{label_position}{VAnalyzeSplit}(spl)

label_position(spl) <- value

\S4method{label_position}{Split}(spl) <- value

content_fun(obj)

\S4method{content_fun}{Split}(obj)

content_fun(object) <- value

\S4method{content_fun}{Split}(object) <- value

analysis_fun(obj)

\S4method{analysis_fun}{AnalyzeVarSplit}(obj)

\S4method{analysis_fun}{AnalyzeColVarSplit}(obj)

split_fun(obj)

\S4method{split_fun}{CustomizableSplit}(obj)

\S4method{split_fun}{Split}(obj)

split_fun(obj) <- value

\S4method{split_fun}{CustomizableSplit}(obj) <- value

\S4method{split_fun}{Split}(obj) <- value

content_extra_args(obj)

\S4method{content_extra_args}{Split}(obj)

content_extra_args(object) <- value

\S4method{content_extra_args}{Split}(object) <- value

content_var(obj)

\S4method{content_var}{Split}(obj)

content_var(object) <- value

\S4method{content_var}{Split}(object) <- value

avar_inclNAs(obj)

\S4method{avar_inclNAs}{VAnalyzeSplit}(obj)

avar_inclNAs(obj) <- value

\S4method{avar_inclNAs}{VAnalyzeSplit}(obj) <- value

spl_labelvar(obj)

\S4method{spl_labelvar}{VarLevelSplit}(obj)

spl_child_order(obj)

\S4method{spl_child_order}{VarLevelSplit}(obj)

spl_child_order(obj) <- value

\S4method{spl_child_order}{VarLevelSplit}(obj) <- value

\S4method{spl_child_order}{ManualSplit}(obj)

\S4method{spl_child_order}{MultiVarSplit}(obj)

\S4method{spl_child_order}{AllSplit}(obj)

\S4method{spl_child_order}{VarStaticCutSplit}(obj)

root_spl(obj)

\S4method{root_spl}{PreDataAxisLayout}(obj)

root_spl(obj) <- value

\S4method{root_spl}{PreDataAxisLayout}(obj) <- value

spanned_values(obj)

\S4method{spanned_values}{TableRow}(obj)

\S4method{spanned_values}{LabelRow}(obj)

spanned_cells(obj)

\S4method{spanned_cells}{TableRow}(obj)

\S4method{spanned_cells}{LabelRow}(obj)

spanned_values(obj) <- value

\S4method{spanned_values}{TableRow}(obj) <- value

\S4method{spanned_values}{LabelRow}(obj) <- value

\S4method{obj_na_str}{CellValue}(obj) <- value

\S4method{obj_na_str}{VTableNodeInfo}(obj) <- value

\S4method{obj_na_str}{Split}(obj) <- value

\S4method{obj_na_str}{VTableNodeInfo}(obj)

set_format_recursive(obj, format, na_str, override = FALSE)

\S4method{set_format_recursive}{TableRow}(obj, format, na_str, override = FALSE)

\S4method{set_format_recursive}{LabelRow}(obj, format, override = FALSE)

content_format(obj)

\S4method{content_format}{Split}(obj)

content_format(obj) <- value

\S4method{content_format}{Split}(obj) <- value

content_na_str(obj)

\S4method{content_na_str}{Split}(obj)

content_na_str(obj) <- value

\S4method{content_na_str}{Split}(obj) <- value

\S4method{collect_leaves}{TableTree}(tt, incl.cont = TRUE, add.labrows = FALSE)

\S4method{collect_leaves}{ElementaryTable}(tt, incl.cont = TRUE, add.labrows = FALSE)

\S4method{collect_leaves}{VTree}(tt, incl.cont = TRUE, add.labrows = FALSE)

\S4method{collect_leaves}{VLeaf}(tt, incl.cont = TRUE, add.labrows = FALSE)

\S4method{collect_leaves}{`NULL`}(tt, incl.cont = TRUE, add.labrows = FALSE)

\S4method{collect_leaves}{ANY}(tt, incl.cont = TRUE, add.labrows = FALSE)

row_cspans(obj)

\S4method{row_cspans}{TableRow}(obj)

\S4method{row_cspans}{LabelRow}(obj)

row_cspans(obj) <- value

\S4method{row_cspans}{TableRow}(obj) <- value

\S4method{row_cspans}{LabelRow}(obj) <- value

cell_cspan(obj)

\S4method{cell_cspan}{CellValue}(obj)

cell_cspan(obj) <- value

\S4method{cell_cspan}{CellValue}(obj) <- value

cell_align(obj)

\S4method{cell_align}{CellValue}(obj)

cell_align(obj) <- value

\S4method{cell_align}{CellValue}(obj) <- value

tt_level(obj)

\S4method{tt_level}{VNodeInfo}(obj)

tt_level(obj) <- value

\S4method{tt_level}{VNodeInfo}(obj) <- value

\S4method{tt_level}{VTableTree}(obj) <- value

indent_mod(obj)

\S4method{indent_mod}{Split}(obj)

\S4method{indent_mod}{VTableNodeInfo}(obj)

\S4method{indent_mod}{ANY}(obj)

\S4method{indent_mod}{RowsVerticalSection}(obj)

indent_mod(obj) <- value

\S4method{indent_mod}{Split}(obj) <- value

\S4method{indent_mod}{VTableNodeInfo}(obj) <- value

\S4method{indent_mod}{CellValue}(obj) <- value

\S4method{indent_mod}{RowsVerticalSection}(obj) <- value

content_indent_mod(obj)

\S4method{content_indent_mod}{Split}(obj)

\S4method{content_indent_mod}{VTableNodeInfo}(obj)

content_indent_mod(obj) <- value

\S4method{content_indent_mod}{Split}(obj) <- value

\S4method{content_indent_mod}{VTableNodeInfo}(obj) <- value

rawvalues(obj)

\S4method{rawvalues}{ValueWrapper}(obj)

\S4method{rawvalues}{LevelComboSplitValue}(obj)

\S4method{rawvalues}{list}(obj)

\S4method{rawvalues}{ANY}(obj)

\S4method{rawvalues}{CellValue}(obj)

\S4method{rawvalues}{TreePos}(obj)

\S4method{rawvalues}{RowsVerticalSection}(obj)

value_names(obj)

\S4method{value_names}{ANY}(obj)

\S4method{value_names}{TreePos}(obj)

\S4method{value_names}{list}(obj)

\S4method{value_names}{ValueWrapper}(obj)

\S4method{value_names}{LevelComboSplitValue}(obj)

\S4method{value_names}{RowsVerticalSection}(obj)

value_labels(obj)

\S4method{value_labels}{ANY}(obj)

\S4method{value_labels}{TreePos}(obj)

\S4method{value_labels}{list}(obj)

\S4method{value_labels}{RowsVerticalSection}(obj)

\S4method{value_labels}{ValueWrapper}(obj)

\S4method{value_labels}{LevelComboSplitValue}(obj)

\S4method{value_labels}{MultiVarSplit}(obj)

spl_varlabels(obj)

\S4method{spl_varlabels}{MultiVarSplit}(obj)

spl_varlabels(object) <- value

\S4method{spl_varlabels}{MultiVarSplit}(object) <- value

splv_extra(obj)

\S4method{splv_extra}{SplitValue}(obj)

splv_extra(obj) <- value

\S4method{splv_extra}{SplitValue}(obj) <- value

split_exargs(obj)

\S4method{split_exargs}{Split}(obj)

split_exargs(obj) <- value

\S4method{split_exargs}{Split}(obj) <- value

col_extra_args(obj, df = NULL)

\S4method{col_extra_args}{InstantiatedColumnInfo}(obj, df = NULL)

\S4method{col_extra_args}{PreDataTableLayouts}(obj, df = NULL)

\S4method{col_extra_args}{PreDataColLayout}(obj, df = NULL)

\S4method{col_extra_args}{LayoutColTree}(obj, df = NULL)

\S4method{col_extra_args}{LayoutColLeaf}(obj, df = NULL)

disp_ccounts(obj)

\S4method{disp_ccounts}{VTableTree}(obj)

\S4method{disp_ccounts}{InstantiatedColumnInfo}(obj)

\S4method{disp_ccounts}{PreDataTableLayouts}(obj)

\S4method{disp_ccounts}{PreDataColLayout}(obj)

disp_ccounts(obj) <- value

\S4method{disp_ccounts}{VTableTree}(obj) <- value

\S4method{disp_ccounts}{InstantiatedColumnInfo}(obj) <- value

\S4method{disp_ccounts}{PreDataColLayout}(obj) <- value

\S4method{disp_ccounts}{LayoutColTree}(obj) <- value

\S4method{disp_ccounts}{PreDataTableLayouts}(obj) <- value

colcount_format(obj)

\S4method{colcount_format}{InstantiatedColumnInfo}(obj)

\S4method{colcount_format}{VTableNodeInfo}(obj)

\S4method{colcount_format}{PreDataColLayout}(obj)

\S4method{colcount_format}{PreDataTableLayouts}(obj)

colcount_format(obj) <- value

\S4method{colcount_format}{InstantiatedColumnInfo}(obj) <- value

\S4method{colcount_format}{VTableNodeInfo}(obj) <- value

\S4method{colcount_format}{PreDataColLayout}(obj) <- value

\S4method{colcount_format}{PreDataTableLayouts}(obj) <- value

\S4method{as.vector}{TableRow}(x, mode = "any")

\S4method{as.vector}{ElementaryTable}(x, mode = "any")

spl_cuts(obj)

\S4method{spl_cuts}{VarStaticCutSplit}(obj)

spl_cutlabels(obj)

\S4method{spl_cutlabels}{VarStaticCutSplit}(obj)

spl_cutfun(obj)

\S4method{spl_cutfun}{VarDynCutSplit}(obj)

spl_cutlabelfun(obj)

\S4method{spl_cutlabelfun}{VarDynCutSplit}(obj)

spl_is_cmlcuts(obj)

\S4method{spl_is_cmlcuts}{VarDynCutSplit}(obj)

spl_varnames(obj)

\S4method{spl_varnames}{MultiVarSplit}(obj)

spl_varnames(object) <- value

\S4method{spl_varnames}{MultiVarSplit}(object) <- value

\S4method{row_footnotes}{TableRow}(obj)

\S4method{row_footnotes}{RowsVerticalSection}(obj)

\S4method{row_footnotes}{TableRow}(obj) <- value

\S4method{row_footnotes}{VTableTree}(obj)

\S4method{cell_footnotes}{CellValue}(obj)

\S4method{cell_footnotes}{TableRow}(obj)

\S4method{cell_footnotes}{LabelRow}(obj)

\S4method{cell_footnotes}{VTableTree}(obj)

\S4method{cell_footnotes}{CellValue}(obj) <- value

\S4method{cell_footnotes}{DataRow}(obj) <- value

\S4method{cell_footnotes}{ContentRow}(obj) <- value

\S4method{col_fnotes_here}{LayoutColTree}(obj)

\S4method{col_fnotes_here}{LayoutColLeaf}(obj)

\S4method{col_fnotes_here}{LayoutColTree}(obj) <- value

\S4method{col_fnotes_here}{LayoutColLeaf}(obj) <- value

\S4method{ref_index}{RefFootnote}(obj)

\S4method{ref_index}{RefFootnote}(obj) <- value

\S4method{ref_msg}{RefFootnote}(obj)

\S4method{fnotes_at_path}{VTableTree,character}(obj, rowpath = NULL, colpath = NULL, reset_idx = TRUE) <- value

\S4method{fnotes_at_path}{VTableTree,`NULL`}(obj, rowpath = NULL, colpath = NULL, reset_idx = TRUE) <- value

\S4method{rbind2}{VTableNodeInfo,missing}(x, y)

\S4method{tt_at_path}{VTableTree}(tt, path, ...)

\S4method{tt_at_path}{VTableTree,ANY,VTableTree}(tt, path, ...) <- value

\S4method{tt_at_path}{VTableTree,ANY,`NULL`}(tt, path, ...) <- value

\S4method{tt_at_path}{VTableTree,ANY,TableRow}(tt, path, ...) <- value

\S4method{print}{VTableTree}(x, ...)

\S4method{show}{VTableTree}(object)
}
\arguments{
\item{x}{The object.}

\item{...}{Splits or SplitVector objects}

\item{lyt}{layout object pre-data used for tabulation}

\item{spl}{Split. The split.}

\item{pos}{numeric(1). Intended for internal use.}

\item{cmpnd_fun}{function. Intended for internal use.}

\item{constructor}{function.}

\item{label}{character(1). A label (not to be confused with the name) for the
object/structure.}

\item{cfun}{list/function/NULL. tabulation function(s) for creating content
rows. Must accept \code{x} or \code{df} as first parameter. Must accept
\code{labelstr} as the second argument. Can optionally accept all optional
arguments accepted by analysis functions. See \code{\link{analyze}}.}

\item{child_labels}{string. One of \code{"default"}, \code{"visible"},
\code{"hidden"}. What should the display behavior be for the  labels (ie
label rows) of the children of this split. Defaults to \code{"default"}
which flags the label row as visible only if the child has 0 content rows.}

\item{cformat}{format spec. Format for content rows}

\item{cna_str}{character. NA string for use with \code{cformat} for content
table.}

\item{indent_mod}{numeric. Modifier for the default indent position for the
structure created by this function(subtable, content table, or row)
\emph{and all of that structure's children}. Defaults to 0, which
corresponds to the unmodified default behavior.}

\item{cvar}{character(1). The variable, if any, which the content function
should accept. Defaults to NA.}

\item{extra_args}{list. Extra arguments to be passed to the tabulation
function. Element position in the list corresponds to the children of this
split. Named elements in the child-specific lists are ignored if they do
not match a formal argument of the tabulation function.}

\item{df}{dataset (data.frame or tibble)}

\item{obj}{The object.}

\item{depth}{depth in tree}

\item{indent}{indent}

\item{print_indent}{indent for print}

\item{object}{The object to modify in-place}

\item{value}{The new value}

\item{nested}{boolean. Should this layout instruction be applied within the
existing layout structure \emph{if possible} (\code{TRUE}, the default) or as a
new top-level element (`FALSE). Ignored if it would nest a split underneath
analyses, which is not allowed.}

\item{for_analyze}{logical(1).}

\item{format}{FormatSpec. Format associated with this split. Formats can be
declared via strings (\code{"xx.x"}) or function. In cases such as
\code{analyze} calls, they can character vectors or lists of functions.}

\item{na_str}{character(1). String that should be displayed when the value of \code{x} is missing.
Defaults to \code{"NA"}.}

\item{override}{logical(1).}

\item{tt}{TableTree (or related class). A TableTree object representing a
populated table.}

\item{incl.cont}{logical. Include rows from content tables within the tree. Defaults to \code{TRUE}}

\item{add.labrows}{logical. Include label rows. Defaults to \code{FALSE}}

\item{mode}{character(1). Passed on to \code{\link[base]{as.vector}}}

\item{rowpath}{character or NULL. Path within row structure. \code{NULL}
indicates the footnote should go on the column rather than cell.}

\item{colpath}{character or NULL. Path within column structure. \code{NULL}
indicates footnote should go on the row rather than cell}

\item{reset_idx}{logical(1). Should the numbering for referential footnotes
be immediately recalculated. Defaults to TRUE.}

\item{y}{Second element to be rbound via \code{rbind2}}

\item{path}{character. A vector path for a position within the structure of a
tabletree. Each element represents a subsequent choice amongst the children
of the previous choice.}
}
\value{
Various, but should be considered implementation details.
}
\description{
These are internal methods that are documented only to satisfy
R CMD check. End users should pay no attention to this documentation.
}
\examples{

library(dplyr)

iris2 <- iris \%>\%
  group_by(Species) \%>\%
  mutate(group = as.factor(rep_len(c("a", "b"), length.out = n()))) \%>\%
  ungroup()

lyt <- basic_table() \%>\%
  split_cols_by("Species") \%>\%
  split_cols_by("group") \%>\%
  analyze(c("Sepal.Length", "Petal.Width"), afun = list_wrap_x(summary),
          format = "xx.xx")

tbl <- build_table(lyt, iris2)
indent_mod(tbl)
indent_mod(tbl) <- 1L
tbl
}
